/* CVS $Id: $ */
package de.tudresden.bau.cib.vl.core.model.ontology.vocabulary; 
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
import com.hp.hpl.jena.ontology.*;

import de.tudresden.bau.cib.vl.core.model.ontology.EnergyEnhancedBimModel;
 
/**
 * Vocabulary definitions from file:resources/eeBim.owl 
 * @author Auto-generated by schemagen on 21 Aug 2014 15:48 
 */
public class EeBIMOntoVocabulary {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = EnergyEnhancedBimModel.NS_EEBIM;
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** Find the OntClass by the URI 
     * @param uri can be in lower cases
     * @return
     */
    public static final OntClass findOntClass(String uri) {
    	ExtendedIterator<OntClass> ontClassIterator = m_model.listClasses();
    	while(ontClassIterator.hasNext()) {
    		OntClass ontClass = ontClassIterator.next();
    		if(ontClass.getURI().equalsIgnoreCase(uri)) {
    			return ontClass;
    		}
    	}
    	return null; 	
    }
    

    // Vocabulary properties
    ///////////////////////////

    public static final ObjectProperty HAS_CLIMATE_LOCATION = m_model.createObjectProperty( NS + "hasClimateLocation" );
    
    public static final ObjectProperty HAS_COMBUSTIBLE = m_model.createObjectProperty( NS + "hasCombustible" );
    
    public static final ObjectProperty HAS_CONSTRUCTION = m_model.createObjectProperty( NS + "hasConstruction" );
    
    public static final ObjectProperty HAS_HEATING_SYSTEM = m_model.createObjectProperty( NS + "hasHeatingSystem" );
    
    public static final ObjectProperty HAS_MATERIAL = m_model.createObjectProperty( NS + "hasMaterial" );
    
    public static final ObjectProperty HAS_RESOURCE = m_model.createObjectProperty( NS + "hasResource" );
    
    public static final ObjectProperty HAS_SPACE_TYPE = m_model.createObjectProperty( NS + "hasSpaceType" );
    
    public static final ObjectProperty HAS_SUMMARY = m_model.createObjectProperty( NS + "hasSummary" );
    
    public static final ObjectProperty HAS_WATER_PREPARATION = m_model.createObjectProperty( NS + "hasWaterPreparation" );
    
    public static final ObjectProperty RULE_FIRED_FOR = m_model.createObjectProperty( NS + "ruleFiredFor" );
    
    public static final DatatypeProperty ALBEDO = m_model.createDatatypeProperty( NS + "albedo" );
    
    public static final DatatypeProperty ALTITUDE = m_model.createDatatypeProperty( NS + "altitude" );
    
    public static final DatatypeProperty AREA = m_model.createDatatypeProperty( NS + "area" );
    
    public static final DatatypeProperty BUILDING_ENVELOPE_AREA = m_model.createDatatypeProperty( NS + "buildingEnvelopeArea" );
    
    public static final DatatypeProperty COMBUSTIBLE_CONSUMPTION = m_model.createDatatypeProperty( NS + "combustibleConsumption" );
    
    public static final DatatypeProperty COMBUSTIBLE_FACTOR = m_model.createDatatypeProperty( NS + "combustibleFactor" );
    
    public static final DatatypeProperty COMMENT = m_model.createDatatypeProperty( NS + "comment" );
    
    public static final DatatypeProperty COUNTRY = m_model.createDatatypeProperty( NS + "country" );
    
    public static final DatatypeProperty DECREASED_THERMAL_BRIDGE_OVERHEAD = m_model.createDatatypeProperty( NS + "decreasedThermalBridgeOverhead" );
    
    public static final DatatypeProperty DEFINITION = m_model.createDatatypeProperty( NS + "definition" );
    
    public static final DatatypeProperty DWELLING_AREA = m_model.createDatatypeProperty( NS + "dwellingArea" );
    
    public static final DatatypeProperty ENERGY_CHARACTERISTIC = m_model.createDatatypeProperty( NS + "energyCharacteristic" );
    
    public static final DatatypeProperty ENERGY_CONSUMPTION = m_model.createDatatypeProperty( NS + "energyConsumption" );
    
    public static final DatatypeProperty HEATING_ENERGY_CONSUMPTION = m_model.createDatatypeProperty( NS + "heatingEnergyConsumption" );
    
    public static final DatatypeProperty ID = m_model.createDatatypeProperty( NS + "id" );
    
    public static final DatatypeProperty IS_ISOLATED = m_model.createDatatypeProperty( NS + "isIsolated" );
    
    public static final DatatypeProperty IS_SIMPLIFIED_EN_EVPOSSIBLE = m_model.createDatatypeProperty( NS + "isSimplifiedEnEVPossible" );
    
    public static final DatatypeProperty LATITUDE = m_model.createDatatypeProperty( NS + "latitude" );
    
    public static final DatatypeProperty LONGITUDE = m_model.createDatatypeProperty( NS + "longitude" );
    
    public static final DatatypeProperty MAXIMUM_THERMAL_TRANSMITTANCE_LOSSES = m_model.createDatatypeProperty( NS + "maximumThermalTransmittanceLosses" );
    
    public static final DatatypeProperty NAME = m_model.createDatatypeProperty( NS + "name" );
    
    public static final DatatypeProperty ORIENTATION = m_model.createDatatypeProperty( NS + "orientation" );
    
    public static final DatatypeProperty OVERALL_AREA_UVALUE_PRODUCT = m_model.createDatatypeProperty( NS + "overallAreaUValueProduct" );
    
    public static final DatatypeProperty PATH_TO_TEMPLATE = m_model.createDatatypeProperty( NS + "pathToTemplate" );
    
    public static final DatatypeProperty PERSON_LOAD = m_model.createDatatypeProperty( NS + "personLoad" );
    
    public static final DatatypeProperty REGION = m_model.createDatatypeProperty( NS + "region" );
    
    public static final DatatypeProperty TOWN = m_model.createDatatypeProperty( NS + "town" );
    
    public static final DatatypeProperty TYPE = m_model.createDatatypeProperty( NS + "type" );
    
    public static final DatatypeProperty U_VALUE = m_model.createDatatypeProperty( NS + "uValue" );
    
    public static final DatatypeProperty UNIT = m_model.createDatatypeProperty( NS + "unit" );
    
    public static final DatatypeProperty VALUE = m_model.createDatatypeProperty( NS + "value" );
    
    public static final DatatypeProperty WINDOW_AREA = m_model.createDatatypeProperty( NS + "windowArea" );
    

    // Vocabulary classes
    ///////////////////////////
    
    public static final OntClass CLIMATE_LOCATION = m_model.createClass( NS + "ClimateLocation" );
    
    public static final OntClass COMBUSTIBLE = m_model.createClass( NS + "Combustible" );
    
    public static final OntClass CONSTRUCTION = m_model.createClass( NS + "Construction" );
    
    public static final OntClass DWELLING_HOUSE = m_model.createClass( NS + "DwellingHouse" );
    
    public static final OntClass ENERGY_CERTIFICATE = m_model.createClass( NS + "EnergyCertificate" );
    
    public static final OntClass ENERGY_CLASS = m_model.createClass( NS + "EnergyClass" );
    
    public static final OntClass ENERGY_RESULT = m_model.createClass( NS + "EnergyResult" );
    
    public static final OntClass HVAC = m_model.createClass( NS + "HVAC" );
    
    public static final OntClass HEATING_SYSTEM = m_model.createClass( NS + "HeatingSystem" );
    
    public static final OntClass HOT_WATER_PREPARATION = m_model.createClass( NS + "HotWaterPreparation" );
    
    public static final OntClass MATERIAL = m_model.createClass( NS + "Material" );
    
    public static final OntClass RESULT = m_model.createClass( NS + "Result" );
    
    public static final OntClass SPACE_TYPE = m_model.createClass( NS + "SpaceType" );
    
    public static final OntClass SUMMARY = m_model.createClass( NS + "Summary" );
    
    public static final OntClass TEMPLATE = m_model.createClass( NS + "Template" );
    

    // Vocabulary individuals
    ///////////////////////////

    
    /** Ontology individual corresponding to {@link #A} */
    public static final Individual _A = m_model.createIndividual( NS + "A", ENERGY_CLASS );

    
    
    /** Ontology individual corresponding to {@link #B} */
    public static final Individual _B = m_model.createIndividual( NS + "B", ENERGY_CLASS );

    
    
    /** Ontology individual corresponding to {@link #BROWN_COAL} */
    public static final Individual _BROWN_COAL = m_model.createIndividual( NS + "BrownCoal", COMBUSTIBLE );

    
    
    /** Ontology individual corresponding to {@link #C} */
    public static final Individual _C = m_model.createIndividual( NS + "C", ENERGY_CLASS );

    
    
    /** Ontology individual corresponding to {@link #D} */
    public static final Individual _D = m_model.createIndividual( NS + "D", ENERGY_CLASS );

    
    
    /** Ontology individual corresponding to {@link #DISTRICT_HEATING} */
    public static final Individual _DISTRICT_HEATING = m_model.createIndividual( NS + "DistrictHeating", COMBUSTIBLE );

    
    
    /** Ontology individual corresponding to {@link #E} */
    public static final Individual _E = m_model.createIndividual( NS + "E", ENERGY_CLASS );

    
    
    /** Ontology individual corresponding to {@link #ELECTRICITY} */
    public static final Individual _ELECTRICITY = m_model.createIndividual( NS + "Electricity", COMBUSTIBLE );

    
    
    /** Ontology individual corresponding to {@link #ENERGY_SAVINGS_POSSIBLE} */
    public static final Individual _ENERGY_SAVINGS_POSSIBLE = m_model.createIndividual( NS + "EnergySavingsPossible", SUMMARY );

    
    
    /** Ontology individual corresponding to {@link #F} */
    public static final Individual _F = m_model.createIndividual( NS + "F", ENERGY_CLASS );

    
    
    /** Ontology individual corresponding to {@link #G} */
    public static final Individual _G = m_model.createIndividual( NS + "G", ENERGY_CLASS );

    
    
    /** Ontology individual corresponding to {@link #LIQUIFIED_GAS} */
    public static final Individual _LIQUIFIED_GAS = m_model.createIndividual( NS + "LiquifiedGas", COMBUSTIBLE );

    
    
    /** Ontology individual corresponding to {@link #NO_NEED_FOR_ACTION} */
    public static final Individual _NO_NEED_FOR_ACTION = m_model.createIndividual( NS + "NoNeedForAction", SUMMARY );

    
    
    /** Ontology individual corresponding to {@link #OIL} */
    public static final Individual _OIL = m_model.createIndividual( NS + "Oil", COMBUSTIBLE );

    
    
    /** Ontology individual corresponding to {@link #PETROLEUM_GAS} */
    public static final Individual _PETROLEUM_GAS = m_model.createIndividual( NS + "PetroleumGas", COMBUSTIBLE );

    
    
    /** Ontology individual corresponding to {@link #STONE_COAL} */
    public static final Individual _STONE_COAL = m_model.createIndividual( NS + "StoneCoal", COMBUSTIBLE );

    
    
    /** Ontology individual corresponding to {@link #URGENT_NEED_FOR_ACTION} */
    public static final Individual _URGENT_NEED_FOR_ACTION = m_model.createIndividual( NS + "UrgentNeedForAction", SUMMARY );

    
    
    /** Ontology individual corresponding to {@link #WOOD} */
    public static final Individual _WOOD = m_model.createIndividual( NS + "Wood", COMBUSTIBLE );

    
    /** Ontology individual corresponding to {@link #CENTRAL_HOT_WATER_PREPARATION} */
    public static final Individual _CENTRAL_HOT_WATER_PREPARATION = m_model.createIndividual( NS + "CentralHotWaterPreparation", HOT_WATER_PREPARATION );
}

/*
@footer@
*/

