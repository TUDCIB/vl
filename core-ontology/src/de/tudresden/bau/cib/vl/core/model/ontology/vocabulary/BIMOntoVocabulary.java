/* CVS $Id: $ */
package de.tudresden.bau.cib.vl.core.model.ontology.vocabulary; 
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
import com.hp.hpl.jena.ontology.*;

import de.tudresden.bau.cib.vl.core.model.bim.ifc.Ifc2x3DataModelProxy;
 
/**
 * Vocabulary definitions from ..resourcesIFC2X3_TC1_reworked.owl 
 * @author Auto-generated by schemagen on 28 Jul 2014 09:58 
 */
public class BIMOntoVocabulary {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = Ifc2x3DataModelProxy.NS_IFCOWL;
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** Find the OntClass by the URI 
     * @param uri can be in lower cases
     * @return
     */
    public static final OntClass findOntClass(String uri) {
    	ExtendedIterator<OntClass> ontClassIterator = m_model.listClasses();
    	while(ontClassIterator.hasNext()) {
    		OntClass ontClass = ontClassIterator.next();
    		if(ontClass.getURI().equalsIgnoreCase(uri)) {
    			return ontClass;
    		}
    	}
    	return null; 	
    }
    

    // Vocabulary properties
    ///////////////////////////

    public static final ObjectProperty ACIDITY_CONCENTRATION = m_model.createObjectProperty( NS + "AcidityConcentration" );
    
    public static final ObjectProperty ACTING_ROLE = m_model.createObjectProperty( NS + "ActingRole" );
    
    public static final ObjectProperty ACTION_ID = m_model.createObjectProperty( NS + "ActionID" );
    
    public static final ObjectProperty ACTOR = m_model.createObjectProperty( NS + "Actor" );
    
    public static final ObjectProperty ACTORS = m_model.createObjectProperty( NS + "Actors" );
    
    public static final ObjectProperty ACTUAL_DURATION = m_model.createObjectProperty( NS + "ActualDuration" );
    
    public static final ObjectProperty ACTUAL_FINISH = m_model.createObjectProperty( NS + "ActualFinish" );
    
    public static final ObjectProperty ACTUAL_START = m_model.createObjectProperty( NS + "ActualStart" );
    
    public static final ObjectProperty ADDITIONAL_CONDITIONS = m_model.createObjectProperty( NS + "AdditionalConditions" );
    
    public static final ObjectProperty ADDRESS_LINES = m_model.createObjectProperty( NS + "AddressLines" );
    
    public static final ObjectProperty ADDRESSES = m_model.createObjectProperty( NS + "Addresses" );
    
    public static final ObjectProperty ADMIXTURES_DESCRIPTION = m_model.createObjectProperty( NS + "AdmixturesDescription" );
    
    public static final ObjectProperty AGGREGATES = m_model.createObjectProperty( NS + "Aggregates" );
    
    public static final ObjectProperty AGREEMENT_FLAG = m_model.createObjectProperty( NS + "AgreementFlag" );
    
    public static final ObjectProperty ALKALINITY_CONCENTRATION = m_model.createObjectProperty( NS + "AlkalinityConcentration" );
    
    public static final ObjectProperty AMBIENT_INTENSITY = m_model.createObjectProperty( NS + "AmbientIntensity" );
    
    public static final ObjectProperty AMOUNT_OF_SUBSTANCE_EXPONENT = m_model.createObjectProperty( NS + "AmountOfSubstanceExponent" );
    
    public static final ObjectProperty ANCHORAGE_SLIP = m_model.createObjectProperty( NS + "AnchorageSlip" );
    
    public static final ObjectProperty ANGLE = m_model.createObjectProperty( NS + "Angle" );
    
    public static final ObjectProperty ANNOTATED_BY_SYMBOLS = m_model.createObjectProperty( NS + "AnnotatedBySymbols" );
    
    public static final ObjectProperty ANNOTATED_CURVE = m_model.createObjectProperty( NS + "AnnotatedCurve" );
    
    public static final ObjectProperty ANNOTATED_SURFACE = m_model.createObjectProperty( NS + "AnnotatedSurface" );
    
    public static final ObjectProperty APPLICABLE_DATE = m_model.createObjectProperty( NS + "ApplicableDate" );
    
    public static final ObjectProperty APPLICABLE_DATES = m_model.createObjectProperty( NS + "ApplicableDates" );
    
    public static final ObjectProperty APPLICABLE_OCCURRENCE = m_model.createObjectProperty( NS + "ApplicableOccurrence" );
    
    public static final ObjectProperty APPLICABLE_VALUE_RATIO = m_model.createObjectProperty( NS + "ApplicableValueRatio" );
    
    public static final ObjectProperty APPLICATION_DEVELOPER = m_model.createObjectProperty( NS + "ApplicationDeveloper" );
    
    public static final ObjectProperty APPLICATION_FULL_NAME = m_model.createObjectProperty( NS + "ApplicationFullName" );
    
    public static final ObjectProperty APPLICATION_IDENTIFIER = m_model.createObjectProperty( NS + "ApplicationIdentifier" );
    
    public static final ObjectProperty APPLIED_CONDITION = m_model.createObjectProperty( NS + "AppliedCondition" );
    
    public static final ObjectProperty APPLIED_LOAD = m_model.createObjectProperty( NS + "AppliedLoad" );
    
    public static final ObjectProperty APPLIED_VALUE = m_model.createObjectProperty( NS + "AppliedValue" );
    
    public static final ObjectProperty APPROVAL = m_model.createObjectProperty( NS + "Approval" );
    
    public static final ObjectProperty APPROVAL_DATE_TIME = m_model.createObjectProperty( NS + "ApprovalDateTime" );
    
    public static final ObjectProperty APPROVAL_LEVEL = m_model.createObjectProperty( NS + "ApprovalLevel" );
    
    public static final ObjectProperty APPROVAL_QUALIFIER = m_model.createObjectProperty( NS + "ApprovalQualifier" );
    
    public static final ObjectProperty APPROVAL_STATUS = m_model.createObjectProperty( NS + "ApprovalStatus" );
    
    public static final ObjectProperty APPROVED_PROPERTIES = m_model.createObjectProperty( NS + "ApprovedProperties" );
    
    public static final ObjectProperty AREA_VALUE = m_model.createObjectProperty( NS + "AreaValue" );
    
    public static final ObjectProperty ASSET_ID = m_model.createObjectProperty( NS + "AssetID" );
    
    public static final ObjectProperty ASSIGNED_ITEMS = m_model.createObjectProperty( NS + "AssignedItems" );
    
    public static final ObjectProperty ASSIGNED_STRUCTURAL_ACTIVITY = m_model.createObjectProperty( NS + "AssignedStructuralActivity" );
    
    public static final ObjectProperty ASSIGNED_TO_FLOW_ELEMENT = m_model.createObjectProperty( NS + "AssignedToFlowElement" );
    
    public static final ObjectProperty ASSIGNED_TO_STRUCTURAL_ITEM = m_model.createObjectProperty( NS + "AssignedToStructuralItem" );
    
    public static final ObjectProperty AXIS = m_model.createObjectProperty( NS + "Axis" );
    
    public static final ObjectProperty AXIS1 = m_model.createObjectProperty( NS + "Axis1" );
    
    public static final ObjectProperty AXIS2 = m_model.createObjectProperty( NS + "Axis2" );
    
    public static final ObjectProperty AXIS3 = m_model.createObjectProperty( NS + "Axis3" );
    
    public static final ObjectProperty AXIS_CURVE = m_model.createObjectProperty( NS + "AxisCurve" );
    
    public static final ObjectProperty AXIS_POSITION = m_model.createObjectProperty( NS + "AxisPosition" );
    
    public static final ObjectProperty AXIS_TAG = m_model.createObjectProperty( NS + "AxisTag" );
    
    public static final ObjectProperty BACKGROUND_COLOUR = m_model.createObjectProperty( NS + "BackgroundColour" );
    
    public static final ObjectProperty BAR_COUNT = m_model.createObjectProperty( NS + "BarCount" );
    
    public static final ObjectProperty BAR_LENGTH = m_model.createObjectProperty( NS + "BarLength" );
    
    public static final ObjectProperty BASE_DEPTH1 = m_model.createObjectProperty( NS + "BaseDepth1" );
    
    public static final ObjectProperty BASE_DEPTH2 = m_model.createObjectProperty( NS + "BaseDepth2" );
    
    public static final ObjectProperty BASE_DEPTH3 = m_model.createObjectProperty( NS + "BaseDepth3" );
    
    public static final ObjectProperty BASE_QUANTITY = m_model.createObjectProperty( NS + "BaseQuantity" );
    
    public static final ObjectProperty BASE_SURFACE = m_model.createObjectProperty( NS + "BaseSurface" );
    
    public static final ObjectProperty BASE_WIDTH2 = m_model.createObjectProperty( NS + "BaseWidth2" );
    
    public static final ObjectProperty BASE_WIDTH4 = m_model.createObjectProperty( NS + "BaseWidth4" );
    
    public static final ObjectProperty BASIS_CURVE = m_model.createObjectProperty( NS + "BasisCurve" );
    
    public static final ObjectProperty BASIS_SURFACE = m_model.createObjectProperty( NS + "BasisSurface" );
    
    public static final ObjectProperty BEAM_WIDTH_ANGLE = m_model.createObjectProperty( NS + "BeamWidthAngle" );
    
    public static final ObjectProperty BENCHMARK_VALUES = m_model.createObjectProperty( NS + "BenchmarkValues" );
    
    public static final ObjectProperty BLUE = m_model.createObjectProperty( NS + "Blue" );
    
    public static final ObjectProperty BOILING_POINT = m_model.createObjectProperty( NS + "BoilingPoint" );
    
    public static final ObjectProperty BOTTOM_RADIUS = m_model.createObjectProperty( NS + "BottomRadius" );
    
    public static final ObjectProperty BOTTOM_XDIM = m_model.createObjectProperty( NS + "BottomXDim" );
    
    public static final ObjectProperty BOUND = m_model.createObjectProperty( NS + "Bound" );
    
    public static final ObjectProperty BOUNDED_BY = m_model.createObjectProperty( NS + "BoundedBy" );
    
    public static final ObjectProperty BOUNDS = m_model.createObjectProperty( NS + "Bounds" );
    
    public static final ObjectProperty BOX_ALIGNMENT = m_model.createObjectProperty( NS + "BoxAlignment" );
    
    public static final ObjectProperty BOX_HEIGHT = m_model.createObjectProperty( NS + "BoxHeight" );
    
    public static final ObjectProperty BOX_ROTATE_ANGLE = m_model.createObjectProperty( NS + "BoxRotateAngle" );
    
    public static final ObjectProperty BOX_SLANT_ANGLE = m_model.createObjectProperty( NS + "BoxSlantAngle" );
    
    public static final ObjectProperty BOX_WIDTH = m_model.createObjectProperty( NS + "BoxWidth" );
    
    public static final ObjectProperty BUILDING_ADDRESS = m_model.createObjectProperty( NS + "BuildingAddress" );
    
    public static final ObjectProperty CO2CONTENT = m_model.createObjectProperty( NS + "CO2Content" );
    
    public static final ObjectProperty COCONTENT = m_model.createObjectProperty( NS + "COContent" );
    
    public static final ObjectProperty CAPACITY_BY_NUMBER = m_model.createObjectProperty( NS + "CapacityByNumber" );
    
    public static final ObjectProperty CAPACITY_BY_WEIGHT = m_model.createObjectProperty( NS + "CapacityByWeight" );
    
    public static final ObjectProperty CARBON_CONTENT = m_model.createObjectProperty( NS + "CarbonContent" );
    
    public static final ObjectProperty CASING_DEPTH = m_model.createObjectProperty( NS + "CasingDepth" );
    
    public static final ObjectProperty CASING_THICKNESS = m_model.createObjectProperty( NS + "CasingThickness" );
    
    public static final ObjectProperty CAUSED_BY = m_model.createObjectProperty( NS + "CausedBy" );
    
    public static final ObjectProperty CAUSES = m_model.createObjectProperty( NS + "Causes" );
    
    public static final ObjectProperty CENTRE_OF_GRAVITY_IN_X = m_model.createObjectProperty( NS + "CentreOfGravityInX" );
    
    public static final ObjectProperty CENTRE_OF_GRAVITY_IN_Y = m_model.createObjectProperty( NS + "CentreOfGravityInY" );
    
    public static final ObjectProperty CFS_FACES = m_model.createObjectProperty( NS + "CfsFaces" );
    
    public static final ObjectProperty CHARACTER_SPACING = m_model.createObjectProperty( NS + "CharacterSpacing" );
    
    public static final ObjectProperty CLASSIFIED_AS = m_model.createObjectProperty( NS + "ClassifiedAs" );
    
    public static final ObjectProperty CLASSIFIED_CONSTRAINT = m_model.createObjectProperty( NS + "ClassifiedConstraint" );
    
    public static final ObjectProperty CLASSIFIED_MATERIAL = m_model.createObjectProperty( NS + "ClassifiedMaterial" );
    
    public static final ObjectProperty CLOSED_CURVE = m_model.createObjectProperty( NS + "ClosedCurve" );
    
    public static final ObjectProperty COEFFICIENT = m_model.createObjectProperty( NS + "Coefficient" );
    
    public static final ObjectProperty COLOUR = m_model.createObjectProperty( NS + "Colour" );
    
    public static final ObjectProperty COLOUR_APPEARANCE = m_model.createObjectProperty( NS + "ColourAppearance" );
    
    public static final ObjectProperty COLOUR_COMPONENTS = m_model.createObjectProperty( NS + "ColourComponents" );
    
    public static final ObjectProperty COLOUR_TEMPERATURE = m_model.createObjectProperty( NS + "ColourTemperature" );
    
    public static final ObjectProperty COMBUSTION_TEMPERATURE = m_model.createObjectProperty( NS + "CombustionTemperature" );
    
    public static final ObjectProperty COMPLETION = m_model.createObjectProperty( NS + "Completion" );
    
    public static final ObjectProperty COMPONENT_OF_TOTAL = m_model.createObjectProperty( NS + "ComponentOfTotal" );
    
    public static final ObjectProperty COMPONENTS = m_model.createObjectProperty( NS + "Components" );
    
    public static final ObjectProperty COMPRESSION_FAILURE_X = m_model.createObjectProperty( NS + "CompressionFailureX" );
    
    public static final ObjectProperty COMPRESSION_FAILURE_Y = m_model.createObjectProperty( NS + "CompressionFailureY" );
    
    public static final ObjectProperty COMPRESSION_FAILURE_Z = m_model.createObjectProperty( NS + "CompressionFailureZ" );
    
    public static final ObjectProperty COMPRESSIVE_STRENGTH = m_model.createObjectProperty( NS + "CompressiveStrength" );
    
    public static final ObjectProperty CONCENTRATION_EXPONENT = m_model.createObjectProperty( NS + "ConcentrationExponent" );
    
    public static final ObjectProperty CONDITION = m_model.createObjectProperty( NS + "Condition" );
    
    public static final ObjectProperty CONDITION_COORDINATE_SYSTEM = m_model.createObjectProperty( NS + "ConditionCoordinateSystem" );
    
    public static final ObjectProperty CONNECTED_BY = m_model.createObjectProperty( NS + "ConnectedBy" );
    
    public static final ObjectProperty CONNECTED_FROM = m_model.createObjectProperty( NS + "ConnectedFrom" );
    
    public static final ObjectProperty CONNECTED_TO = m_model.createObjectProperty( NS + "ConnectedTo" );
    
    public static final ObjectProperty CONNECTION_CONSTRAINT = m_model.createObjectProperty( NS + "ConnectionConstraint" );
    
    public static final ObjectProperty CONNECTION_GEOMETRY = m_model.createObjectProperty( NS + "ConnectionGeometry" );
    
    public static final ObjectProperty CONNECTION_TYPE = m_model.createObjectProperty( NS + "ConnectionType" );
    
    public static final ObjectProperty CONNECTS_STRUCTURAL_MEMBERS = m_model.createObjectProperty( NS + "ConnectsStructuralMembers" );
    
    public static final ObjectProperty CONSTANT_ATTENUATION = m_model.createObjectProperty( NS + "ConstantAttenuation" );
    
    public static final ObjectProperty CONSTRAINT_SOURCE = m_model.createObjectProperty( NS + "ConstraintSource" );
    
    public static final ObjectProperty CONTAINED_IN = m_model.createObjectProperty( NS + "ContainedIn" );
    
    public static final ObjectProperty CONTAINED_IN_STRUCTURE = m_model.createObjectProperty( NS + "ContainedInStructure" );
    
    public static final ObjectProperty CONTAINS = m_model.createObjectProperty( NS + "Contains" );
    
    public static final ObjectProperty CONTAINS_ELEMENTS = m_model.createObjectProperty( NS + "ContainsElements" );
    
    public static final ObjectProperty CONTENTS = m_model.createObjectProperty( NS + "Contents" );
    
    public static final ObjectProperty CONTEXT_IDENTIFIER = m_model.createObjectProperty( NS + "ContextIdentifier" );
    
    public static final ObjectProperty CONTEXT_OF_ITEMS = m_model.createObjectProperty( NS + "ContextOfItems" );
    
    public static final ObjectProperty CONTEXT_TYPE = m_model.createObjectProperty( NS + "ContextType" );
    
    public static final ObjectProperty CONTROL_ELEMENT_ID = m_model.createObjectProperty( NS + "ControlElementId" );
    
    public static final ObjectProperty CONTROL_POINTS_LIST = m_model.createObjectProperty( NS + "ControlPointsList" );
    
    public static final ObjectProperty CONTROLS = m_model.createObjectProperty( NS + "Controls" );
    
    public static final ObjectProperty CONVERSION_FACTOR = m_model.createObjectProperty( NS + "ConversionFactor" );
    
    public static final ObjectProperty COORDINATE_SPACE_DIMENSION = m_model.createObjectProperty( NS + "CoordinateSpaceDimension" );
    
    public static final ObjectProperty COORDINATES = m_model.createObjectProperty( NS + "Coordinates" );
    
    public static final ObjectProperty CORNER = m_model.createObjectProperty( NS + "Corner" );
    
    public static final ObjectProperty COST_TYPE = m_model.createObjectProperty( NS + "CostType" );
    
    public static final ObjectProperty COUNT_VALUE = m_model.createObjectProperty( NS + "CountValue" );
    
    public static final ObjectProperty COUNTRY = m_model.createObjectProperty( NS + "Country" );
    
    public static final ObjectProperty COVERS = m_model.createObjectProperty( NS + "Covers" );
    
    public static final ObjectProperty COVERS_SPACES = m_model.createObjectProperty( NS + "CoversSpaces" );
    
    public static final ObjectProperty CREATING_ACTOR = m_model.createObjectProperty( NS + "CreatingActor" );
    
    public static final ObjectProperty CREATION_DATE = m_model.createObjectProperty( NS + "CreationDate" );
    
    public static final ObjectProperty CREATION_TIME = m_model.createObjectProperty( NS + "CreationTime" );
    
    public static final ObjectProperty CREATORS = m_model.createObjectProperty( NS + "Creators" );
    
    public static final ObjectProperty CRITERION = m_model.createObjectProperty( NS + "Criterion" );
    
    public static final ObjectProperty CRITERION_DATE_TIME = m_model.createObjectProperty( NS + "CriterionDateTime" );
    
    public static final ObjectProperty CROSS_SECTION_AREA = m_model.createObjectProperty( NS + "CrossSectionArea" );
    
    public static final ObjectProperty CROSS_SECTION_POSITIONS = m_model.createObjectProperty( NS + "CrossSectionPositions" );
    
    public static final ObjectProperty CROSS_SECTION_REINFORCEMENT_DEFINITIONS = m_model.createObjectProperty( NS + "CrossSectionReinforcementDefinitions" );
    
    public static final ObjectProperty CROSS_SECTIONS = m_model.createObjectProperty( NS + "CrossSections" );
    
    public static final ObjectProperty CURRENT_VALUE = m_model.createObjectProperty( NS + "CurrentValue" );
    
    public static final ObjectProperty CURVE = m_model.createObjectProperty( NS + "Curve" );
    
    public static final ObjectProperty CURVE_COLOUR = m_model.createObjectProperty( NS + "CurveColour" );
    
    public static final ObjectProperty CURVE_FONT = m_model.createObjectProperty( NS + "CurveFont" );
    
    public static final ObjectProperty CURVE_FONT_SCALING = m_model.createObjectProperty( NS + "CurveFontScaling" );
    
    public static final ObjectProperty CURVE_ON_RELATED_ELEMENT = m_model.createObjectProperty( NS + "CurveOnRelatedElement" );
    
    public static final ObjectProperty CURVE_ON_RELATING_ELEMENT = m_model.createObjectProperty( NS + "CurveOnRelatingElement" );
    
    public static final ObjectProperty CURVE_WIDTH = m_model.createObjectProperty( NS + "CurveWidth" );
    
    public static final ObjectProperty DAILY_INTERACTION = m_model.createObjectProperty( NS + "DailyInteraction" );
    
    public static final ObjectProperty DATA_VALUE = m_model.createObjectProperty( NS + "DataValue" );
    
    public static final ObjectProperty DATE_COMPONENT = m_model.createObjectProperty( NS + "DateComponent" );
    
    public static final ObjectProperty DAY_COMPONENT = m_model.createObjectProperty( NS + "DayComponent" );
    
    public static final ObjectProperty DAYLIGHT_SAVING_OFFSET = m_model.createObjectProperty( NS + "DaylightSavingOffset" );
    
    public static final ObjectProperty DECOMPOSES = m_model.createObjectProperty( NS + "Decomposes" );
    
    public static final ObjectProperty DEFINED_UNIT = m_model.createObjectProperty( NS + "DefinedUnit" );
    
    public static final ObjectProperty DEFINED_VALUES = m_model.createObjectProperty( NS + "DefinedValues" );
    
    public static final ObjectProperty DEFINES_TYPE = m_model.createObjectProperty( NS + "DefinesType" );
    
    public static final ObjectProperty DEFINING_UNIT = m_model.createObjectProperty( NS + "DefiningUnit" );
    
    public static final ObjectProperty DEFINING_VALUES = m_model.createObjectProperty( NS + "DefiningValues" );
    
    public static final ObjectProperty DEFINITION = m_model.createObjectProperty( NS + "Definition" );
    
    public static final ObjectProperty DEFINITION_TYPE = m_model.createObjectProperty( NS + "DefinitionType" );
    
    public static final ObjectProperty DEGREE = m_model.createObjectProperty( NS + "Degree" );
    
    public static final ObjectProperty DELTA_T_CONSTANT = m_model.createObjectProperty( NS + "DeltaT_Constant" );
    
    public static final ObjectProperty DELTA_T_Y = m_model.createObjectProperty( NS + "DeltaT_Y" );
    
    public static final ObjectProperty DELTA_T_Z = m_model.createObjectProperty( NS + "DeltaT_Z" );
    
    public static final ObjectProperty DEPENDANT_PROPERTY = m_model.createObjectProperty( NS + "DependantProperty" );
    
    public static final ObjectProperty DEPENDING_PROPERTY = m_model.createObjectProperty( NS + "DependingProperty" );
    
    public static final ObjectProperty DEPRECIATED_VALUE = m_model.createObjectProperty( NS + "DepreciatedValue" );
    
    public static final ObjectProperty DEPTH = m_model.createObjectProperty( NS + "Depth" );
    
    public static final ObjectProperty DESCRIPTION = m_model.createObjectProperty( NS + "Description" );
    
    public static final ObjectProperty DESTABILIZING_LOAD = m_model.createObjectProperty( NS + "DestabilizingLoad" );
    
    public static final ObjectProperty DIFFUSE_COLOUR = m_model.createObjectProperty( NS + "DiffuseColour" );
    
    public static final ObjectProperty DIFFUSE_REFLECTION_COLOUR = m_model.createObjectProperty( NS + "DiffuseReflectionColour" );
    
    public static final ObjectProperty DIFFUSE_TRANSMISSION_COLOUR = m_model.createObjectProperty( NS + "DiffuseTransmissionColour" );
    
    public static final ObjectProperty DIMENSIONS = m_model.createObjectProperty( NS + "Dimensions" );
    
    public static final ObjectProperty DIR = m_model.createObjectProperty( NS + "Dir" );
    
    public static final ObjectProperty DIRECTION_RATIOS = m_model.createObjectProperty( NS + "DirectionRatios" );
    
    public static final ObjectProperty DIRECTRIX = m_model.createObjectProperty( NS + "Directrix" );
    
    public static final ObjectProperty DISCRIMINATION = m_model.createObjectProperty( NS + "Discrimination" );
    
    public static final ObjectProperty DISPERSION_FACTOR = m_model.createObjectProperty( NS + "DispersionFactor" );
    
    public static final ObjectProperty DISPLACEMENT_X = m_model.createObjectProperty( NS + "DisplacementX" );
    
    public static final ObjectProperty DISPLACEMENT_Y = m_model.createObjectProperty( NS + "DisplacementY" );
    
    public static final ObjectProperty DISPLACEMENT_Z = m_model.createObjectProperty( NS + "DisplacementZ" );
    
    public static final ObjectProperty DISSOLVED_SOLIDS_CONTENT = m_model.createObjectProperty( NS + "DissolvedSolidsContent" );
    
    public static final ObjectProperty DISTANCE = m_model.createObjectProperty( NS + "Distance" );
    
    public static final ObjectProperty DISTANCE_ATTENUATION = m_model.createObjectProperty( NS + "DistanceAttenuation" );
    
    public static final ObjectProperty DISTORTION = m_model.createObjectProperty( NS + "Distortion" );
    
    public static final ObjectProperty DISTRIBUTION_DATA = m_model.createObjectProperty( NS + "DistributionData" );
    
    public static final ObjectProperty DOCUMENT_ID = m_model.createObjectProperty( NS + "DocumentId" );
    
    public static final ObjectProperty DOCUMENT_OWNER = m_model.createObjectProperty( NS + "DocumentOwner" );
    
    public static final ObjectProperty DOCUMENT_REFERENCES = m_model.createObjectProperty( NS + "DocumentReferences" );
    
    public static final ObjectProperty DOCUMENTED_BY = m_model.createObjectProperty( NS + "DocumentedBy" );
    
    public static final ObjectProperty DURATION = m_model.createObjectProperty( NS + "Duration" );
    
    public static final ObjectProperty DYNAMIC_VISCOSITY = m_model.createObjectProperty( NS + "DynamicViscosity" );
    
    public static final ObjectProperty EARLY_FINISH = m_model.createObjectProperty( NS + "EarlyFinish" );
    
    public static final ObjectProperty EARLY_START = m_model.createObjectProperty( NS + "EarlyStart" );
    
    public static final ObjectProperty ECCENTRICITY_IN_X = m_model.createObjectProperty( NS + "EccentricityInX" );
    
    public static final ObjectProperty ECCENTRICITY_IN_Y = m_model.createObjectProperty( NS + "EccentricityInY" );
    
    public static final ObjectProperty ECCENTRICITY_IN_Z = m_model.createObjectProperty( NS + "EccentricityInZ" );
    
    public static final ObjectProperty EDGE_ELEMENT = m_model.createObjectProperty( NS + "EdgeElement" );
    
    public static final ObjectProperty EDGE_END = m_model.createObjectProperty( NS + "EdgeEnd" );
    
    public static final ObjectProperty EDGE_GEOMETRY = m_model.createObjectProperty( NS + "EdgeGeometry" );
    
    public static final ObjectProperty EDGE_LIST = m_model.createObjectProperty( NS + "EdgeList" );
    
    public static final ObjectProperty EDGE_RADIUS = m_model.createObjectProperty( NS + "EdgeRadius" );
    
    public static final ObjectProperty EDGE_START = m_model.createObjectProperty( NS + "EdgeStart" );
    
    public static final ObjectProperty EDITION = m_model.createObjectProperty( NS + "Edition" );
    
    public static final ObjectProperty EDITION_DATE = m_model.createObjectProperty( NS + "EditionDate" );
    
    public static final ObjectProperty EDITORS = m_model.createObjectProperty( NS + "Editors" );
    
    public static final ObjectProperty EFFECTIVE_DEPTH = m_model.createObjectProperty( NS + "EffectiveDepth" );
    
    public static final ObjectProperty ELECTRIC_CURRENT_EXPONENT = m_model.createObjectProperty( NS + "ElectricCurrentExponent" );
    
    public static final ObjectProperty ELECTRONIC_FORMAT = m_model.createObjectProperty( NS + "ElectronicFormat" );
    
    public static final ObjectProperty ELECTRONIC_MAIL_ADDRESSES = m_model.createObjectProperty( NS + "ElectronicMailAddresses" );
    
    public static final ObjectProperty ELEMENT_TYPE = m_model.createObjectProperty( NS + "ElementType" );
    
    public static final ObjectProperty ELEMENTS = m_model.createObjectProperty( NS + "Elements" );
    
    public static final ObjectProperty ELEVATION = m_model.createObjectProperty( NS + "Elevation" );
    
    public static final ObjectProperty ELEVATION_OF_REF_HEIGHT = m_model.createObjectProperty( NS + "ElevationOfRefHeight" );
    
    public static final ObjectProperty ELEVATION_OF_TERRAIN = m_model.createObjectProperty( NS + "ElevationOfTerrain" );
    
    public static final ObjectProperty ELEVATION_WITH_FLOORING = m_model.createObjectProperty( NS + "ElevationWithFlooring" );
    
    public static final ObjectProperty ENCLOSURE = m_model.createObjectProperty( NS + "Enclosure" );
    
    public static final ObjectProperty END_PARAM = m_model.createObjectProperty( NS + "EndParam" );
    
    public static final ObjectProperty END_PROFILE = m_model.createObjectProperty( NS + "EndProfile" );
    
    public static final ObjectProperty END_TIME = m_model.createObjectProperty( NS + "EndTime" );
    
    public static final ObjectProperty ENGAGED_IN = m_model.createObjectProperty( NS + "EngagedIn" );
    
    public static final ObjectProperty ENGAGES = m_model.createObjectProperty( NS + "Engages" );
    
    public static final ObjectProperty ENUMERATION_REFERENCE = m_model.createObjectProperty( NS + "EnumerationReference" );
    
    public static final ObjectProperty ENUMERATION_VALUES = m_model.createObjectProperty( NS + "EnumerationValues" );
    
    public static final ObjectProperty EXCHANGE_RATE = m_model.createObjectProperty( NS + "ExchangeRate" );
    
    public static final ObjectProperty EXPONENT = m_model.createObjectProperty( NS + "Exponent" );
    
    public static final ObjectProperty EXPRESSION = m_model.createObjectProperty( NS + "Expression" );
    
    public static final ObjectProperty EXTENDED_PROPERTIES = m_model.createObjectProperty( NS + "ExtendedProperties" );
    
    public static final ObjectProperty EXTENT = m_model.createObjectProperty( NS + "Extent" );
    
    public static final ObjectProperty EXTRUDED_DIRECTION = m_model.createObjectProperty( NS + "ExtrudedDirection" );
    
    public static final ObjectProperty FACE_SURFACE = m_model.createObjectProperty( NS + "FaceSurface" );
    
    public static final ObjectProperty FACSIMILE_NUMBERS = m_model.createObjectProperty( NS + "FacsimileNumbers" );
    
    public static final ObjectProperty FAMILY_NAME = m_model.createObjectProperty( NS + "FamilyName" );
    
    public static final ObjectProperty FBSM_FACES = m_model.createObjectProperty( NS + "FbsmFaces" );
    
    public static final ObjectProperty FEATURE_LENGTH = m_model.createObjectProperty( NS + "FeatureLength" );
    
    public static final ObjectProperty FILE_EXTENSION = m_model.createObjectProperty( NS + "FileExtension" );
    
    public static final ObjectProperty FILL_STYLE_TARGET = m_model.createObjectProperty( NS + "FillStyleTarget" );
    
    public static final ObjectProperty FILL_STYLES = m_model.createObjectProperty( NS + "FillStyles" );
    
    public static final ObjectProperty FILLET_RADIUS = m_model.createObjectProperty( NS + "FilletRadius" );
    
    public static final ObjectProperty FILLS_VOIDS = m_model.createObjectProperty( NS + "FillsVoids" );
    
    public static final ObjectProperty FINISH_FLOAT = m_model.createObjectProperty( NS + "FinishFloat" );
    
    public static final ObjectProperty FINISH_TIME = m_model.createObjectProperty( NS + "FinishTime" );
    
    public static final ObjectProperty FIRST_MULLION_OFFSET = m_model.createObjectProperty( NS + "FirstMullionOffset" );
    
    public static final ObjectProperty FIRST_OPERAND = m_model.createObjectProperty( NS + "FirstOperand" );
    
    public static final ObjectProperty FIRST_TRANSOM_OFFSET = m_model.createObjectProperty( NS + "FirstTransomOffset" );
    
    public static final ObjectProperty FIXED_UNTIL_DATE = m_model.createObjectProperty( NS + "FixedUntilDate" );
    
    public static final ObjectProperty FLANGE_EDGE_RADIUS = m_model.createObjectProperty( NS + "FlangeEdgeRadius" );
    
    public static final ObjectProperty FLANGE_SLOPE = m_model.createObjectProperty( NS + "FlangeSlope" );
    
    public static final ObjectProperty FLANGE_THICKNESS = m_model.createObjectProperty( NS + "FlangeThickness" );
    
    public static final ObjectProperty FLANGE_WIDTH = m_model.createObjectProperty( NS + "FlangeWidth" );
    
    public static final ObjectProperty FLOW_CONDITION_SINGLE_VALUE = m_model.createObjectProperty( NS + "FlowConditionSingleValue" );
    
    public static final ObjectProperty FLOW_CONDITION_TIME_SERIES = m_model.createObjectProperty( NS + "FlowConditionTimeSeries" );
    
    public static final ObjectProperty FLOWRATE_SINGLE_VALUE = m_model.createObjectProperty( NS + "FlowrateSingleValue" );
    
    public static final ObjectProperty FLOWRATE_TIME_SERIES = m_model.createObjectProperty( NS + "FlowrateTimeSeries" );
    
    public static final ObjectProperty FLUID = m_model.createObjectProperty( NS + "Fluid" );
    
    public static final ObjectProperty FONT_FAMILY = m_model.createObjectProperty( NS + "FontFamily" );
    
    public static final ObjectProperty FONT_SIZE = m_model.createObjectProperty( NS + "FontSize" );
    
    public static final ObjectProperty FONT_STYLE = m_model.createObjectProperty( NS + "FontStyle" );
    
    public static final ObjectProperty FONT_VARIANT = m_model.createObjectProperty( NS + "FontVariant" );
    
    public static final ObjectProperty FONT_WEIGHT = m_model.createObjectProperty( NS + "FontWeight" );
    
    public static final ObjectProperty FOR_LAYER_SET = m_model.createObjectProperty( NS + "ForLayerSet" );
    
    public static final ObjectProperty FORCE_X = m_model.createObjectProperty( NS + "ForceX" );
    
    public static final ObjectProperty FORCE_Y = m_model.createObjectProperty( NS + "ForceY" );
    
    public static final ObjectProperty FORCE_Z = m_model.createObjectProperty( NS + "ForceZ" );
    
    public static final ObjectProperty FRAME_DEPTH = m_model.createObjectProperty( NS + "FrameDepth" );
    
    public static final ObjectProperty FRAME_THICKNESS = m_model.createObjectProperty( NS + "FrameThickness" );
    
    public static final ObjectProperty FREE_FLOAT = m_model.createObjectProperty( NS + "FreeFloat" );
    
    public static final ObjectProperty FREEZING_POINT = m_model.createObjectProperty( NS + "FreezingPoint" );
    
    public static final ObjectProperty FREQUENCY = m_model.createObjectProperty( NS + "Frequency" );
    
    public static final ObjectProperty FRICTION_COEFFICIENT = m_model.createObjectProperty( NS + "FrictionCoefficient" );
    
    public static final ObjectProperty FULL_LOAD_CURRENT = m_model.createObjectProperty( NS + "FullLoadCurrent" );
    
    public static final ObjectProperty GIRTH = m_model.createObjectProperty( NS + "Girth" );
    
    public static final ObjectProperty GIVEN_NAME = m_model.createObjectProperty( NS + "GivenName" );
    
    public static final ObjectProperty GLOBAL_ID = m_model.createObjectProperty( NS + "GlobalId" );
    
    public static final ObjectProperty GREEN = m_model.createObjectProperty( NS + "Green" );
    
    public static final ObjectProperty HARDENING_MODULE = m_model.createObjectProperty( NS + "HardeningModule" );
    
    public static final ObjectProperty HARDNESS = m_model.createObjectProperty( NS + "Hardness" );
    
    public static final ObjectProperty HAS_ASSIGNMENTS = m_model.createObjectProperty( NS + "HasAssignments" );
    
    public static final ObjectProperty HAS_ASSOCIATIONS = m_model.createObjectProperty( NS + "HasAssociations" );
    
    public static final ObjectProperty HAS_CONTROL_ELEMENTS = m_model.createObjectProperty( NS + "HasControlElements" );
    
    public static final ObjectProperty HAS_COVERINGS = m_model.createObjectProperty( NS + "HasCoverings" );
    
    public static final ObjectProperty HAS_FILLINGS = m_model.createObjectProperty( NS + "HasFillings" );
    
    public static final ObjectProperty HAS_INTERACTION_REQS_FROM = m_model.createObjectProperty( NS + "HasInteractionReqsFrom" );
    
    public static final ObjectProperty HAS_INTERACTION_REQS_TO = m_model.createObjectProperty( NS + "HasInteractionReqsTo" );
    
    public static final ObjectProperty HAS_INTERSECTIONS = m_model.createObjectProperty( NS + "HasIntersections" );
    
    public static final ObjectProperty HAS_OPENINGS = m_model.createObjectProperty( NS + "HasOpenings" );
    
    public static final ObjectProperty HAS_PORTS = m_model.createObjectProperty( NS + "HasPorts" );
    
    public static final ObjectProperty HAS_PROJECTIONS = m_model.createObjectProperty( NS + "HasProjections" );
    
    public static final ObjectProperty HAS_PROPERTIES = m_model.createObjectProperty( NS + "HasProperties" );
    
    public static final ObjectProperty HAS_PROPERTY_SETS = m_model.createObjectProperty( NS + "HasPropertySets" );
    
    public static final ObjectProperty HAS_QUANTITIES = m_model.createObjectProperty( NS + "HasQuantities" );
    
    public static final ObjectProperty HAS_REPRESENTATION = m_model.createObjectProperty( NS + "HasRepresentation" );
    
    public static final ObjectProperty HAS_RESULTS = m_model.createObjectProperty( NS + "HasResults" );
    
    public static final ObjectProperty HAS_SHAPE_ASPECTS = m_model.createObjectProperty( NS + "HasShapeAspects" );
    
    public static final ObjectProperty HAS_STRUCTURAL_MEMBER = m_model.createObjectProperty( NS + "HasStructuralMember" );
    
    public static final ObjectProperty HAS_SUB_CONTEXTS = m_model.createObjectProperty( NS + "HasSubContexts" );
    
    public static final ObjectProperty HATCH_LINE_ANGLE = m_model.createObjectProperty( NS + "HatchLineAngle" );
    
    public static final ObjectProperty HATCH_LINE_APPEARANCE = m_model.createObjectProperty( NS + "HatchLineAppearance" );
    
    public static final ObjectProperty HEAD_DEPTH2 = m_model.createObjectProperty( NS + "HeadDepth2" );
    
    public static final ObjectProperty HEAD_DEPTH3 = m_model.createObjectProperty( NS + "HeadDepth3" );
    
    public static final ObjectProperty HEAD_WIDTH = m_model.createObjectProperty( NS + "HeadWidth" );
    
    public static final ObjectProperty HEIGHT = m_model.createObjectProperty( NS + "Height" );
    
    public static final ObjectProperty HIGHER_HEATING_VALUE = m_model.createObjectProperty( NS + "HigherHeatingValue" );
    
    public static final ObjectProperty HOUR_COMPONENT = m_model.createObjectProperty( NS + "HourComponent" );
    
    public static final ObjectProperty HOUR_OFFSET = m_model.createObjectProperty( NS + "HourOffset" );
    
    public static final ObjectProperty ID = m_model.createObjectProperty( NS + "ID" );
    
    public static final ObjectProperty ID_PROP = m_model.createObjectProperty( NS + "Id" );
    
    public static final ObjectProperty IDENTIFIER = m_model.createObjectProperty( NS + "Identifier" );
    
    public static final ObjectProperty IFC_ACTOR_SELECT = m_model.createObjectProperty( NS + "IfcActorSelect" );
    
    public static final ObjectProperty IFC_APPLIED_VALUE_SELECT = m_model.createObjectProperty( NS + "IfcAppliedValueSelect" );
    
    public static final ObjectProperty IFC_AXIS2PLACEMENT = m_model.createObjectProperty( NS + "IfcAxis2Placement" );
    
    public static final ObjectProperty IFC_BOOLEAN_OPERAND = m_model.createObjectProperty( NS + "IfcBooleanOperand" );
    
    public static final ObjectProperty IFC_CHARACTER_STYLE_SELECT = m_model.createObjectProperty( NS + "IfcCharacterStyleSelect" );
    
    public static final ObjectProperty IFC_CLASSIFICATION_NOTATION_SELECT = m_model.createObjectProperty( NS + "IfcClassificationNotationSelect" );
    
    public static final ObjectProperty IFC_COLOUR = m_model.createObjectProperty( NS + "IfcColour" );
    
    public static final ObjectProperty IFC_COLOUR_OR_FACTOR = m_model.createObjectProperty( NS + "IfcColourOrFactor" );
    
    public static final ObjectProperty IFC_CONDITION_CRITERION_SELECT = m_model.createObjectProperty( NS + "IfcConditionCriterionSelect" );
    
    public static final ObjectProperty IFC_CSG_SELECT = m_model.createObjectProperty( NS + "IfcCsgSelect" );
    
    public static final ObjectProperty IFC_CURVE_FONT_OR_SCALED_CURVE_FONT_SELECT = m_model.createObjectProperty( NS + "IfcCurveFontOrScaledCurveFontSelect" );
    
    public static final ObjectProperty IFC_CURVE_OR_EDGE_CURVE = m_model.createObjectProperty( NS + "IfcCurveOrEdgeCurve" );
    
    public static final ObjectProperty IFC_CURVE_STYLE_FONT_SELECT = m_model.createObjectProperty( NS + "IfcCurveStyleFontSelect" );
    
    public static final ObjectProperty IFC_DATE_TIME_SELECT = m_model.createObjectProperty( NS + "IfcDateTimeSelect" );
    
    public static final ObjectProperty IFC_DEFINED_SYMBOL_SELECT = m_model.createObjectProperty( NS + "IfcDefinedSymbolSelect" );
    
    public static final ObjectProperty IFC_DERIVED_MEASURE_VALUE = m_model.createObjectProperty( NS + "IfcDerivedMeasureValue" );
    
    public static final ObjectProperty IFC_DOCUMENT_SELECT = m_model.createObjectProperty( NS + "IfcDocumentSelect" );
    
    public static final ObjectProperty IFC_DRAUGHTING_CALLOUT_ELEMENT = m_model.createObjectProperty( NS + "IfcDraughtingCalloutElement" );
    
    public static final ObjectProperty IFC_FILL_AREA_STYLE_TILE_SHAPE_SELECT = m_model.createObjectProperty( NS + "IfcFillAreaStyleTileShapeSelect" );
    
    public static final ObjectProperty IFC_FILL_STYLE_SELECT = m_model.createObjectProperty( NS + "IfcFillStyleSelect" );
    
    public static final ObjectProperty IFC_GEOMETRIC_SET_SELECT = m_model.createObjectProperty( NS + "IfcGeometricSetSelect" );
    
    public static final ObjectProperty IFC_HATCH_LINE_DISTANCE_SELECT = m_model.createObjectProperty( NS + "IfcHatchLineDistanceSelect" );
    
    public static final ObjectProperty IFC_LAYERED_ITEM = m_model.createObjectProperty( NS + "IfcLayeredItem" );
    
    public static final ObjectProperty IFC_LIBRARY_SELECT = m_model.createObjectProperty( NS + "IfcLibrarySelect" );
    
    public static final ObjectProperty IFC_LIGHT_DISTRIBUTION_DATA_SOURCE_SELECT = m_model.createObjectProperty( NS + "IfcLightDistributionDataSourceSelect" );
    
    public static final ObjectProperty IFC_MATERIAL_SELECT = m_model.createObjectProperty( NS + "IfcMaterialSelect" );
    
    public static final ObjectProperty IFC_MEASURE_VALUE = m_model.createObjectProperty( NS + "IfcMeasureValue" );
    
    public static final ObjectProperty IFC_METRIC_VALUE_SELECT = m_model.createObjectProperty( NS + "IfcMetricValueSelect" );
    
    public static final ObjectProperty IFC_OBJECT_REFERENCE_SELECT = m_model.createObjectProperty( NS + "IfcObjectReferenceSelect" );
    
    public static final ObjectProperty IFC_ORIENTATION_SELECT = m_model.createObjectProperty( NS + "IfcOrientationSelect" );
    
    public static final ObjectProperty IFC_POINT_OR_VERTEX_POINT = m_model.createObjectProperty( NS + "IfcPointOrVertexPoint" );
    
    public static final ObjectProperty IFC_PRESENTATION_STYLE_SELECT = m_model.createObjectProperty( NS + "IfcPresentationStyleSelect" );
    
    public static final ObjectProperty IFC_SHELL = m_model.createObjectProperty( NS + "IfcShell" );
    
    public static final ObjectProperty IFC_SIMPLE_VALUE = m_model.createObjectProperty( NS + "IfcSimpleValue" );
    
    public static final ObjectProperty IFC_SIZE_SELECT = m_model.createObjectProperty( NS + "IfcSizeSelect" );
    
    public static final ObjectProperty IFC_SPECULAR_HIGHLIGHT_SELECT = m_model.createObjectProperty( NS + "IfcSpecularHighlightSelect" );
    
    public static final ObjectProperty IFC_STRUCTURAL_ACTIVITY_ASSIGNMENT_SELECT = m_model.createObjectProperty( NS + "IfcStructuralActivityAssignmentSelect" );
    
    public static final ObjectProperty IFC_SURFACE_OR_FACE_SURFACE = m_model.createObjectProperty( NS + "IfcSurfaceOrFaceSurface" );
    
    public static final ObjectProperty IFC_SURFACE_STYLE_ELEMENT_SELECT = m_model.createObjectProperty( NS + "IfcSurfaceStyleElementSelect" );
    
    public static final ObjectProperty IFC_SYMBOL_STYLE_SELECT = m_model.createObjectProperty( NS + "IfcSymbolStyleSelect" );
    
    public static final ObjectProperty IFC_TEXT_FONT_SELECT = m_model.createObjectProperty( NS + "IfcTextFontSelect" );
    
    public static final ObjectProperty IFC_TEXT_STYLE_SELECT = m_model.createObjectProperty( NS + "IfcTextStyleSelect" );
    
    public static final ObjectProperty IFC_TRIMMING_SELECT = m_model.createObjectProperty( NS + "IfcTrimmingSelect" );
    
    public static final ObjectProperty IFC_UNIT = m_model.createObjectProperty( NS + "IfcUnit" );
    
    public static final ObjectProperty IFC_VALUE = m_model.createObjectProperty( NS + "IfcValue" );
    
    public static final ObjectProperty IFC_VECTOR_OR_DIRECTION = m_model.createObjectProperty( NS + "IfcVectorOrDirection" );
    
    public static final ObjectProperty IMPACT_TYPE = m_model.createObjectProperty( NS + "ImpactType" );
    
    public static final ObjectProperty IMPORTANCE_RATING = m_model.createObjectProperty( NS + "ImportanceRating" );
    
    public static final ObjectProperty IMPURITIES_CONTENT = m_model.createObjectProperty( NS + "ImpuritiesContent" );
    
    public static final ObjectProperty INCORPORATION_DATE = m_model.createObjectProperty( NS + "IncorporationDate" );
    
    public static final ObjectProperty INITIAL_STRESS = m_model.createObjectProperty( NS + "InitialStress" );
    
    public static final ObjectProperty INNER_BOUNDARIES = m_model.createObjectProperty( NS + "InnerBoundaries" );
    
    public static final ObjectProperty INNER_CURVES = m_model.createObjectProperty( NS + "InnerCurves" );
    
    public static final ObjectProperty INNER_FILLET_RADIUS = m_model.createObjectProperty( NS + "InnerFilletRadius" );
    
    public static final ObjectProperty INNER_RADIUS = m_model.createObjectProperty( NS + "InnerRadius" );
    
    public static final ObjectProperty INPUT_FREQUENCY = m_model.createObjectProperty( NS + "InputFrequency" );
    
    public static final ObjectProperty INPUT_PHASE = m_model.createObjectProperty( NS + "InputPhase" );
    
    public static final ObjectProperty INPUT_VOLTAGE = m_model.createObjectProperty( NS + "InputVoltage" );
    
    public static final ObjectProperty INTENDED_USE = m_model.createObjectProperty( NS + "IntendedUse" );
    
    public static final ObjectProperty INTENSITY = m_model.createObjectProperty( NS + "Intensity" );
    
    public static final ObjectProperty INTENT = m_model.createObjectProperty( NS + "Intent" );
    
    public static final ObjectProperty INTERNAL_FILLET_RADIUS = m_model.createObjectProperty( NS + "InternalFilletRadius" );
    
    public static final ObjectProperty INTERNAL_LOCATION = m_model.createObjectProperty( NS + "InternalLocation" );
    
    public static final ObjectProperty INTERSECTING_AXES = m_model.createObjectProperty( NS + "IntersectingAxes" );
    
    public static final ObjectProperty INVISIBLE_SEGMENT_LENGTH = m_model.createObjectProperty( NS + "InvisibleSegmentLength" );
    
    public static final ObjectProperty IS_ACTING_UPON = m_model.createObjectProperty( NS + "IsActingUpon" );
    
    public static final ObjectProperty IS_AGGREGATED_IN = m_model.createObjectProperty( NS + "IsAggregatedIn" );
    
    public static final ObjectProperty IS_ATTENUATING = m_model.createObjectProperty( NS + "IsAttenuating" );
    
    public static final ObjectProperty IS_CLASSIFIED_ITEM_IN = m_model.createObjectProperty( NS + "IsClassifiedItemIn" );
    
    public static final ObjectProperty IS_CLASSIFYING_ITEM_IN = m_model.createObjectProperty( NS + "IsClassifyingItemIn" );
    
    public static final ObjectProperty IS_COMPONENT_IN = m_model.createObjectProperty( NS + "IsComponentIn" );
    
    public static final ObjectProperty IS_CONNECTION_REALIZATION = m_model.createObjectProperty( NS + "IsConnectionRealization" );
    
    public static final ObjectProperty IS_CRITICAL = m_model.createObjectProperty( NS + "IsCritical" );
    
    public static final ObjectProperty IS_DECOMPOSED_BY = m_model.createObjectProperty( NS + "IsDecomposedBy" );
    
    public static final ObjectProperty IS_DEFINED_BY = m_model.createObjectProperty( NS + "IsDefinedBy" );
    
    public static final ObjectProperty IS_GROUPED_BY = m_model.createObjectProperty( NS + "IsGroupedBy" );
    
    public static final ObjectProperty IS_HEADING = m_model.createObjectProperty( NS + "IsHeading" );
    
    public static final ObjectProperty IS_LINEAR = m_model.createObjectProperty( NS + "IsLinear" );
    
    public static final ObjectProperty IS_MILESTONE = m_model.createObjectProperty( NS + "IsMilestone" );
    
    public static final ObjectProperty IS_POINTED_TO = m_model.createObjectProperty( NS + "IsPointedTo" );
    
    public static final ObjectProperty IS_POINTER = m_model.createObjectProperty( NS + "IsPointer" );
    
    public static final ObjectProperty IS_POTABLE = m_model.createObjectProperty( NS + "IsPotable" );
    
    public static final ObjectProperty IS_PREDECESSOR_TO = m_model.createObjectProperty( NS + "IsPredecessorTo" );
    
    public static final ObjectProperty IS_RELATED_BY = m_model.createObjectProperty( NS + "IsRelatedBy" );
    
    public static final ObjectProperty IS_RELATED_FROM_CALLOUT = m_model.createObjectProperty( NS + "IsRelatedFromCallout" );
    
    public static final ObjectProperty IS_RELATED_TO_CALLOUT = m_model.createObjectProperty( NS + "IsRelatedToCallout" );
    
    public static final ObjectProperty IS_RELATED_WITH = m_model.createObjectProperty( NS + "IsRelatedWith" );
    
    public static final ObjectProperty IS_SUCCESSOR_FROM = m_model.createObjectProperty( NS + "IsSuccessorFrom" );
    
    public static final ObjectProperty IS_VENTILATED = m_model.createObjectProperty( NS + "IsVentilated" );
    
    public static final ObjectProperty ISOTHERMAL_MOISTURE_CAPACITY = m_model.createObjectProperty( NS + "IsothermalMoistureCapacity" );
    
    public static final ObjectProperty ITEM = m_model.createObjectProperty( NS + "Item" );
    
    public static final ObjectProperty ITEM_OF = m_model.createObjectProperty( NS + "ItemOf" );
    
    public static final ObjectProperty ITEM_REFERENCE = m_model.createObjectProperty( NS + "ItemReference" );
    
    public static final ObjectProperty ITEMS = m_model.createObjectProperty( NS + "Items" );
    
    public static final ObjectProperty JOB_DESCRIPTION = m_model.createObjectProperty( NS + "JobDescription" );
    
    public static final ObjectProperty JURISDICTION = m_model.createObjectProperty( NS + "Jurisdiction" );
    
    public static final ObjectProperty LABEL = m_model.createObjectProperty( NS + "Label" );
    
    public static final ObjectProperty LAND_TITLE_NUMBER = m_model.createObjectProperty( NS + "LandTitleNumber" );
    
    public static final ObjectProperty LAST_MODIFIED_DATE = m_model.createObjectProperty( NS + "LastModifiedDate" );
    
    public static final ObjectProperty LAST_MODIFYING_APPLICATION = m_model.createObjectProperty( NS + "LastModifyingApplication" );
    
    public static final ObjectProperty LAST_MODIFYING_USER = m_model.createObjectProperty( NS + "LastModifyingUser" );
    
    public static final ObjectProperty LAST_REVISION_TIME = m_model.createObjectProperty( NS + "LastRevisionTime" );
    
    public static final ObjectProperty LAST_UPDATE_DATE = m_model.createObjectProperty( NS + "LastUpdateDate" );
    
    public static final ObjectProperty LATE_FINISH = m_model.createObjectProperty( NS + "LateFinish" );
    
    public static final ObjectProperty LATE_START = m_model.createObjectProperty( NS + "LateStart" );
    
    public static final ObjectProperty LAYER_ASSIGNMENTS = m_model.createObjectProperty( NS + "LayerAssignments" );
    
    public static final ObjectProperty LAYER_BLOCKED = m_model.createObjectProperty( NS + "LayerBlocked" );
    
    public static final ObjectProperty LAYER_FROZEN = m_model.createObjectProperty( NS + "LayerFrozen" );
    
    public static final ObjectProperty LAYER_ON = m_model.createObjectProperty( NS + "LayerOn" );
    
    public static final ObjectProperty LAYER_SET_NAME = m_model.createObjectProperty( NS + "LayerSetName" );
    
    public static final ObjectProperty LAYER_STYLES = m_model.createObjectProperty( NS + "LayerStyles" );
    
    public static final ObjectProperty LAYER_THICKNESS = m_model.createObjectProperty( NS + "LayerThickness" );
    
    public static final ObjectProperty LEG_SLOPE = m_model.createObjectProperty( NS + "LegSlope" );
    
    public static final ObjectProperty LENGTH_EXPONENT = m_model.createObjectProperty( NS + "LengthExponent" );
    
    public static final ObjectProperty LENGTH_VALUE = m_model.createObjectProperty( NS + "LengthValue" );
    
    public static final ObjectProperty LETTER_SPACING = m_model.createObjectProperty( NS + "LetterSpacing" );
    
    public static final ObjectProperty LIBRARY_REFERENCE = m_model.createObjectProperty( NS + "LibraryReference" );
    
    public static final ObjectProperty LIFE_CYCLE_PHASE = m_model.createObjectProperty( NS + "LifeCyclePhase" );
    
    public static final ObjectProperty LIGHT_COLOUR = m_model.createObjectProperty( NS + "LightColour" );
    
    public static final ObjectProperty LIGHT_DISTRIBUTION_DATA_SOURCE = m_model.createObjectProperty( NS + "LightDistributionDataSource" );
    
    public static final ObjectProperty LINE_HEIGHT = m_model.createObjectProperty( NS + "LineHeight" );
    
    public static final ObjectProperty LINEAR_FORCE_X = m_model.createObjectProperty( NS + "LinearForceX" );
    
    public static final ObjectProperty LINEAR_FORCE_Y = m_model.createObjectProperty( NS + "LinearForceY" );
    
    public static final ObjectProperty LINEAR_FORCE_Z = m_model.createObjectProperty( NS + "LinearForceZ" );
    
    public static final ObjectProperty LINEAR_MOMENT_X = m_model.createObjectProperty( NS + "LinearMomentX" );
    
    public static final ObjectProperty LINEAR_MOMENT_Y = m_model.createObjectProperty( NS + "LinearMomentY" );
    
    public static final ObjectProperty LINEAR_MOMENT_Z = m_model.createObjectProperty( NS + "LinearMomentZ" );
    
    public static final ObjectProperty LINEAR_STIFFNESS_BY_AREA_X = m_model.createObjectProperty( NS + "LinearStiffnessByAreaX" );
    
    public static final ObjectProperty LINEAR_STIFFNESS_BY_AREA_Y = m_model.createObjectProperty( NS + "LinearStiffnessByAreaY" );
    
    public static final ObjectProperty LINEAR_STIFFNESS_BY_AREA_Z = m_model.createObjectProperty( NS + "LinearStiffnessByAreaZ" );
    
    public static final ObjectProperty LINEAR_STIFFNESS_BY_LENGTH_X = m_model.createObjectProperty( NS + "LinearStiffnessByLengthX" );
    
    public static final ObjectProperty LINEAR_STIFFNESS_BY_LENGTH_Y = m_model.createObjectProperty( NS + "LinearStiffnessByLengthY" );
    
    public static final ObjectProperty LINEAR_STIFFNESS_BY_LENGTH_Z = m_model.createObjectProperty( NS + "LinearStiffnessByLengthZ" );
    
    public static final ObjectProperty LINEAR_STIFFNESS_X = m_model.createObjectProperty( NS + "LinearStiffnessX" );
    
    public static final ObjectProperty LINEAR_STIFFNESS_Y = m_model.createObjectProperty( NS + "LinearStiffnessY" );
    
    public static final ObjectProperty LINEAR_STIFFNESS_Z = m_model.createObjectProperty( NS + "LinearStiffnessZ" );
    
    public static final ObjectProperty LINING_DEPTH = m_model.createObjectProperty( NS + "LiningDepth" );
    
    public static final ObjectProperty LINING_OFFSET = m_model.createObjectProperty( NS + "LiningOffset" );
    
    public static final ObjectProperty LINING_THICKNESS = m_model.createObjectProperty( NS + "LiningThickness" );
    
    public static final ObjectProperty LIST_VALUES = m_model.createObjectProperty( NS + "ListValues" );
    
    public static final ObjectProperty LITERAL = m_model.createObjectProperty( NS + "Literal" );
    
    public static final ObjectProperty LOAD_GROUP_FOR = m_model.createObjectProperty( NS + "LoadGroupFor" );
    
    public static final ObjectProperty LOADED_BY = m_model.createObjectProperty( NS + "LoadedBy" );
    
    public static final ObjectProperty LOCAL_ORIGIN = m_model.createObjectProperty( NS + "LocalOrigin" );
    
    public static final ObjectProperty LOCATION = m_model.createObjectProperty( NS + "Location" );
    
    public static final ObjectProperty LOCATION_AT_RELATED_ELEMENT = m_model.createObjectProperty( NS + "LocationAtRelatedElement" );
    
    public static final ObjectProperty LOCATION_AT_RELATING_ELEMENT = m_model.createObjectProperty( NS + "LocationAtRelatingElement" );
    
    public static final ObjectProperty LOCATION_OF_INTERACTION = m_model.createObjectProperty( NS + "LocationOfInteraction" );
    
    public static final ObjectProperty LONG_NAME = m_model.createObjectProperty( NS + "LongName" );
    
    public static final ObjectProperty LONGITUDINAL_BAR_CROSS_SECTION_AREA = m_model.createObjectProperty( NS + "LongitudinalBarCrossSectionArea" );
    
    public static final ObjectProperty LONGITUDINAL_BAR_NOMINAL_DIAMETER = m_model.createObjectProperty( NS + "LongitudinalBarNominalDiameter" );
    
    public static final ObjectProperty LONGITUDINAL_BAR_SPACING = m_model.createObjectProperty( NS + "LongitudinalBarSpacing" );
    
    public static final ObjectProperty LONGITUDINAL_END_POSITION = m_model.createObjectProperty( NS + "LongitudinalEndPosition" );
    
    public static final ObjectProperty LONGITUDINAL_START_POSITION = m_model.createObjectProperty( NS + "LongitudinalStartPosition" );
    
    public static final ObjectProperty LOOP_VERTEX = m_model.createObjectProperty( NS + "LoopVertex" );
    
    public static final ObjectProperty LOWER_BOUND_VALUE = m_model.createObjectProperty( NS + "LowerBoundValue" );
    
    public static final ObjectProperty LOWER_HEATING_VALUE = m_model.createObjectProperty( NS + "LowerHeatingValue" );
    
    public static final ObjectProperty LOWER_VALUE = m_model.createObjectProperty( NS + "LowerValue" );
    
    public static final ObjectProperty LOWER_VAPOR_RESISTANCE_FACTOR = m_model.createObjectProperty( NS + "LowerVaporResistanceFactor" );
    
    public static final ObjectProperty LUMINOUS_FLUX = m_model.createObjectProperty( NS + "LuminousFlux" );
    
    public static final ObjectProperty LUMINOUS_INTENSITY = m_model.createObjectProperty( NS + "LuminousIntensity" );
    
    public static final ObjectProperty LUMINOUS_INTENSITY_EXPONENT = m_model.createObjectProperty( NS + "LuminousIntensityExponent" );
    
    public static final ObjectProperty MAGNITUDE = m_model.createObjectProperty( NS + "Magnitude" );
    
    public static final ObjectProperty MAIN_PLANE_ANGLE = m_model.createObjectProperty( NS + "MainPlaneAngle" );
    
    public static final ObjectProperty MAP_USAGE = m_model.createObjectProperty( NS + "MapUsage" );
    
    public static final ObjectProperty MAPPED_REPRESENTATION = m_model.createObjectProperty( NS + "MappedRepresentation" );
    
    public static final ObjectProperty MAPPING_ORIGIN = m_model.createObjectProperty( NS + "MappingOrigin" );
    
    public static final ObjectProperty MAPPING_SOURCE = m_model.createObjectProperty( NS + "MappingSource" );
    
    public static final ObjectProperty MAPPING_TARGET = m_model.createObjectProperty( NS + "MappingTarget" );
    
    public static final ObjectProperty MASS_DENSITY = m_model.createObjectProperty( NS + "MassDensity" );
    
    public static final ObjectProperty MASS_EXPONENT = m_model.createObjectProperty( NS + "MassExponent" );
    
    public static final ObjectProperty MATERIAL = m_model.createObjectProperty( NS + "Material" );
    
    public static final ObjectProperty MATERIAL_CLASSIFICATIONS = m_model.createObjectProperty( NS + "MaterialClassifications" );
    
    public static final ObjectProperty MATERIAL_LAYERS = m_model.createObjectProperty( NS + "MaterialLayers" );
    
    public static final ObjectProperty MATERIALS = m_model.createObjectProperty( NS + "Materials" );
    
    public static final ObjectProperty MAX_AGGREGATE_SIZE = m_model.createObjectProperty( NS + "MaxAggregateSize" );
    
    public static final ObjectProperty MAX_REQUIRED_AREA = m_model.createObjectProperty( NS + "MaxRequiredArea" );
    
    public static final ObjectProperty MAXIMUM_PLATE_THICKNESS = m_model.createObjectProperty( NS + "MaximumPlateThickness" );
    
    public static final ObjectProperty MAXIMUM_POWER_INPUT = m_model.createObjectProperty( NS + "MaximumPowerInput" );
    
    public static final ObjectProperty MAXIMUM_SECTION_MODULUS_Y = m_model.createObjectProperty( NS + "MaximumSectionModulusY" );
    
    public static final ObjectProperty MAXIMUM_SECTION_MODULUS_Z = m_model.createObjectProperty( NS + "MaximumSectionModulusZ" );
    
    public static final ObjectProperty MAXIMUM_VALUE = m_model.createObjectProperty( NS + "MaximumValue" );
    
    public static final ObjectProperty MESH_LENGTH = m_model.createObjectProperty( NS + "MeshLength" );
    
    public static final ObjectProperty MESH_WIDTH = m_model.createObjectProperty( NS + "MeshWidth" );
    
    public static final ObjectProperty METHOD_OF_MEASUREMENT = m_model.createObjectProperty( NS + "MethodOfMeasurement" );
    
    public static final ObjectProperty MIDDLE_NAMES = m_model.createObjectProperty( NS + "MiddleNames" );
    
    public static final ObjectProperty MIME_CONTENT_TYPE = m_model.createObjectProperty( NS + "MimeContentType" );
    
    public static final ObjectProperty MIME_SUBTYPE = m_model.createObjectProperty( NS + "MimeSubtype" );
    
    public static final ObjectProperty MIN_CURVATURE_RADIUS = m_model.createObjectProperty( NS + "MinCurvatureRadius" );
    
    public static final ObjectProperty MIN_REQUIRED_AREA = m_model.createObjectProperty( NS + "MinRequiredArea" );
    
    public static final ObjectProperty MINIMUM_CIRCUIT_CURRENT = m_model.createObjectProperty( NS + "MinimumCircuitCurrent" );
    
    public static final ObjectProperty MINIMUM_PLATE_THICKNESS = m_model.createObjectProperty( NS + "MinimumPlateThickness" );
    
    public static final ObjectProperty MINIMUM_SECTION_MODULUS_Y = m_model.createObjectProperty( NS + "MinimumSectionModulusY" );
    
    public static final ObjectProperty MINIMUM_SECTION_MODULUS_Z = m_model.createObjectProperty( NS + "MinimumSectionModulusZ" );
    
    public static final ObjectProperty MINIMUM_VALUE = m_model.createObjectProperty( NS + "MinimumValue" );
    
    public static final ObjectProperty MINUTE_COMPONENT = m_model.createObjectProperty( NS + "MinuteComponent" );
    
    public static final ObjectProperty MINUTE_OFFSET = m_model.createObjectProperty( NS + "MinuteOffset" );
    
    public static final ObjectProperty MODE = m_model.createObjectProperty( NS + "Mode" );
    
    public static final ObjectProperty MOISTURE_DIFFUSIVITY = m_model.createObjectProperty( NS + "MoistureDiffusivity" );
    
    public static final ObjectProperty MOLECULAR_WEIGHT = m_model.createObjectProperty( NS + "MolecularWeight" );
    
    public static final ObjectProperty MOMENT_OF_INERTIA_Y = m_model.createObjectProperty( NS + "MomentOfInertiaY" );
    
    public static final ObjectProperty MOMENT_OF_INERTIA_YZ = m_model.createObjectProperty( NS + "MomentOfInertiaYZ" );
    
    public static final ObjectProperty MOMENT_OF_INERTIA_Z = m_model.createObjectProperty( NS + "MomentOfInertiaZ" );
    
    public static final ObjectProperty MOMENT_X = m_model.createObjectProperty( NS + "MomentX" );
    
    public static final ObjectProperty MOMENT_Y = m_model.createObjectProperty( NS + "MomentY" );
    
    public static final ObjectProperty MOMENT_Z = m_model.createObjectProperty( NS + "MomentZ" );
    
    public static final ObjectProperty MONTH_COMPONENT = m_model.createObjectProperty( NS + "MonthComponent" );
    
    public static final ObjectProperty MOST_USED_VALUE = m_model.createObjectProperty( NS + "MostUsedValue" );
    
    public static final ObjectProperty MOVE_FROM = m_model.createObjectProperty( NS + "MoveFrom" );
    
    public static final ObjectProperty MOVE_TO = m_model.createObjectProperty( NS + "MoveTo" );
    
    public static final ObjectProperty MULLION_THICKNESS = m_model.createObjectProperty( NS + "MullionThickness" );
    
    public static final ObjectProperty N20CONTENT = m_model.createObjectProperty( NS + "N20Content" );
    
    public static final ObjectProperty NAME = m_model.createObjectProperty( NS + "Name" );
    
    public static final ObjectProperty NOMINAL_BAR_DIAMETER = m_model.createObjectProperty( NS + "NominalBarDiameter" );
    
    public static final ObjectProperty NOMINAL_DIAMETER = m_model.createObjectProperty( NS + "NominalDiameter" );
    
    public static final ObjectProperty NOMINAL_LENGTH = m_model.createObjectProperty( NS + "NominalLength" );
    
    public static final ObjectProperty NOMINAL_VALUE = m_model.createObjectProperty( NS + "NominalValue" );
    
    public static final ObjectProperty NOTATION = m_model.createObjectProperty( NS + "Notation" );
    
    public static final ObjectProperty NOTATION_FACETS = m_model.createObjectProperty( NS + "NotationFacets" );
    
    public static final ObjectProperty NOTATION_VALUE = m_model.createObjectProperty( NS + "NotationValue" );
    
    public static final ObjectProperty NUMBER_OF_RISER = m_model.createObjectProperty( NS + "NumberOfRiser" );
    
    public static final ObjectProperty NUMBER_OF_TREADS = m_model.createObjectProperty( NS + "NumberOfTreads" );
    
    public static final ObjectProperty OBJECT_PLACEMENT = m_model.createObjectProperty( NS + "ObjectPlacement" );
    
    public static final ObjectProperty OBJECT_TYPE = m_model.createObjectProperty( NS + "ObjectType" );
    
    public static final ObjectProperty OBJECT_TYPE_OF = m_model.createObjectProperty( NS + "ObjectTypeOf" );
    
    public static final ObjectProperty OF_ORGANIZATION = m_model.createObjectProperty( NS + "OfOrganization" );
    
    public static final ObjectProperty OF_PERSON = m_model.createObjectProperty( NS + "OfPerson" );
    
    public static final ObjectProperty OF_PRODUCT_REPRESENTATION = m_model.createObjectProperty( NS + "OfProductRepresentation" );
    
    public static final ObjectProperty OF_SHAPE_ASPECT = m_model.createObjectProperty( NS + "OfShapeAspect" );
    
    public static final ObjectProperty OF_TABLE = m_model.createObjectProperty( NS + "OfTable" );
    
    public static final ObjectProperty OFFSET_DISTANCES = m_model.createObjectProperty( NS + "OffsetDistances" );
    
    public static final ObjectProperty OFFSET_FROM_REFERENCE_LINE = m_model.createObjectProperty( NS + "OffsetFromReferenceLine" );
    
    public static final ObjectProperty OPERATES_ON = m_model.createObjectProperty( NS + "OperatesOn" );
    
    public static final ObjectProperty OPERATOR = m_model.createObjectProperty( NS + "Operator" );
    
    public static final ObjectProperty ORIENTATION = m_model.createObjectProperty( NS + "Orientation" );
    
    public static final ObjectProperty ORIENTATION_OF2DPLANE = m_model.createObjectProperty( NS + "OrientationOf2DPlane" );
    
    public static final ObjectProperty ORIGINAL_VALUE = m_model.createObjectProperty( NS + "OriginalValue" );
    
    public static final ObjectProperty OUTER = m_model.createObjectProperty( NS + "Outer" );
    
    public static final ObjectProperty OUTER_BOUNDARY = m_model.createObjectProperty( NS + "OuterBoundary" );
    
    public static final ObjectProperty OUTER_CURVE = m_model.createObjectProperty( NS + "OuterCurve" );
    
    public static final ObjectProperty OUTER_FILLET_RADIUS = m_model.createObjectProperty( NS + "OuterFilletRadius" );
    
    public static final ObjectProperty OVERALL_DEPTH = m_model.createObjectProperty( NS + "OverallDepth" );
    
    public static final ObjectProperty OVERALL_HEIGHT = m_model.createObjectProperty( NS + "OverallHeight" );
    
    public static final ObjectProperty OVERALL_WIDTH = m_model.createObjectProperty( NS + "OverallWidth" );
    
    public static final ObjectProperty OVERRIDING_PROPERTIES = m_model.createObjectProperty( NS + "OverridingProperties" );
    
    public static final ObjectProperty OWNER = m_model.createObjectProperty( NS + "Owner" );
    
    public static final ObjectProperty OWNER_HISTORY = m_model.createObjectProperty( NS + "OwnerHistory" );
    
    public static final ObjectProperty OWNING_APPLICATION = m_model.createObjectProperty( NS + "OwningApplication" );
    
    public static final ObjectProperty OWNING_USER = m_model.createObjectProperty( NS + "OwningUser" );
    
    public static final ObjectProperty PHLEVEL = m_model.createObjectProperty( NS + "PHLevel" );
    
    public static final ObjectProperty PAGER_NUMBER = m_model.createObjectProperty( NS + "PagerNumber" );
    
    public static final ObjectProperty PANEL_DEPTH = m_model.createObjectProperty( NS + "PanelDepth" );
    
    public static final ObjectProperty PANEL_WIDTH = m_model.createObjectProperty( NS + "PanelWidth" );
    
    public static final ObjectProperty PARAMETER = m_model.createObjectProperty( NS + "Parameter" );
    
    public static final ObjectProperty PARAMETER_TAKES_PRECEDENCE = m_model.createObjectProperty( NS + "ParameterTakesPrecedence" );
    
    public static final ObjectProperty PARENT_CONTEXT = m_model.createObjectProperty( NS + "ParentContext" );
    
    public static final ObjectProperty PARENT_CURVE = m_model.createObjectProperty( NS + "ParentCurve" );
    
    public static final ObjectProperty PARENT_EDGE = m_model.createObjectProperty( NS + "ParentEdge" );
    
    public static final ObjectProperty PARENT_PROFILE = m_model.createObjectProperty( NS + "ParentProfile" );
    
    public static final ObjectProperty PART_OF_COMPLEX = m_model.createObjectProperty( NS + "PartOfComplex" );
    
    public static final ObjectProperty PART_OF_PRODUCT_DEFINITION_SHAPE = m_model.createObjectProperty( NS + "PartOfProductDefinitionShape" );
    
    public static final ObjectProperty PART_OF_U = m_model.createObjectProperty( NS + "PartOfU" );
    
    public static final ObjectProperty PART_OF_V = m_model.createObjectProperty( NS + "PartOfV" );
    
    public static final ObjectProperty PART_OF_W = m_model.createObjectProperty( NS + "PartOfW" );
    
    public static final ObjectProperty PATTERN_LIST = m_model.createObjectProperty( NS + "PatternList" );
    
    public static final ObjectProperty PATTERN_START = m_model.createObjectProperty( NS + "PatternStart" );
    
    public static final ObjectProperty PERIMETER = m_model.createObjectProperty( NS + "Perimeter" );
    
    public static final ObjectProperty PERMIT_ID = m_model.createObjectProperty( NS + "PermitID" );
    
    public static final ObjectProperty PHASE = m_model.createObjectProperty( NS + "Phase" );
    
    public static final ObjectProperty PHYSICAL_WEIGHT = m_model.createObjectProperty( NS + "PhysicalWeight" );
    
    public static final ObjectProperty PIXEL = m_model.createObjectProperty( NS + "Pixel" );
    
    public static final ObjectProperty PLACEMENT = m_model.createObjectProperty( NS + "Placement" );
    
    public static final ObjectProperty PLACEMENT_LOCATION = m_model.createObjectProperty( NS + "PlacementLocation" );
    
    public static final ObjectProperty PLACEMENT_REF_DIRECTION = m_model.createObjectProperty( NS + "PlacementRefDirection" );
    
    public static final ObjectProperty PLACEMENT_REL_TO = m_model.createObjectProperty( NS + "PlacementRelTo" );
    
    public static final ObjectProperty PLACES_OBJECT = m_model.createObjectProperty( NS + "PlacesObject" );
    
    public static final ObjectProperty PLANAR_FORCE_X = m_model.createObjectProperty( NS + "PlanarForceX" );
    
    public static final ObjectProperty PLANAR_FORCE_Y = m_model.createObjectProperty( NS + "PlanarForceY" );
    
    public static final ObjectProperty PLANAR_FORCE_Z = m_model.createObjectProperty( NS + "PlanarForceZ" );
    
    public static final ObjectProperty PLASTIC_SHAPE_FACTOR_Y = m_model.createObjectProperty( NS + "PlasticShapeFactorY" );
    
    public static final ObjectProperty PLASTIC_SHAPE_FACTOR_Z = m_model.createObjectProperty( NS + "PlasticShapeFactorZ" );
    
    public static final ObjectProperty PLASTIC_STRAIN = m_model.createObjectProperty( NS + "PlasticStrain" );
    
    public static final ObjectProperty PNT = m_model.createObjectProperty( NS + "Pnt" );
    
    public static final ObjectProperty POINT_OF_REFERENCE_HATCH_LINE = m_model.createObjectProperty( NS + "PointOfReferenceHatchLine" );
    
    public static final ObjectProperty POINT_ON_RELATED_ELEMENT = m_model.createObjectProperty( NS + "PointOnRelatedElement" );
    
    public static final ObjectProperty POINT_ON_RELATING_ELEMENT = m_model.createObjectProperty( NS + "PointOnRelatingElement" );
    
    public static final ObjectProperty POINT_PARAMETER = m_model.createObjectProperty( NS + "PointParameter" );
    
    public static final ObjectProperty POINT_PARAMETER_U = m_model.createObjectProperty( NS + "PointParameterU" );
    
    public static final ObjectProperty POINT_PARAMETER_V = m_model.createObjectProperty( NS + "PointParameterV" );
    
    public static final ObjectProperty POINTS = m_model.createObjectProperty( NS + "Points" );
    
    public static final ObjectProperty POISSON_RATIO = m_model.createObjectProperty( NS + "PoissonRatio" );
    
    public static final ObjectProperty POLYGON = m_model.createObjectProperty( NS + "Polygon" );
    
    public static final ObjectProperty POLYGONAL_BOUNDARY = m_model.createObjectProperty( NS + "PolygonalBoundary" );
    
    public static final ObjectProperty POROSITY = m_model.createObjectProperty( NS + "Porosity" );
    
    public static final ObjectProperty POSITION = m_model.createObjectProperty( NS + "Position" );
    
    public static final ObjectProperty POSTAL_BOX = m_model.createObjectProperty( NS + "PostalBox" );
    
    public static final ObjectProperty POSTAL_CODE = m_model.createObjectProperty( NS + "PostalCode" );
    
    public static final ObjectProperty PRE_STRESS = m_model.createObjectProperty( NS + "PreStress" );
    
    public static final ObjectProperty PRECISION = m_model.createObjectProperty( NS + "Precision" );
    
    public static final ObjectProperty PREFIX_TITLES = m_model.createObjectProperty( NS + "PrefixTitles" );
    
    public static final ObjectProperty PREPARED_BY = m_model.createObjectProperty( NS + "PreparedBy" );
    
    public static final ObjectProperty PRESSURE_SINGLE_VALUE = m_model.createObjectProperty( NS + "PressureSingleValue" );
    
    public static final ObjectProperty PRESSURE_TIME_SERIES = m_model.createObjectProperty( NS + "PressureTimeSeries" );
    
    public static final ObjectProperty PRIORITY = m_model.createObjectProperty( NS + "Priority" );
    
    public static final ObjectProperty PROCEDURE_ID = m_model.createObjectProperty( NS + "ProcedureID" );
    
    public static final ObjectProperty PRODUCT_DEFINITIONAL = m_model.createObjectProperty( NS + "ProductDefinitional" );
    
    public static final ObjectProperty PROFILE_DEFINITION = m_model.createObjectProperty( NS + "ProfileDefinition" );
    
    public static final ObjectProperty PROFILE_NAME = m_model.createObjectProperty( NS + "ProfileName" );
    
    public static final ObjectProperty PROFILE_OF_PORT = m_model.createObjectProperty( NS + "ProfileOfPort" );
    
    public static final ObjectProperty PROFILE_ORIENTATION = m_model.createObjectProperty( NS + "ProfileOrientation" );
    
    public static final ObjectProperty PROFILE_SECTION_LOCATION = m_model.createObjectProperty( NS + "ProfileSectionLocation" );
    
    public static final ObjectProperty PROFILES = m_model.createObjectProperty( NS + "Profiles" );
    
    public static final ObjectProperty PROJECTS_ELEMENTS = m_model.createObjectProperty( NS + "ProjectsElements" );
    
    public static final ObjectProperty PROPERTIES_FOR_CONSTRAINT = m_model.createObjectProperty( NS + "PropertiesForConstraint" );
    
    public static final ObjectProperty PROPERTY_DEFINITION_OF = m_model.createObjectProperty( NS + "PropertyDefinitionOf" );
    
    public static final ObjectProperty PROPERTY_DEPENDS_ON = m_model.createObjectProperty( NS + "PropertyDependsOn" );
    
    public static final ObjectProperty PROPERTY_FOR_DEPENDANCE = m_model.createObjectProperty( NS + "PropertyForDependance" );
    
    public static final ObjectProperty PROPERTY_REFERENCE = m_model.createObjectProperty( NS + "PropertyReference" );
    
    public static final ObjectProperty PROPORTIONAL_STRESS = m_model.createObjectProperty( NS + "ProportionalStress" );
    
    public static final ObjectProperty PROTECTIVE_PORE_RATIO = m_model.createObjectProperty( NS + "ProtectivePoreRatio" );
    
    public static final ObjectProperty PROVIDES_BOUNDARIES = m_model.createObjectProperty( NS + "ProvidesBoundaries" );
    
    public static final ObjectProperty PUBLISHER = m_model.createObjectProperty( NS + "Publisher" );
    
    public static final ObjectProperty PUNCH_LIST = m_model.createObjectProperty( NS + "PunchList" );
    
    public static final ObjectProperty PURPOSE = m_model.createObjectProperty( NS + "Purpose" );
    
    public static final ObjectProperty QUADRIC_ATTENUATION = m_model.createObjectProperty( NS + "QuadricAttenuation" );
    
    public static final ObjectProperty QUALITY = m_model.createObjectProperty( NS + "Quality" );
    
    public static final ObjectProperty QUANTITIES = m_model.createObjectProperty( NS + "Quantities" );
    
    public static final ObjectProperty QUANTITY_IN_PROCESS = m_model.createObjectProperty( NS + "QuantityInProcess" );
    
    public static final ObjectProperty RADIUS = m_model.createObjectProperty( NS + "Radius" );
    
    public static final ObjectProperty RASTER_CODE = m_model.createObjectProperty( NS + "RasterCode" );
    
    public static final ObjectProperty RASTER_FORMAT = m_model.createObjectProperty( NS + "RasterFormat" );
    
    public static final ObjectProperty RATE_DATE_TIME = m_model.createObjectProperty( NS + "RateDateTime" );
    
    public static final ObjectProperty RATE_SOURCE = m_model.createObjectProperty( NS + "RateSource" );
    
    public static final ObjectProperty RATED_POWER_INPUT = m_model.createObjectProperty( NS + "RatedPowerInput" );
    
    public static final ObjectProperty REALIZING_ELEMENT = m_model.createObjectProperty( NS + "RealizingElement" );
    
    public static final ObjectProperty REALIZING_ELEMENTS = m_model.createObjectProperty( NS + "RealizingElements" );
    
    public static final ObjectProperty RECORDS = m_model.createObjectProperty( NS + "Records" );
    
    public static final ObjectProperty RED = m_model.createObjectProperty( NS + "Red" );
    
    public static final ObjectProperty REF_DIRECTION = m_model.createObjectProperty( NS + "RefDirection" );
    
    public static final ObjectProperty REF_ELEVATION = m_model.createObjectProperty( NS + "RefElevation" );
    
    public static final ObjectProperty REF_LATITUDE = m_model.createObjectProperty( NS + "RefLatitude" );
    
    public static final ObjectProperty REF_LONGITUDE = m_model.createObjectProperty( NS + "RefLongitude" );
    
    public static final ObjectProperty REFERENCE_INTO_LIBRARY = m_model.createObjectProperty( NS + "ReferenceIntoLibrary" );
    
    public static final ObjectProperty REFERENCE_SURFACE = m_model.createObjectProperty( NS + "ReferenceSurface" );
    
    public static final ObjectProperty REFERENCE_TO_DOCUMENT = m_model.createObjectProperty( NS + "ReferenceToDocument" );
    
    public static final ObjectProperty REFERENCED_BY = m_model.createObjectProperty( NS + "ReferencedBy" );
    
    public static final ObjectProperty REFERENCED_BY_PLACEMENTS = m_model.createObjectProperty( NS + "ReferencedByPlacements" );
    
    public static final ObjectProperty REFERENCED_DOCUMENT = m_model.createObjectProperty( NS + "ReferencedDocument" );
    
    public static final ObjectProperty REFERENCED_IN_STRUCTURES = m_model.createObjectProperty( NS + "ReferencedInStructures" );
    
    public static final ObjectProperty REFERENCED_SOURCE = m_model.createObjectProperty( NS + "ReferencedSource" );
    
    public static final ObjectProperty REFERENCED_TIME_SERIES = m_model.createObjectProperty( NS + "ReferencedTimeSeries" );
    
    public static final ObjectProperty REFERENCES_ELEMENT = m_model.createObjectProperty( NS + "ReferencesElement" );
    
    public static final ObjectProperty REFERENCES_ELEMENTS = m_model.createObjectProperty( NS + "ReferencesElements" );
    
    public static final ObjectProperty REFERENCING_VALUES = m_model.createObjectProperty( NS + "ReferencingValues" );
    
    public static final ObjectProperty REFLECTANCE_COLOUR = m_model.createObjectProperty( NS + "ReflectanceColour" );
    
    public static final ObjectProperty REFLECTION_COLOUR = m_model.createObjectProperty( NS + "ReflectionColour" );
    
    public static final ObjectProperty REFRACTION_INDEX = m_model.createObjectProperty( NS + "RefractionIndex" );
    
    public static final ObjectProperty REGION = m_model.createObjectProperty( NS + "Region" );
    
    public static final ObjectProperty REINFORCEMENT_SECTION_DEFINITIONS = m_model.createObjectProperty( NS + "ReinforcementSectionDefinitions" );
    
    public static final ObjectProperty RELATED_APPROVAL = m_model.createObjectProperty( NS + "RelatedApproval" );
    
    public static final ObjectProperty RELATED_BUILDING_ELEMENT = m_model.createObjectProperty( NS + "RelatedBuildingElement" );
    
    public static final ObjectProperty RELATED_BUILDINGS = m_model.createObjectProperty( NS + "RelatedBuildings" );
    
    public static final ObjectProperty RELATED_CLASSIFICATIONS = m_model.createObjectProperty( NS + "RelatedClassifications" );
    
    public static final ObjectProperty RELATED_CONSTRAINTS = m_model.createObjectProperty( NS + "RelatedConstraints" );
    
    public static final ObjectProperty RELATED_CONTROL_ELEMENTS = m_model.createObjectProperty( NS + "RelatedControlElements" );
    
    public static final ObjectProperty RELATED_COVERINGS = m_model.createObjectProperty( NS + "RelatedCoverings" );
    
    public static final ObjectProperty RELATED_DOCUMENTS = m_model.createObjectProperty( NS + "RelatedDocuments" );
    
    public static final ObjectProperty RELATED_DRAUGHTING_CALLOUT = m_model.createObjectProperty( NS + "RelatedDraughtingCallout" );
    
    public static final ObjectProperty RELATED_ELEMENT = m_model.createObjectProperty( NS + "RelatedElement" );
    
    public static final ObjectProperty RELATED_ELEMENTS = m_model.createObjectProperty( NS + "RelatedElements" );
    
    public static final ObjectProperty RELATED_FEATURE_ELEMENT = m_model.createObjectProperty( NS + "RelatedFeatureElement" );
    
    public static final ObjectProperty RELATED_ITEMS = m_model.createObjectProperty( NS + "RelatedItems" );
    
    public static final ObjectProperty RELATED_MONETARY_UNIT = m_model.createObjectProperty( NS + "RelatedMonetaryUnit" );
    
    public static final ObjectProperty RELATED_OBJECTS = m_model.createObjectProperty( NS + "RelatedObjects" );
    
    public static final ObjectProperty RELATED_OPENING_ELEMENT = m_model.createObjectProperty( NS + "RelatedOpeningElement" );
    
    public static final ObjectProperty RELATED_ORGANIZATIONS = m_model.createObjectProperty( NS + "RelatedOrganizations" );
    
    public static final ObjectProperty RELATED_PORT = m_model.createObjectProperty( NS + "RelatedPort" );
    
    public static final ObjectProperty RELATED_PRIORITIES = m_model.createObjectProperty( NS + "RelatedPriorities" );
    
    public static final ObjectProperty RELATED_PROCESS = m_model.createObjectProperty( NS + "RelatedProcess" );
    
    public static final ObjectProperty RELATED_PROPERTIES = m_model.createObjectProperty( NS + "RelatedProperties" );
    
    public static final ObjectProperty RELATED_SPACE = m_model.createObjectProperty( NS + "RelatedSpace" );
    
    public static final ObjectProperty RELATED_SPACE_PROGRAM = m_model.createObjectProperty( NS + "RelatedSpaceProgram" );
    
    public static final ObjectProperty RELATED_STRUCTURAL_ACTIVITY = m_model.createObjectProperty( NS + "RelatedStructuralActivity" );
    
    public static final ObjectProperty RELATED_STRUCTURAL_CONNECTION = m_model.createObjectProperty( NS + "RelatedStructuralConnection" );
    
    public static final ObjectProperty RELATED_STRUCTURAL_MEMBER = m_model.createObjectProperty( NS + "RelatedStructuralMember" );
    
    public static final ObjectProperty RELATES = m_model.createObjectProperty( NS + "Relates" );
    
    public static final ObjectProperty RELATES_CONSTRAINTS = m_model.createObjectProperty( NS + "RelatesConstraints" );
    
    public static final ObjectProperty RELATING_ACTOR = m_model.createObjectProperty( NS + "RelatingActor" );
    
    public static final ObjectProperty RELATING_APPLIED_VALUE = m_model.createObjectProperty( NS + "RelatingAppliedValue" );
    
    public static final ObjectProperty RELATING_APPROVAL = m_model.createObjectProperty( NS + "RelatingApproval" );
    
    public static final ObjectProperty RELATING_BUILDING_ELEMENT = m_model.createObjectProperty( NS + "RelatingBuildingElement" );
    
    public static final ObjectProperty RELATING_CLASSIFICATION = m_model.createObjectProperty( NS + "RelatingClassification" );
    
    public static final ObjectProperty RELATING_CONSTRAINT = m_model.createObjectProperty( NS + "RelatingConstraint" );
    
    public static final ObjectProperty RELATING_CONTROL = m_model.createObjectProperty( NS + "RelatingControl" );
    
    public static final ObjectProperty RELATING_DOCUMENT = m_model.createObjectProperty( NS + "RelatingDocument" );
    
    public static final ObjectProperty RELATING_DRAUGHTING_CALLOUT = m_model.createObjectProperty( NS + "RelatingDraughtingCallout" );
    
    public static final ObjectProperty RELATING_ELEMENT = m_model.createObjectProperty( NS + "RelatingElement" );
    
    public static final ObjectProperty RELATING_FLOW_ELEMENT = m_model.createObjectProperty( NS + "RelatingFlowElement" );
    
    public static final ObjectProperty RELATING_GROUP = m_model.createObjectProperty( NS + "RelatingGroup" );
    
    public static final ObjectProperty RELATING_ITEM = m_model.createObjectProperty( NS + "RelatingItem" );
    
    public static final ObjectProperty RELATING_LIBRARY = m_model.createObjectProperty( NS + "RelatingLibrary" );
    
    public static final ObjectProperty RELATING_MATERIAL = m_model.createObjectProperty( NS + "RelatingMaterial" );
    
    public static final ObjectProperty RELATING_MONETARY_UNIT = m_model.createObjectProperty( NS + "RelatingMonetaryUnit" );
    
    public static final ObjectProperty RELATING_OBJECT = m_model.createObjectProperty( NS + "RelatingObject" );
    
    public static final ObjectProperty RELATING_OPENING_ELEMENT = m_model.createObjectProperty( NS + "RelatingOpeningElement" );
    
    public static final ObjectProperty RELATING_ORGANIZATION = m_model.createObjectProperty( NS + "RelatingOrganization" );
    
    public static final ObjectProperty RELATING_PORT = m_model.createObjectProperty( NS + "RelatingPort" );
    
    public static final ObjectProperty RELATING_PRIORITIES = m_model.createObjectProperty( NS + "RelatingPriorities" );
    
    public static final ObjectProperty RELATING_PROCESS = m_model.createObjectProperty( NS + "RelatingProcess" );
    
    public static final ObjectProperty RELATING_PRODUCT = m_model.createObjectProperty( NS + "RelatingProduct" );
    
    public static final ObjectProperty RELATING_PROFILE_PROPERTIES = m_model.createObjectProperty( NS + "RelatingProfileProperties" );
    
    public static final ObjectProperty RELATING_PROPERTY_DEFINITION = m_model.createObjectProperty( NS + "RelatingPropertyDefinition" );
    
    public static final ObjectProperty RELATING_RESOURCE = m_model.createObjectProperty( NS + "RelatingResource" );
    
    public static final ObjectProperty RELATING_SPACE = m_model.createObjectProperty( NS + "RelatingSpace" );
    
    public static final ObjectProperty RELATING_SPACE_PROGRAM = m_model.createObjectProperty( NS + "RelatingSpaceProgram" );
    
    public static final ObjectProperty RELATING_STRUCTURAL_MEMBER = m_model.createObjectProperty( NS + "RelatingStructuralMember" );
    
    public static final ObjectProperty RELATING_STRUCTURE = m_model.createObjectProperty( NS + "RelatingStructure" );
    
    public static final ObjectProperty RELATING_SYSTEM = m_model.createObjectProperty( NS + "RelatingSystem" );
    
    public static final ObjectProperty RELATING_TYPE = m_model.createObjectProperty( NS + "RelatingType" );
    
    public static final ObjectProperty RELATIONSHIP_TYPE = m_model.createObjectProperty( NS + "RelationshipType" );
    
    public static final ObjectProperty RELATIVE_PLACEMENT = m_model.createObjectProperty( NS + "RelativePlacement" );
    
    public static final ObjectProperty RELAXATION_VALUE = m_model.createObjectProperty( NS + "RelaxationValue" );
    
    public static final ObjectProperty RELAXATIONS = m_model.createObjectProperty( NS + "Relaxations" );
    
    public static final ObjectProperty REMAINING_TIME = m_model.createObjectProperty( NS + "RemainingTime" );
    
    public static final ObjectProperty REPEAT_FACTOR = m_model.createObjectProperty( NS + "RepeatFactor" );
    
    public static final ObjectProperty REPEAT_S = m_model.createObjectProperty( NS + "RepeatS" );
    
    public static final ObjectProperty REPEAT_T = m_model.createObjectProperty( NS + "RepeatT" );
    
    public static final ObjectProperty REPRESENTATION = m_model.createObjectProperty( NS + "Representation" );
    
    public static final ObjectProperty REPRESENTATION_CONTEXTS = m_model.createObjectProperty( NS + "RepresentationContexts" );
    
    public static final ObjectProperty REPRESENTATION_IDENTIFIER = m_model.createObjectProperty( NS + "RepresentationIdentifier" );
    
    public static final ObjectProperty REPRESENTATION_MAP = m_model.createObjectProperty( NS + "RepresentationMap" );
    
    public static final ObjectProperty REPRESENTATION_MAPS = m_model.createObjectProperty( NS + "RepresentationMaps" );
    
    public static final ObjectProperty REPRESENTATION_TYPE = m_model.createObjectProperty( NS + "RepresentationType" );
    
    public static final ObjectProperty REPRESENTATIONS = m_model.createObjectProperty( NS + "Representations" );
    
    public static final ObjectProperty REPRESENTATIONS_IN_CONTEXT = m_model.createObjectProperty( NS + "RepresentationsInContext" );
    
    public static final ObjectProperty REPRESENTED_MATERIAL = m_model.createObjectProperty( NS + "RepresentedMaterial" );
    
    public static final ObjectProperty REQUEST_ID = m_model.createObjectProperty( NS + "RequestID" );
    
    public static final ObjectProperty REQUESTED_LOCATION = m_model.createObjectProperty( NS + "RequestedLocation" );
    
    public static final ObjectProperty RESOURCE_GROUP = m_model.createObjectProperty( NS + "ResourceGroup" );
    
    public static final ObjectProperty RESOURCE_IDENTIFIER = m_model.createObjectProperty( NS + "ResourceIdentifier" );
    
    public static final ObjectProperty RESOURCE_OF = m_model.createObjectProperty( NS + "ResourceOf" );
    
    public static final ObjectProperty RESPONSIBLE_PERSON = m_model.createObjectProperty( NS + "ResponsiblePerson" );
    
    public static final ObjectProperty RESPONSIBLE_PERSONS = m_model.createObjectProperty( NS + "ResponsiblePersons" );
    
    public static final ObjectProperty RESULT_FOR_LOAD_GROUP = m_model.createObjectProperty( NS + "ResultForLoadGroup" );
    
    public static final ObjectProperty RESULT_GROUP_FOR = m_model.createObjectProperty( NS + "ResultGroupFor" );
    
    public static final ObjectProperty RESULT_VALUES = m_model.createObjectProperty( NS + "ResultValues" );
    
    public static final ObjectProperty REVISION = m_model.createObjectProperty( NS + "Revision" );
    
    public static final ObjectProperty RIB_HEIGHT = m_model.createObjectProperty( NS + "RibHeight" );
    
    public static final ObjectProperty RIB_SPACING = m_model.createObjectProperty( NS + "RibSpacing" );
    
    public static final ObjectProperty RIB_WIDTH = m_model.createObjectProperty( NS + "RibWidth" );
    
    public static final ObjectProperty RISER_HEIGHT = m_model.createObjectProperty( NS + "RiserHeight" );
    
    public static final ObjectProperty ROLE = m_model.createObjectProperty( NS + "Role" );
    
    public static final ObjectProperty ROLES = m_model.createObjectProperty( NS + "Roles" );
    
    public static final ObjectProperty ROTATIONAL_DISPLACEMENT_RX = m_model.createObjectProperty( NS + "RotationalDisplacementRX" );
    
    public static final ObjectProperty ROTATIONAL_DISPLACEMENT_RY = m_model.createObjectProperty( NS + "RotationalDisplacementRY" );
    
    public static final ObjectProperty ROTATIONAL_DISPLACEMENT_RZ = m_model.createObjectProperty( NS + "RotationalDisplacementRZ" );
    
    public static final ObjectProperty ROTATIONAL_STIFFNESS_BY_LENGTH_X = m_model.createObjectProperty( NS + "RotationalStiffnessByLengthX" );
    
    public static final ObjectProperty ROTATIONAL_STIFFNESS_BY_LENGTH_Y = m_model.createObjectProperty( NS + "RotationalStiffnessByLengthY" );
    
    public static final ObjectProperty ROTATIONAL_STIFFNESS_BY_LENGTH_Z = m_model.createObjectProperty( NS + "RotationalStiffnessByLengthZ" );
    
    public static final ObjectProperty ROTATIONAL_STIFFNESS_X = m_model.createObjectProperty( NS + "RotationalStiffnessX" );
    
    public static final ObjectProperty ROTATIONAL_STIFFNESS_Y = m_model.createObjectProperty( NS + "RotationalStiffnessY" );
    
    public static final ObjectProperty ROTATIONAL_STIFFNESS_Z = m_model.createObjectProperty( NS + "RotationalStiffnessZ" );
    
    public static final ObjectProperty ROUNDING_RADIUS = m_model.createObjectProperty( NS + "RoundingRadius" );
    
    public static final ObjectProperty ROW_CELLS = m_model.createObjectProperty( NS + "RowCells" );
    
    public static final ObjectProperty ROWS = m_model.createObjectProperty( NS + "Rows" );
    
    public static final ObjectProperty SAME_SENSE = m_model.createObjectProperty( NS + "SameSense" );
    
    public static final ObjectProperty SBSM_BOUNDARY = m_model.createObjectProperty( NS + "SbsmBoundary" );
    
    public static final ObjectProperty SCALE = m_model.createObjectProperty( NS + "Scale" );
    
    public static final ObjectProperty SCALE2 = m_model.createObjectProperty( NS + "Scale2" );
    
    public static final ObjectProperty SCALE3 = m_model.createObjectProperty( NS + "Scale3" );
    
    public static final ObjectProperty SCHEDULE_DURATION = m_model.createObjectProperty( NS + "ScheduleDuration" );
    
    public static final ObjectProperty SCHEDULE_FINISH = m_model.createObjectProperty( NS + "ScheduleFinish" );
    
    public static final ObjectProperty SCHEDULE_START = m_model.createObjectProperty( NS + "ScheduleStart" );
    
    public static final ObjectProperty SCHEDULE_TIME_CONTROL_ASSIGNED = m_model.createObjectProperty( NS + "ScheduleTimeControlAssigned" );
    
    public static final ObjectProperty SCOPE = m_model.createObjectProperty( NS + "Scope" );
    
    public static final ObjectProperty SECOND_COMPONENT = m_model.createObjectProperty( NS + "SecondComponent" );
    
    public static final ObjectProperty SECOND_MULLION_OFFSET = m_model.createObjectProperty( NS + "SecondMullionOffset" );
    
    public static final ObjectProperty SECOND_OPERAND = m_model.createObjectProperty( NS + "SecondOperand" );
    
    public static final ObjectProperty SECOND_REPEAT_FACTOR = m_model.createObjectProperty( NS + "SecondRepeatFactor" );
    
    public static final ObjectProperty SECOND_TRANSOM_OFFSET = m_model.createObjectProperty( NS + "SecondTransomOffset" );
    
    public static final ObjectProperty SECONDARY_PLANE_ANGLE = m_model.createObjectProperty( NS + "SecondaryPlaneAngle" );
    
    public static final ObjectProperty SECTION_DEFINITION = m_model.createObjectProperty( NS + "SectionDefinition" );
    
    public static final ObjectProperty SEGMENTS = m_model.createObjectProperty( NS + "Segments" );
    
    public static final ObjectProperty SELF_INTERSECT = m_model.createObjectProperty( NS + "SelfIntersect" );
    
    public static final ObjectProperty SEMI_AXIS1 = m_model.createObjectProperty( NS + "SemiAxis1" );
    
    public static final ObjectProperty SEMI_AXIS2 = m_model.createObjectProperty( NS + "SemiAxis2" );
    
    public static final ObjectProperty SENSE_AGREEMENT = m_model.createObjectProperty( NS + "SenseAgreement" );
    
    public static final ObjectProperty SERVICE_LIFE_DURATION = m_model.createObjectProperty( NS + "ServiceLifeDuration" );
    
    public static final ObjectProperty SERVICED_BY_SYSTEMS = m_model.createObjectProperty( NS + "ServicedBySystems" );
    
    public static final ObjectProperty SERVICES_BUILDINGS = m_model.createObjectProperty( NS + "ServicesBuildings" );
    
    public static final ObjectProperty SHAPE_ASPECT_STYLE = m_model.createObjectProperty( NS + "ShapeAspectStyle" );
    
    public static final ObjectProperty SHAPE_OF_PRODUCT = m_model.createObjectProperty( NS + "ShapeOfProduct" );
    
    public static final ObjectProperty SHAPE_REPRESENTATIONS = m_model.createObjectProperty( NS + "ShapeRepresentations" );
    
    public static final ObjectProperty SHEAR_AREA_Y = m_model.createObjectProperty( NS + "ShearAreaY" );
    
    public static final ObjectProperty SHEAR_AREA_Z = m_model.createObjectProperty( NS + "ShearAreaZ" );
    
    public static final ObjectProperty SHEAR_CENTRE_Y = m_model.createObjectProperty( NS + "ShearCentreY" );
    
    public static final ObjectProperty SHEAR_CENTRE_Z = m_model.createObjectProperty( NS + "ShearCentreZ" );
    
    public static final ObjectProperty SHEAR_DEFORMATION_AREA_Y = m_model.createObjectProperty( NS + "ShearDeformationAreaY" );
    
    public static final ObjectProperty SHEAR_DEFORMATION_AREA_Z = m_model.createObjectProperty( NS + "ShearDeformationAreaZ" );
    
    public static final ObjectProperty SHEAR_MODULUS = m_model.createObjectProperty( NS + "ShearModulus" );
    
    public static final ObjectProperty SITE_ADDRESS = m_model.createObjectProperty( NS + "SiteAddress" );
    
    public static final ObjectProperty SIZE_IN_X = m_model.createObjectProperty( NS + "SizeInX" );
    
    public static final ObjectProperty SIZE_IN_Y = m_model.createObjectProperty( NS + "SizeInY" );
    
    public static final ObjectProperty SIZEABLE = m_model.createObjectProperty( NS + "Sizeable" );
    
    public static final ObjectProperty SKILL_SET = m_model.createObjectProperty( NS + "SkillSet" );
    
    public static final ObjectProperty SLIPPAGE_X = m_model.createObjectProperty( NS + "SlippageX" );
    
    public static final ObjectProperty SLIPPAGE_Y = m_model.createObjectProperty( NS + "SlippageY" );
    
    public static final ObjectProperty SLIPPAGE_Z = m_model.createObjectProperty( NS + "SlippageZ" );
    
    public static final ObjectProperty SOLAR_REFLECTANCE_BACK = m_model.createObjectProperty( NS + "SolarReflectanceBack" );
    
    public static final ObjectProperty SOLAR_REFLECTANCE_FRONT = m_model.createObjectProperty( NS + "SolarReflectanceFront" );
    
    public static final ObjectProperty SOLAR_TRANSMITTANCE = m_model.createObjectProperty( NS + "SolarTransmittance" );
    
    public static final ObjectProperty SOUND_LEVEL_SINGLE_VALUE = m_model.createObjectProperty( NS + "SoundLevelSingleValue" );
    
    public static final ObjectProperty SOUND_LEVEL_TIME_SERIES = m_model.createObjectProperty( NS + "SoundLevelTimeSeries" );
    
    public static final ObjectProperty SOUND_VALUES = m_model.createObjectProperty( NS + "SoundValues" );
    
    public static final ObjectProperty SOURCE = m_model.createObjectProperty( NS + "Source" );
    
    public static final ObjectProperty SOURCE_DESCRIPTION = m_model.createObjectProperty( NS + "SourceDescription" );
    
    public static final ObjectProperty SOURCE_OF_RESULT_GROUP = m_model.createObjectProperty( NS + "SourceOfResultGroup" );
    
    public static final ObjectProperty SPACE_PROGRAM_IDENTIFIER = m_model.createObjectProperty( NS + "SpaceProgramIdentifier" );
    
    public static final ObjectProperty SPECIFIC_HEAT_CAPACITY = m_model.createObjectProperty( NS + "SpecificHeatCapacity" );
    
    public static final ObjectProperty SPECULAR_COLOUR = m_model.createObjectProperty( NS + "SpecularColour" );
    
    public static final ObjectProperty SPECULAR_HIGHLIGHT = m_model.createObjectProperty( NS + "SpecularHighlight" );
    
    public static final ObjectProperty SPINE_CURVE = m_model.createObjectProperty( NS + "SpineCurve" );
    
    public static final ObjectProperty SPREAD_ANGLE = m_model.createObjectProperty( NS + "SpreadAngle" );
    
    public static final ObjectProperty STANDARD_REQUIRED_AREA = m_model.createObjectProperty( NS + "StandardRequiredArea" );
    
    public static final ObjectProperty START_FLOAT = m_model.createObjectProperty( NS + "StartFloat" );
    
    public static final ObjectProperty START_OF_NEXT_HATCH_LINE = m_model.createObjectProperty( NS + "StartOfNextHatchLine" );
    
    public static final ObjectProperty START_PARAM = m_model.createObjectProperty( NS + "StartParam" );
    
    public static final ObjectProperty START_PROFILE = m_model.createObjectProperty( NS + "StartProfile" );
    
    public static final ObjectProperty START_TIME = m_model.createObjectProperty( NS + "StartTime" );
    
    public static final ObjectProperty STATUS = m_model.createObjectProperty( NS + "Status" );
    
    public static final ObjectProperty STATUS_TIME = m_model.createObjectProperty( NS + "StatusTime" );
    
    public static final ObjectProperty STEEL_GRADE = m_model.createObjectProperty( NS + "SteelGrade" );
    
    public static final ObjectProperty STYLE_OF_SYMBOL = m_model.createObjectProperty( NS + "StyleOfSymbol" );
    
    public static final ObjectProperty STYLED_BY_ITEM = m_model.createObjectProperty( NS + "StyledByItem" );
    
    public static final ObjectProperty STYLES = m_model.createObjectProperty( NS + "Styles" );
    
    public static final ObjectProperty SUB_CONTRACTOR = m_model.createObjectProperty( NS + "SubContractor" );
    
    public static final ObjectProperty SUBMITTED_BY = m_model.createObjectProperty( NS + "SubmittedBy" );
    
    public static final ObjectProperty SUBMITTED_ON = m_model.createObjectProperty( NS + "SubmittedOn" );
    
    public static final ObjectProperty SUBSEQUENT_APPLIED_LOADS = m_model.createObjectProperty( NS + "SubsequentAppliedLoads" );
    
    public static final ObjectProperty SUBSEQUENT_THICKNESS = m_model.createObjectProperty( NS + "SubsequentThickness" );
    
    public static final ObjectProperty SUFFIX_TITLES = m_model.createObjectProperty( NS + "SuffixTitles" );
    
    public static final ObjectProperty SUPPLIERS = m_model.createObjectProperty( NS + "Suppliers" );
    
    public static final ObjectProperty SUPPORTED_LENGTH = m_model.createObjectProperty( NS + "SupportedLength" );
    
    public static final ObjectProperty SURFACE_COLOUR = m_model.createObjectProperty( NS + "SurfaceColour" );
    
    public static final ObjectProperty SURFACE_ON_RELATED_ELEMENT = m_model.createObjectProperty( NS + "SurfaceOnRelatedElement" );
    
    public static final ObjectProperty SURFACE_ON_RELATING_ELEMENT = m_model.createObjectProperty( NS + "SurfaceOnRelatingElement" );
    
    public static final ObjectProperty SWEPT_AREA = m_model.createObjectProperty( NS + "SweptArea" );
    
    public static final ObjectProperty SWEPT_CURVE = m_model.createObjectProperty( NS + "SweptCurve" );
    
    public static final ObjectProperty SYMBOL = m_model.createObjectProperty( NS + "Symbol" );
    
    public static final ObjectProperty TAG = m_model.createObjectProperty( NS + "Tag" );
    
    public static final ObjectProperty TARGET = m_model.createObjectProperty( NS + "Target" );
    
    public static final ObjectProperty TARGET_SCALE = m_model.createObjectProperty( NS + "TargetScale" );
    
    public static final ObjectProperty TARGET_USERS = m_model.createObjectProperty( NS + "TargetUsers" );
    
    public static final ObjectProperty TASK_ID = m_model.createObjectProperty( NS + "TaskId" );
    
    public static final ObjectProperty TELEPHONE_NUMBERS = m_model.createObjectProperty( NS + "TelephoneNumbers" );
    
    public static final ObjectProperty TEMPERATURE_SINGLE_VALUE = m_model.createObjectProperty( NS + "TemperatureSingleValue" );
    
    public static final ObjectProperty TEMPERATURE_TIME_SERIES = m_model.createObjectProperty( NS + "TemperatureTimeSeries" );
    
    public static final ObjectProperty TENSION_FAILURE_X = m_model.createObjectProperty( NS + "TensionFailureX" );
    
    public static final ObjectProperty TENSION_FAILURE_Y = m_model.createObjectProperty( NS + "TensionFailureY" );
    
    public static final ObjectProperty TENSION_FAILURE_Z = m_model.createObjectProperty( NS + "TensionFailureZ" );
    
    public static final ObjectProperty TENSION_FORCE = m_model.createObjectProperty( NS + "TensionForce" );
    
    public static final ObjectProperty TEXT_ALIGN = m_model.createObjectProperty( NS + "TextAlign" );
    
    public static final ObjectProperty TEXT_CHARACTER_APPEARANCE = m_model.createObjectProperty( NS + "TextCharacterAppearance" );
    
    public static final ObjectProperty TEXT_DECORATION = m_model.createObjectProperty( NS + "TextDecoration" );
    
    public static final ObjectProperty TEXT_FONT_STYLE = m_model.createObjectProperty( NS + "TextFontStyle" );
    
    public static final ObjectProperty TEXT_INDENT = m_model.createObjectProperty( NS + "TextIndent" );
    
    public static final ObjectProperty TEXT_STYLE = m_model.createObjectProperty( NS + "TextStyle" );
    
    public static final ObjectProperty TEXT_TRANSFORM = m_model.createObjectProperty( NS + "TextTransform" );
    
    public static final ObjectProperty TEXTURE_COORDINATES = m_model.createObjectProperty( NS + "TextureCoordinates" );
    
    public static final ObjectProperty TEXTURE_MAPS = m_model.createObjectProperty( NS + "TextureMaps" );
    
    public static final ObjectProperty TEXTURE_POINTS = m_model.createObjectProperty( NS + "TexturePoints" );
    
    public static final ObjectProperty TEXTURE_TRANSFORM = m_model.createObjectProperty( NS + "TextureTransform" );
    
    public static final ObjectProperty TEXTURE_VERTICES = m_model.createObjectProperty( NS + "TextureVertices" );
    
    public static final ObjectProperty TEXTURES = m_model.createObjectProperty( NS + "Textures" );
    
    public static final ObjectProperty THE_ACTOR = m_model.createObjectProperty( NS + "TheActor" );
    
    public static final ObjectProperty THE_ORGANIZATION = m_model.createObjectProperty( NS + "TheOrganization" );
    
    public static final ObjectProperty THE_PERSON = m_model.createObjectProperty( NS + "ThePerson" );
    
    public static final ObjectProperty THERMAL_CONDUCTIVITY = m_model.createObjectProperty( NS + "ThermalConductivity" );
    
    public static final ObjectProperty THERMAL_EXPANSION_COEFFICIENT = m_model.createObjectProperty( NS + "ThermalExpansionCoefficient" );
    
    public static final ObjectProperty THERMAL_IR_EMISSIVITY_BACK = m_model.createObjectProperty( NS + "ThermalIrEmissivityBack" );
    
    public static final ObjectProperty THERMAL_IR_EMISSIVITY_FRONT = m_model.createObjectProperty( NS + "ThermalIrEmissivityFront" );
    
    public static final ObjectProperty THERMAL_IR_TRANSMITTANCE = m_model.createObjectProperty( NS + "ThermalIrTransmittance" );
    
    public static final ObjectProperty THERMAL_LOAD_TIME_SERIES_VALUES = m_model.createObjectProperty( NS + "ThermalLoadTimeSeriesValues" );
    
    public static final ObjectProperty THERMODYNAMIC_TEMPERATURE_EXPONENT = m_model.createObjectProperty( NS + "ThermodynamicTemperatureExponent" );
    
    public static final ObjectProperty THICKNESS = m_model.createObjectProperty( NS + "Thickness" );
    
    public static final ObjectProperty THRESHOLD_DEPTH = m_model.createObjectProperty( NS + "ThresholdDepth" );
    
    public static final ObjectProperty THRESHOLD_OFFSET = m_model.createObjectProperty( NS + "ThresholdOffset" );
    
    public static final ObjectProperty THRESHOLD_THICKNESS = m_model.createObjectProperty( NS + "ThresholdThickness" );
    
    public static final ObjectProperty TILES = m_model.createObjectProperty( NS + "Tiles" );
    
    public static final ObjectProperty TILING_PATTERN = m_model.createObjectProperty( NS + "TilingPattern" );
    
    public static final ObjectProperty TILING_SCALE = m_model.createObjectProperty( NS + "TilingScale" );
    
    public static final ObjectProperty TIME_COMPONENT = m_model.createObjectProperty( NS + "TimeComponent" );
    
    public static final ObjectProperty TIME_EXPONENT = m_model.createObjectProperty( NS + "TimeExponent" );
    
    public static final ObjectProperty TIME_FOR_TASK = m_model.createObjectProperty( NS + "TimeForTask" );
    
    public static final ObjectProperty TIME_LAG = m_model.createObjectProperty( NS + "TimeLag" );
    
    public static final ObjectProperty TIME_SERIES = m_model.createObjectProperty( NS + "TimeSeries" );
    
    public static final ObjectProperty TIME_SERIES_REFERENCES = m_model.createObjectProperty( NS + "TimeSeriesReferences" );
    
    public static final ObjectProperty TIME_STAMP = m_model.createObjectProperty( NS + "TimeStamp" );
    
    public static final ObjectProperty TIME_STEP = m_model.createObjectProperty( NS + "TimeStep" );
    
    public static final ObjectProperty TIME_VALUE = m_model.createObjectProperty( NS + "TimeValue" );
    
    public static final ObjectProperty TITLE = m_model.createObjectProperty( NS + "Title" );
    
    public static final ObjectProperty TO_MATERIAL_LAYER_SET = m_model.createObjectProperty( NS + "ToMaterialLayerSet" );
    
    public static final ObjectProperty TOP_FLANGE_FILLET_RADIUS = m_model.createObjectProperty( NS + "TopFlangeFilletRadius" );
    
    public static final ObjectProperty TOP_FLANGE_THICKNESS = m_model.createObjectProperty( NS + "TopFlangeThickness" );
    
    public static final ObjectProperty TOP_FLANGE_WIDTH = m_model.createObjectProperty( NS + "TopFlangeWidth" );
    
    public static final ObjectProperty TOP_XDIM = m_model.createObjectProperty( NS + "TopXDim" );
    
    public static final ObjectProperty TOP_XOFFSET = m_model.createObjectProperty( NS + "TopXOffset" );
    
    public static final ObjectProperty TORSIONAL_CONSTANT_X = m_model.createObjectProperty( NS + "TorsionalConstantX" );
    
    public static final ObjectProperty TORSIONAL_SECTION_MODULUS = m_model.createObjectProperty( NS + "TorsionalSectionModulus" );
    
    public static final ObjectProperty TOTAL_CROSS_SECTION_AREA = m_model.createObjectProperty( NS + "TotalCrossSectionArea" );
    
    public static final ObjectProperty TOTAL_FLOAT = m_model.createObjectProperty( NS + "TotalFloat" );
    
    public static final ObjectProperty TOTAL_REPLACEMENT_COST = m_model.createObjectProperty( NS + "TotalReplacementCost" );
    
    public static final ObjectProperty TOWN = m_model.createObjectProperty( NS + "Town" );
    
    public static final ObjectProperty TRANSMISSION_COLOUR = m_model.createObjectProperty( NS + "TransmissionColour" );
    
    public static final ObjectProperty TRANSOM_OFFSET = m_model.createObjectProperty( NS + "TransomOffset" );
    
    public static final ObjectProperty TRANSOM_THICKNESS = m_model.createObjectProperty( NS + "TransomThickness" );
    
    public static final ObjectProperty TRANSPARENCY = m_model.createObjectProperty( NS + "Transparency" );
    
    public static final ObjectProperty TRANSVERSE_BAR_CROSS_SECTION_AREA = m_model.createObjectProperty( NS + "TransverseBarCrossSectionArea" );
    
    public static final ObjectProperty TRANSVERSE_BAR_NOMINAL_DIAMETER = m_model.createObjectProperty( NS + "TransverseBarNominalDiameter" );
    
    public static final ObjectProperty TRANSVERSE_BAR_SPACING = m_model.createObjectProperty( NS + "TransverseBarSpacing" );
    
    public static final ObjectProperty TRANSVERSE_POSITION = m_model.createObjectProperty( NS + "TransversePosition" );
    
    public static final ObjectProperty TREAD_LENGTH = m_model.createObjectProperty( NS + "TreadLength" );
    
    public static final ObjectProperty TREE_ROOT_EXPRESSION = m_model.createObjectProperty( NS + "TreeRootExpression" );
    
    public static final ObjectProperty TRIM1 = m_model.createObjectProperty( NS + "Trim1" );
    
    public static final ObjectProperty TRIM2 = m_model.createObjectProperty( NS + "Trim2" );
    
    public static final ObjectProperty TRUE_NORTH = m_model.createObjectProperty( NS + "TrueNorth" );
    
    public static final ObjectProperty U1 = m_model.createObjectProperty( NS + "U1" );
    
    public static final ObjectProperty U2 = m_model.createObjectProperty( NS + "U2" );
    
    public static final ObjectProperty UAXES = m_model.createObjectProperty( NS + "UAxes" );
    
    public static final ObjectProperty ULTIMATE_STRAIN = m_model.createObjectProperty( NS + "UltimateStrain" );
    
    public static final ObjectProperty ULTIMATE_STRESS = m_model.createObjectProperty( NS + "UltimateStress" );
    
    public static final ObjectProperty UNIT = m_model.createObjectProperty( NS + "Unit" );
    
    public static final ObjectProperty UNIT_BASIS = m_model.createObjectProperty( NS + "UnitBasis" );
    
    public static final ObjectProperty UNIT_COMPONENT = m_model.createObjectProperty( NS + "UnitComponent" );
    
    public static final ObjectProperty UNITS = m_model.createObjectProperty( NS + "Units" );
    
    public static final ObjectProperty UNITS_IN_CONTEXT = m_model.createObjectProperty( NS + "UnitsInContext" );
    
    public static final ObjectProperty UPDATE_DATE = m_model.createObjectProperty( NS + "UpdateDate" );
    
    public static final ObjectProperty UPPER_BOUND_VALUE = m_model.createObjectProperty( NS + "UpperBoundValue" );
    
    public static final ObjectProperty UPPER_VALUE = m_model.createObjectProperty( NS + "UpperValue" );
    
    public static final ObjectProperty UPPER_VAPOR_RESISTANCE_FACTOR = m_model.createObjectProperty( NS + "UpperVaporResistanceFactor" );
    
    public static final ObjectProperty URL_REFERENCE = m_model.createObjectProperty( NS + "UrlReference" );
    
    public static final ObjectProperty USAGE = m_model.createObjectProperty( NS + "Usage" );
    
    public static final ObjectProperty USAGE_NAME = m_model.createObjectProperty( NS + "UsageName" );
    
    public static final ObjectProperty USAGE_RATIO = m_model.createObjectProperty( NS + "UsageRatio" );
    
    public static final ObjectProperty USENSE = m_model.createObjectProperty( NS + "Usense" );
    
    public static final ObjectProperty USER = m_model.createObjectProperty( NS + "User" );
    
    public static final ObjectProperty USER_DEFINED_CATEGORY = m_model.createObjectProperty( NS + "UserDefinedCategory" );
    
    public static final ObjectProperty USER_DEFINED_CONTROL_TYPE = m_model.createObjectProperty( NS + "UserDefinedControlType" );
    
    public static final ObjectProperty USER_DEFINED_DATA_ORIGIN = m_model.createObjectProperty( NS + "UserDefinedDataOrigin" );
    
    public static final ObjectProperty USER_DEFINED_ENERGY_SEQUENCE = m_model.createObjectProperty( NS + "UserDefinedEnergySequence" );
    
    public static final ObjectProperty USER_DEFINED_FUNCTION = m_model.createObjectProperty( NS + "UserDefinedFunction" );
    
    public static final ObjectProperty USER_DEFINED_GRADE = m_model.createObjectProperty( NS + "UserDefinedGrade" );
    
    public static final ObjectProperty USER_DEFINED_PROCEDURE_TYPE = m_model.createObjectProperty( NS + "UserDefinedProcedureType" );
    
    public static final ObjectProperty USER_DEFINED_PROPERTY_SOURCE = m_model.createObjectProperty( NS + "UserDefinedPropertySource" );
    
    public static final ObjectProperty USER_DEFINED_PURPOSE = m_model.createObjectProperty( NS + "UserDefinedPurpose" );
    
    public static final ObjectProperty USER_DEFINED_QUALIFIER = m_model.createObjectProperty( NS + "UserDefinedQualifier" );
    
    public static final ObjectProperty USER_DEFINED_ROLE = m_model.createObjectProperty( NS + "UserDefinedRole" );
    
    public static final ObjectProperty USER_DEFINED_TARGET_VIEW = m_model.createObjectProperty( NS + "UserDefinedTargetView" );
    
    public static final ObjectProperty USER_DEFINED_THERMAL_LOAD_SOURCE = m_model.createObjectProperty( NS + "UserDefinedThermalLoadSource" );
    
    public static final ObjectProperty USER_DEFINED_TYPE = m_model.createObjectProperty( NS + "UserDefinedType" );
    
    public static final ObjectProperty USING_CURVES = m_model.createObjectProperty( NS + "UsingCurves" );
    
    public static final ObjectProperty V1 = m_model.createObjectProperty( NS + "V1" );
    
    public static final ObjectProperty V2 = m_model.createObjectProperty( NS + "V2" );
    
    public static final ObjectProperty VAXES = m_model.createObjectProperty( NS + "VAxes" );
    
    public static final ObjectProperty VALID_FROM = m_model.createObjectProperty( NS + "ValidFrom" );
    
    public static final ObjectProperty VALID_UNTIL = m_model.createObjectProperty( NS + "ValidUntil" );
    
    public static final ObjectProperty VALUE_COMPONENT = m_model.createObjectProperty( NS + "ValueComponent" );
    
    public static final ObjectProperty VALUE_OF_COMPONENTS = m_model.createObjectProperty( NS + "ValueOfComponents" );
    
    public static final ObjectProperty VALUE_SOURCE = m_model.createObjectProperty( NS + "ValueSource" );
    
    public static final ObjectProperty VALUES = m_model.createObjectProperty( NS + "Values" );
    
    public static final ObjectProperty VALUES_REFERENCED = m_model.createObjectProperty( NS + "ValuesReferenced" );
    
    public static final ObjectProperty VAPOR_PERMEABILITY = m_model.createObjectProperty( NS + "VaporPermeability" );
    
    public static final ObjectProperty VARYING_APPLIED_LOAD_LOCATION = m_model.createObjectProperty( NS + "VaryingAppliedLoadLocation" );
    
    public static final ObjectProperty VARYING_THICKNESS_LOCATION = m_model.createObjectProperty( NS + "VaryingThicknessLocation" );
    
    public static final ObjectProperty VELOCITY_SINGLE_VALUE = m_model.createObjectProperty( NS + "VelocitySingleValue" );
    
    public static final ObjectProperty VELOCITY_TIME_SERIES = m_model.createObjectProperty( NS + "VelocityTimeSeries" );
    
    public static final ObjectProperty VERSION = m_model.createObjectProperty( NS + "Version" );
    
    public static final ObjectProperty VERSION_DATE = m_model.createObjectProperty( NS + "VersionDate" );
    
    public static final ObjectProperty VERTEX_GEOMETRY = m_model.createObjectProperty( NS + "VertexGeometry" );
    
    public static final ObjectProperty VISIBLE_REFLECTANCE_BACK = m_model.createObjectProperty( NS + "VisibleReflectanceBack" );
    
    public static final ObjectProperty VISIBLE_REFLECTANCE_FRONT = m_model.createObjectProperty( NS + "VisibleReflectanceFront" );
    
    public static final ObjectProperty VISIBLE_SEGMENT_LENGTH = m_model.createObjectProperty( NS + "VisibleSegmentLength" );
    
    public static final ObjectProperty VISIBLE_TRANSMITTANCE = m_model.createObjectProperty( NS + "VisibleTransmittance" );
    
    public static final ObjectProperty VOIDS = m_model.createObjectProperty( NS + "Voids" );
    
    public static final ObjectProperty VOIDS_ELEMENTS = m_model.createObjectProperty( NS + "VoidsElements" );
    
    public static final ObjectProperty VOLUME_VALUE = m_model.createObjectProperty( NS + "VolumeValue" );
    
    public static final ObjectProperty VSENSE = m_model.createObjectProperty( NS + "Vsense" );
    
    public static final ObjectProperty WAXES = m_model.createObjectProperty( NS + "WAxes" );
    
    public static final ObjectProperty WWWHOME_PAGE_URL = m_model.createObjectProperty( NS + "WWWHomePageURL" );
    
    public static final ObjectProperty WALL_THICKNESS = m_model.createObjectProperty( NS + "WallThickness" );
    
    public static final ObjectProperty WARPING_CONSTANT = m_model.createObjectProperty( NS + "WarpingConstant" );
    
    public static final ObjectProperty WARPING_MOMENT = m_model.createObjectProperty( NS + "WarpingMoment" );
    
    public static final ObjectProperty WARPING_STIFFNESS = m_model.createObjectProperty( NS + "WarpingStiffness" );
    
    public static final ObjectProperty WATER_IMPERMEABILITY = m_model.createObjectProperty( NS + "WaterImpermeability" );
    
    public static final ObjectProperty WEB_EDGE_RADIUS = m_model.createObjectProperty( NS + "WebEdgeRadius" );
    
    public static final ObjectProperty WEB_SLOPE = m_model.createObjectProperty( NS + "WebSlope" );
    
    public static final ObjectProperty WEB_THICKNESS = m_model.createObjectProperty( NS + "WebThickness" );
    
    public static final ObjectProperty WEIGHT_VALUE = m_model.createObjectProperty( NS + "WeightValue" );
    
    public static final ObjectProperty WEIGHTS_DATA = m_model.createObjectProperty( NS + "WeightsData" );
    
    public static final ObjectProperty WET_BULB_TEMPERATURE_SINGLE_VALUE = m_model.createObjectProperty( NS + "WetBulbTemperatureSingleValue" );
    
    public static final ObjectProperty WET_BULB_TEMPERATURE_TIME_SERIES = m_model.createObjectProperty( NS + "WetBulbTemperatureTimeSeries" );
    
    public static final ObjectProperty WIDTH = m_model.createObjectProperty( NS + "Width" );
    
    public static final ObjectProperty WORD_SPACING = m_model.createObjectProperty( NS + "WordSpacing" );
    
    public static final ObjectProperty WORK_METHOD = m_model.createObjectProperty( NS + "WorkMethod" );
    
    public static final ObjectProperty WORKABILITY = m_model.createObjectProperty( NS + "Workability" );
    
    public static final ObjectProperty WORLD_COORDINATE_SYSTEM = m_model.createObjectProperty( NS + "WorldCoordinateSystem" );
    
    public static final ObjectProperty XDIM = m_model.createObjectProperty( NS + "XDim" );
    
    public static final ObjectProperty XLENGTH = m_model.createObjectProperty( NS + "XLength" );
    
    public static final ObjectProperty YDIM = m_model.createObjectProperty( NS + "YDim" );
    
    public static final ObjectProperty YLENGTH = m_model.createObjectProperty( NS + "YLength" );
    
    public static final ObjectProperty YEAR_COMPONENT = m_model.createObjectProperty( NS + "YearComponent" );
    
    public static final ObjectProperty YIELD_STRESS = m_model.createObjectProperty( NS + "YieldStress" );
    
    public static final ObjectProperty YOUNG_MODULUS = m_model.createObjectProperty( NS + "YoungModulus" );
    
    public static final ObjectProperty ZDIM = m_model.createObjectProperty( NS + "ZDim" );
    
    public static final ObjectProperty ZLENGTH = m_model.createObjectProperty( NS + "ZLength" );
    
    public static final ObjectProperty ZONE = m_model.createObjectProperty( NS + "Zone" );
    
    public static final DatatypeProperty BOOLEAN_VALUE = m_model.createDatatypeProperty( NS + "BooleanValue" );
    
    public static final DatatypeProperty DOUBLE_VALUE = m_model.createDatatypeProperty( NS + "DoubleValue" );
    
    public static final DatatypeProperty FLOAT_VALUE = m_model.createDatatypeProperty( NS + "FloatValue" );
    
    public static final DatatypeProperty IFC_ACTION_SOURCE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcActionSourceTypeEnum" );
    
    public static final DatatypeProperty IFC_ACTION_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcActionTypeEnum" );
    
    public static final DatatypeProperty IFC_ACTUATOR_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcActuatorTypeEnum" );
    
    public static final DatatypeProperty IFC_ADDRESS_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcAddressTypeEnum" );
    
    public static final DatatypeProperty IFC_AHEAD_OR_BEHIND = m_model.createDatatypeProperty( NS + "IfcAheadOrBehind" );
    
    public static final DatatypeProperty IFC_AIR_TERMINAL_BOX_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcAirTerminalBoxTypeEnum" );
    
    public static final DatatypeProperty IFC_AIR_TERMINAL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcAirTerminalTypeEnum" );
    
    public static final DatatypeProperty IFC_AIR_TO_AIR_HEAT_RECOVERY_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcAirToAirHeatRecoveryTypeEnum" );
    
    public static final DatatypeProperty IFC_ALARM_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcAlarmTypeEnum" );
    
    public static final DatatypeProperty IFC_ANALYSIS_MODEL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcAnalysisModelTypeEnum" );
    
    public static final DatatypeProperty IFC_ANALYSIS_THEORY_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcAnalysisTheoryTypeEnum" );
    
    public static final DatatypeProperty IFC_ARITHMETIC_OPERATOR_ENUM = m_model.createDatatypeProperty( NS + "IfcArithmeticOperatorEnum" );
    
    public static final DatatypeProperty IFC_ASSEMBLY_PLACE_ENUM = m_model.createDatatypeProperty( NS + "IfcAssemblyPlaceEnum" );
    
    public static final DatatypeProperty IFC_BSPLINE_CURVE_FORM = m_model.createDatatypeProperty( NS + "IfcBSplineCurveForm" );
    
    public static final DatatypeProperty IFC_BEAM_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcBeamTypeEnum" );
    
    public static final DatatypeProperty IFC_BENCHMARK_ENUM = m_model.createDatatypeProperty( NS + "IfcBenchmarkEnum" );
    
    public static final DatatypeProperty IFC_BOILER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcBoilerTypeEnum" );
    
    public static final DatatypeProperty IFC_BOOLEAN_OPERATOR = m_model.createDatatypeProperty( NS + "IfcBooleanOperator" );
    
    public static final DatatypeProperty IFC_BUILDING_ELEMENT_PROXY_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcBuildingElementProxyTypeEnum" );
    
    public static final DatatypeProperty IFC_CABLE_CARRIER_FITTING_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCableCarrierFittingTypeEnum" );
    
    public static final DatatypeProperty IFC_CABLE_CARRIER_SEGMENT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCableCarrierSegmentTypeEnum" );
    
    public static final DatatypeProperty IFC_CABLE_SEGMENT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCableSegmentTypeEnum" );
    
    public static final DatatypeProperty IFC_CHANGE_ACTION_ENUM = m_model.createDatatypeProperty( NS + "IfcChangeActionEnum" );
    
    public static final DatatypeProperty IFC_CHILLER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcChillerTypeEnum" );
    
    public static final DatatypeProperty IFC_COIL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCoilTypeEnum" );
    
    public static final DatatypeProperty IFC_COLUMN_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcColumnTypeEnum" );
    
    public static final DatatypeProperty IFC_COMPRESSOR_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCompressorTypeEnum" );
    
    public static final DatatypeProperty IFC_CONDENSER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCondenserTypeEnum" );
    
    public static final DatatypeProperty IFC_CONNECTION_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcConnectionTypeEnum" );
    
    public static final DatatypeProperty IFC_CONSTRAINT_ENUM = m_model.createDatatypeProperty( NS + "IfcConstraintEnum" );
    
    public static final DatatypeProperty IFC_CONTROLLER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcControllerTypeEnum" );
    
    public static final DatatypeProperty IFC_COOLED_BEAM_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCooledBeamTypeEnum" );
    
    public static final DatatypeProperty IFC_COOLING_TOWER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCoolingTowerTypeEnum" );
    
    public static final DatatypeProperty IFC_COST_SCHEDULE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCostScheduleTypeEnum" );
    
    public static final DatatypeProperty IFC_COVERING_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCoveringTypeEnum" );
    
    public static final DatatypeProperty IFC_CURRENCY_ENUM = m_model.createDatatypeProperty( NS + "IfcCurrencyEnum" );
    
    public static final DatatypeProperty IFC_CURTAIN_WALL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcCurtainWallTypeEnum" );
    
    public static final DatatypeProperty IFC_DAMPER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcDamperTypeEnum" );
    
    public static final DatatypeProperty IFC_DATA_ORIGIN_ENUM = m_model.createDatatypeProperty( NS + "IfcDataOriginEnum" );
    
    public static final DatatypeProperty IFC_DERIVED_UNIT_ENUM = m_model.createDatatypeProperty( NS + "IfcDerivedUnitEnum" );
    
    public static final DatatypeProperty IFC_DIMENSION_EXTENT_USAGE = m_model.createDatatypeProperty( NS + "IfcDimensionExtentUsage" );
    
    public static final DatatypeProperty IFC_DIRECTION_SENSE_ENUM = m_model.createDatatypeProperty( NS + "IfcDirectionSenseEnum" );
    
    public static final DatatypeProperty IFC_DISTRIBUTION_CHAMBER_ELEMENT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcDistributionChamberElementTypeEnum" );
    
    public static final DatatypeProperty IFC_DOCUMENT_CONFIDENTIALITY_ENUM = m_model.createDatatypeProperty( NS + "IfcDocumentConfidentialityEnum" );
    
    public static final DatatypeProperty IFC_DOCUMENT_STATUS_ENUM = m_model.createDatatypeProperty( NS + "IfcDocumentStatusEnum" );
    
    public static final DatatypeProperty IFC_DOOR_PANEL_OPERATION_ENUM = m_model.createDatatypeProperty( NS + "IfcDoorPanelOperationEnum" );
    
    public static final DatatypeProperty IFC_DOOR_PANEL_POSITION_ENUM = m_model.createDatatypeProperty( NS + "IfcDoorPanelPositionEnum" );
    
    public static final DatatypeProperty IFC_DOOR_STYLE_CONSTRUCTION_ENUM = m_model.createDatatypeProperty( NS + "IfcDoorStyleConstructionEnum" );
    
    public static final DatatypeProperty IFC_DOOR_STYLE_OPERATION_ENUM = m_model.createDatatypeProperty( NS + "IfcDoorStyleOperationEnum" );
    
    public static final DatatypeProperty IFC_DUCT_FITTING_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcDuctFittingTypeEnum" );
    
    public static final DatatypeProperty IFC_DUCT_SEGMENT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcDuctSegmentTypeEnum" );
    
    public static final DatatypeProperty IFC_DUCT_SILENCER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcDuctSilencerTypeEnum" );
    
    public static final DatatypeProperty IFC_ELECTRIC_APPLIANCE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcElectricApplianceTypeEnum" );
    
    public static final DatatypeProperty IFC_ELECTRIC_CURRENT_ENUM = m_model.createDatatypeProperty( NS + "IfcElectricCurrentEnum" );
    
    public static final DatatypeProperty IFC_ELECTRIC_DISTRIBUTION_POINT_FUNCTION_ENUM = m_model.createDatatypeProperty( NS + "IfcElectricDistributionPointFunctionEnum" );
    
    public static final DatatypeProperty IFC_ELECTRIC_FLOW_STORAGE_DEVICE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcElectricFlowStorageDeviceTypeEnum" );
    
    public static final DatatypeProperty IFC_ELECTRIC_GENERATOR_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcElectricGeneratorTypeEnum" );
    
    public static final DatatypeProperty IFC_ELECTRIC_HEATER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcElectricHeaterTypeEnum" );
    
    public static final DatatypeProperty IFC_ELECTRIC_MOTOR_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcElectricMotorTypeEnum" );
    
    public static final DatatypeProperty IFC_ELECTRIC_TIME_CONTROL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcElectricTimeControlTypeEnum" );
    
    public static final DatatypeProperty IFC_ELEMENT_ASSEMBLY_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcElementAssemblyTypeEnum" );
    
    public static final DatatypeProperty IFC_ELEMENT_COMPOSITION_ENUM = m_model.createDatatypeProperty( NS + "IfcElementCompositionEnum" );
    
    public static final DatatypeProperty IFC_ENERGY_SEQUENCE_ENUM = m_model.createDatatypeProperty( NS + "IfcEnergySequenceEnum" );
    
    public static final DatatypeProperty IFC_ENVIRONMENTAL_IMPACT_CATEGORY_ENUM = m_model.createDatatypeProperty( NS + "IfcEnvironmentalImpactCategoryEnum" );
    
    public static final DatatypeProperty IFC_EVAPORATIVE_COOLER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcEvaporativeCoolerTypeEnum" );
    
    public static final DatatypeProperty IFC_EVAPORATOR_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcEvaporatorTypeEnum" );
    
    public static final DatatypeProperty IFC_FAN_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcFanTypeEnum" );
    
    public static final DatatypeProperty IFC_FILTER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcFilterTypeEnum" );
    
    public static final DatatypeProperty IFC_FIRE_SUPPRESSION_TERMINAL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcFireSuppressionTerminalTypeEnum" );
    
    public static final DatatypeProperty IFC_FLOW_DIRECTION_ENUM = m_model.createDatatypeProperty( NS + "IfcFlowDirectionEnum" );
    
    public static final DatatypeProperty IFC_FLOW_INSTRUMENT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcFlowInstrumentTypeEnum" );
    
    public static final DatatypeProperty IFC_FLOW_METER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcFlowMeterTypeEnum" );
    
    public static final DatatypeProperty IFC_FOOTING_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcFootingTypeEnum" );
    
    public static final DatatypeProperty IFC_GAS_TERMINAL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcGasTerminalTypeEnum" );
    
    public static final DatatypeProperty IFC_GEOMETRIC_PROJECTION_ENUM = m_model.createDatatypeProperty( NS + "IfcGeometricProjectionEnum" );
    
    public static final DatatypeProperty IFC_GLOBAL_OR_LOCAL_ENUM = m_model.createDatatypeProperty( NS + "IfcGlobalOrLocalEnum" );
    
    public static final DatatypeProperty IFC_HEAT_EXCHANGER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcHeatExchangerTypeEnum" );
    
    public static final DatatypeProperty IFC_HUMIDIFIER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcHumidifierTypeEnum" );
    
    public static final DatatypeProperty IFC_INTERNAL_OR_EXTERNAL_ENUM = m_model.createDatatypeProperty( NS + "IfcInternalOrExternalEnum" );
    
    public static final DatatypeProperty IFC_INVENTORY_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcInventoryTypeEnum" );
    
    public static final DatatypeProperty IFC_JUNCTION_BOX_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcJunctionBoxTypeEnum" );
    
    public static final DatatypeProperty IFC_LAMP_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcLampTypeEnum" );
    
    public static final DatatypeProperty IFC_LAYER_SET_DIRECTION_ENUM = m_model.createDatatypeProperty( NS + "IfcLayerSetDirectionEnum" );
    
    public static final DatatypeProperty IFC_LIGHT_DISTRIBUTION_CURVE_ENUM = m_model.createDatatypeProperty( NS + "IfcLightDistributionCurveEnum" );
    
    public static final DatatypeProperty IFC_LIGHT_EMISSION_SOURCE_ENUM = m_model.createDatatypeProperty( NS + "IfcLightEmissionSourceEnum" );
    
    public static final DatatypeProperty IFC_LIGHT_FIXTURE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcLightFixtureTypeEnum" );
    
    public static final DatatypeProperty IFC_LOAD_GROUP_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcLoadGroupTypeEnum" );
    
    public static final DatatypeProperty IFC_LOGICAL_OPERATOR_ENUM = m_model.createDatatypeProperty( NS + "IfcLogicalOperatorEnum" );
    
    public static final DatatypeProperty IFC_MEMBER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcMemberTypeEnum" );
    
    public static final DatatypeProperty IFC_MOTOR_CONNECTION_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcMotorConnectionTypeEnum" );
    
    public static final DatatypeProperty IFC_NULL_STYLE = m_model.createDatatypeProperty( NS + "IfcNullStyle" );
    
    public static final DatatypeProperty IFC_OBJECT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcObjectTypeEnum" );
    
    public static final DatatypeProperty IFC_OBJECTIVE_ENUM = m_model.createDatatypeProperty( NS + "IfcObjectiveEnum" );
    
    public static final DatatypeProperty IFC_OCCUPANT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcOccupantTypeEnum" );
    
    public static final DatatypeProperty IFC_OUTLET_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcOutletTypeEnum" );
    
    public static final DatatypeProperty IFC_PERMEABLE_COVERING_OPERATION_ENUM = m_model.createDatatypeProperty( NS + "IfcPermeableCoveringOperationEnum" );
    
    public static final DatatypeProperty IFC_PHYSICAL_OR_VIRTUAL_ENUM = m_model.createDatatypeProperty( NS + "IfcPhysicalOrVirtualEnum" );
    
    public static final DatatypeProperty IFC_PILE_CONSTRUCTION_ENUM = m_model.createDatatypeProperty( NS + "IfcPileConstructionEnum" );
    
    public static final DatatypeProperty IFC_PILE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcPileTypeEnum" );
    
    public static final DatatypeProperty IFC_PIPE_FITTING_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcPipeFittingTypeEnum" );
    
    public static final DatatypeProperty IFC_PIPE_SEGMENT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcPipeSegmentTypeEnum" );
    
    public static final DatatypeProperty IFC_PLATE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcPlateTypeEnum" );
    
    public static final DatatypeProperty IFC_PROCEDURE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcProcedureTypeEnum" );
    
    public static final DatatypeProperty IFC_PROFILE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcProfileTypeEnum" );
    
    public static final DatatypeProperty IFC_PROJECT_ORDER_RECORD_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcProjectOrderRecordTypeEnum" );
    
    public static final DatatypeProperty IFC_PROJECT_ORDER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcProjectOrderTypeEnum" );
    
    public static final DatatypeProperty IFC_PROJECTED_OR_TRUE_LENGTH_ENUM = m_model.createDatatypeProperty( NS + "IfcProjectedOrTrueLengthEnum" );
    
    public static final DatatypeProperty IFC_PROPERTY_SOURCE_ENUM = m_model.createDatatypeProperty( NS + "IfcPropertySourceEnum" );
    
    public static final DatatypeProperty IFC_PROTECTIVE_DEVICE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcProtectiveDeviceTypeEnum" );
    
    public static final DatatypeProperty IFC_PUMP_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcPumpTypeEnum" );
    
    public static final DatatypeProperty IFC_RAILING_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcRailingTypeEnum" );
    
    public static final DatatypeProperty IFC_RAMP_FLIGHT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcRampFlightTypeEnum" );
    
    public static final DatatypeProperty IFC_RAMP_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcRampTypeEnum" );
    
    public static final DatatypeProperty IFC_REFLECTANCE_METHOD_ENUM = m_model.createDatatypeProperty( NS + "IfcReflectanceMethodEnum" );
    
    public static final DatatypeProperty IFC_REINFORCING_BAR_ROLE_ENUM = m_model.createDatatypeProperty( NS + "IfcReinforcingBarRoleEnum" );
    
    public static final DatatypeProperty IFC_REINFORCING_BAR_SURFACE_ENUM = m_model.createDatatypeProperty( NS + "IfcReinforcingBarSurfaceEnum" );
    
    public static final DatatypeProperty IFC_RESOURCE_CONSUMPTION_ENUM = m_model.createDatatypeProperty( NS + "IfcResourceConsumptionEnum" );
    
    public static final DatatypeProperty IFC_RIB_PLATE_DIRECTION_ENUM = m_model.createDatatypeProperty( NS + "IfcRibPlateDirectionEnum" );
    
    public static final DatatypeProperty IFC_ROLE_ENUM = m_model.createDatatypeProperty( NS + "IfcRoleEnum" );
    
    public static final DatatypeProperty IFC_ROOF_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcRoofTypeEnum" );
    
    public static final DatatypeProperty IFC_SIPREFIX = m_model.createDatatypeProperty( NS + "IfcSIPrefix" );
    
    public static final DatatypeProperty IFC_SIUNIT_NAME = m_model.createDatatypeProperty( NS + "IfcSIUnitName" );
    
    public static final DatatypeProperty IFC_SANITARY_TERMINAL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcSanitaryTerminalTypeEnum" );
    
    public static final DatatypeProperty IFC_SECTION_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcSectionTypeEnum" );
    
    public static final DatatypeProperty IFC_SENSOR_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcSensorTypeEnum" );
    
    public static final DatatypeProperty IFC_SEQUENCE_ENUM = m_model.createDatatypeProperty( NS + "IfcSequenceEnum" );
    
    public static final DatatypeProperty IFC_SERVICE_LIFE_FACTOR_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcServiceLifeFactorTypeEnum" );
    
    public static final DatatypeProperty IFC_SERVICE_LIFE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcServiceLifeTypeEnum" );
    
    public static final DatatypeProperty IFC_SLAB_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcSlabTypeEnum" );
    
    public static final DatatypeProperty IFC_SOUND_SCALE_ENUM = m_model.createDatatypeProperty( NS + "IfcSoundScaleEnum" );
    
    public static final DatatypeProperty IFC_SPACE_HEATER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcSpaceHeaterTypeEnum" );
    
    public static final DatatypeProperty IFC_SPACE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcSpaceTypeEnum" );
    
    public static final DatatypeProperty IFC_STACK_TERMINAL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcStackTerminalTypeEnum" );
    
    public static final DatatypeProperty IFC_STAIR_FLIGHT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcStairFlightTypeEnum" );
    
    public static final DatatypeProperty IFC_STAIR_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcStairTypeEnum" );
    
    public static final DatatypeProperty IFC_STATE_ENUM = m_model.createDatatypeProperty( NS + "IfcStateEnum" );
    
    public static final DatatypeProperty IFC_STRUCTURAL_CURVE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcStructuralCurveTypeEnum" );
    
    public static final DatatypeProperty IFC_STRUCTURAL_SURFACE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcStructuralSurfaceTypeEnum" );
    
    public static final DatatypeProperty IFC_SURFACE_SIDE = m_model.createDatatypeProperty( NS + "IfcSurfaceSide" );
    
    public static final DatatypeProperty IFC_SURFACE_TEXTURE_ENUM = m_model.createDatatypeProperty( NS + "IfcSurfaceTextureEnum" );
    
    public static final DatatypeProperty IFC_SWITCHING_DEVICE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcSwitchingDeviceTypeEnum" );
    
    public static final DatatypeProperty IFC_TANK_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcTankTypeEnum" );
    
    public static final DatatypeProperty IFC_TENDON_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcTendonTypeEnum" );
    
    public static final DatatypeProperty IFC_TEXT_PATH = m_model.createDatatypeProperty( NS + "IfcTextPath" );
    
    public static final DatatypeProperty IFC_THERMAL_LOAD_SOURCE_ENUM = m_model.createDatatypeProperty( NS + "IfcThermalLoadSourceEnum" );
    
    public static final DatatypeProperty IFC_THERMAL_LOAD_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcThermalLoadTypeEnum" );
    
    public static final DatatypeProperty IFC_TIME_SERIES_DATA_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcTimeSeriesDataTypeEnum" );
    
    public static final DatatypeProperty IFC_TIME_SERIES_SCHEDULE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcTimeSeriesScheduleTypeEnum" );
    
    public static final DatatypeProperty IFC_TRANSFORMER_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcTransformerTypeEnum" );
    
    public static final DatatypeProperty IFC_TRANSITION_CODE = m_model.createDatatypeProperty( NS + "IfcTransitionCode" );
    
    public static final DatatypeProperty IFC_TRANSPORT_ELEMENT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcTransportElementTypeEnum" );
    
    public static final DatatypeProperty IFC_TRIMMING_PREFERENCE = m_model.createDatatypeProperty( NS + "IfcTrimmingPreference" );
    
    public static final DatatypeProperty IFC_TUBE_BUNDLE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcTubeBundleTypeEnum" );
    
    public static final DatatypeProperty IFC_UNIT_ENUM = m_model.createDatatypeProperty( NS + "IfcUnitEnum" );
    
    public static final DatatypeProperty IFC_UNITARY_EQUIPMENT_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcUnitaryEquipmentTypeEnum" );
    
    public static final DatatypeProperty IFC_VALVE_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcValveTypeEnum" );
    
    public static final DatatypeProperty IFC_VIBRATION_ISOLATOR_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcVibrationIsolatorTypeEnum" );
    
    public static final DatatypeProperty IFC_WALL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcWallTypeEnum" );
    
    public static final DatatypeProperty IFC_WASTE_TERMINAL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcWasteTerminalTypeEnum" );
    
    public static final DatatypeProperty IFC_WINDOW_PANEL_OPERATION_ENUM = m_model.createDatatypeProperty( NS + "IfcWindowPanelOperationEnum" );
    
    public static final DatatypeProperty IFC_WINDOW_PANEL_POSITION_ENUM = m_model.createDatatypeProperty( NS + "IfcWindowPanelPositionEnum" );
    
    public static final DatatypeProperty IFC_WINDOW_STYLE_CONSTRUCTION_ENUM = m_model.createDatatypeProperty( NS + "IfcWindowStyleConstructionEnum" );
    
    public static final DatatypeProperty IFC_WINDOW_STYLE_OPERATION_ENUM = m_model.createDatatypeProperty( NS + "IfcWindowStyleOperationEnum" );
    
    public static final DatatypeProperty IFC_WORK_CONTROL_TYPE_ENUM = m_model.createDatatypeProperty( NS + "IfcWorkControlTypeEnum" );
    
    public static final DatatypeProperty INTEGER_VALUE = m_model.createDatatypeProperty( NS + "IntegerValue" );
    
    public static final DatatypeProperty STRING_VALUE = m_model.createDatatypeProperty( NS + "StringValue" );
    

    // Vocabulary classes
    ///////////////////////////

    public static final OntClass DUMMY_CLASS = m_model.createClass( NS + "DummyClass" );
    
    public static final OntClass IFC2DCOMPOSITE_CURVE = m_model.createClass( NS + "Ifc2DCompositeCurve" );
    
    public static final OntClass IFC_ABSORBED_DOSE_MEASURE = m_model.createClass( NS + "IfcAbsorbedDoseMeasure" );
    
    public static final OntClass IFC_ABSORBED_DOSE_MEASURE_LIST = m_model.createClass( NS + "IfcAbsorbedDoseMeasureList" );
    
    public static final OntClass IFC_ACCELERATION_MEASURE = m_model.createClass( NS + "IfcAccelerationMeasure" );
    
    public static final OntClass IFC_ACCELERATION_MEASURE_LIST = m_model.createClass( NS + "IfcAccelerationMeasureList" );
    
    public static final OntClass IFC_ACTION_REQUEST = m_model.createClass( NS + "IfcActionRequest" );
    
    public static final OntClass IFC_ACTOR = m_model.createClass( NS + "IfcActor" );
    
    public static final OntClass IFC_ACTOR_ROLE = m_model.createClass( NS + "IfcActorRole" );
    
    public static final OntClass IFC_ACTUATOR_TYPE = m_model.createClass( NS + "IfcActuatorType" );
    
    public static final OntClass IFC_ADDRESS = m_model.createClass( NS + "IfcAddress" );
    
    public static final OntClass IFC_AIR_TERMINAL_BOX_TYPE = m_model.createClass( NS + "IfcAirTerminalBoxType" );
    
    public static final OntClass IFC_AIR_TERMINAL_TYPE = m_model.createClass( NS + "IfcAirTerminalType" );
    
    public static final OntClass IFC_AIR_TO_AIR_HEAT_RECOVERY_TYPE = m_model.createClass( NS + "IfcAirToAirHeatRecoveryType" );
    
    public static final OntClass IFC_ALARM_TYPE = m_model.createClass( NS + "IfcAlarmType" );
    
    public static final OntClass IFC_AMOUNT_OF_SUBSTANCE_MEASURE = m_model.createClass( NS + "IfcAmountOfSubstanceMeasure" );
    
    public static final OntClass IFC_AMOUNT_OF_SUBSTANCE_MEASURE_LIST = m_model.createClass( NS + "IfcAmountOfSubstanceMeasureList" );
    
    public static final OntClass IFC_ANGULAR_DIMENSION = m_model.createClass( NS + "IfcAngularDimension" );
    
    public static final OntClass IFC_ANGULAR_VELOCITY_MEASURE = m_model.createClass( NS + "IfcAngularVelocityMeasure" );
    
    public static final OntClass IFC_ANGULAR_VELOCITY_MEASURE_LIST = m_model.createClass( NS + "IfcAngularVelocityMeasureList" );
    
    public static final OntClass IFC_ANNOTATION = m_model.createClass( NS + "IfcAnnotation" );
    
    public static final OntClass IFC_ANNOTATION_CURVE_OCCURRENCE = m_model.createClass( NS + "IfcAnnotationCurveOccurrence" );
    
    public static final OntClass IFC_ANNOTATION_FILL_AREA = m_model.createClass( NS + "IfcAnnotationFillArea" );
    
    public static final OntClass IFC_ANNOTATION_FILL_AREA_OCCURRENCE = m_model.createClass( NS + "IfcAnnotationFillAreaOccurrence" );
    
    public static final OntClass IFC_ANNOTATION_OCCURRENCE = m_model.createClass( NS + "IfcAnnotationOccurrence" );
    
    public static final OntClass IFC_ANNOTATION_SURFACE = m_model.createClass( NS + "IfcAnnotationSurface" );
    
    public static final OntClass IFC_ANNOTATION_SURFACE_OCCURRENCE = m_model.createClass( NS + "IfcAnnotationSurfaceOccurrence" );
    
    public static final OntClass IFC_ANNOTATION_SYMBOL_OCCURRENCE = m_model.createClass( NS + "IfcAnnotationSymbolOccurrence" );
    
    public static final OntClass IFC_ANNOTATION_TEXT_OCCURRENCE = m_model.createClass( NS + "IfcAnnotationTextOccurrence" );
    
    public static final OntClass IFC_APPLICATION = m_model.createClass( NS + "IfcApplication" );
    
    public static final OntClass IFC_APPLIED_VALUE = m_model.createClass( NS + "IfcAppliedValue" );
    
    public static final OntClass IFC_APPLIED_VALUE_RELATIONSHIP = m_model.createClass( NS + "IfcAppliedValueRelationship" );
    
    public static final OntClass IFC_APPROVAL = m_model.createClass( NS + "IfcApproval" );
    
    public static final OntClass IFC_APPROVAL_ACTOR_RELATIONSHIP = m_model.createClass( NS + "IfcApprovalActorRelationship" );
    
    public static final OntClass IFC_APPROVAL_PROPERTY_RELATIONSHIP = m_model.createClass( NS + "IfcApprovalPropertyRelationship" );
    
    public static final OntClass IFC_APPROVAL_RELATIONSHIP = m_model.createClass( NS + "IfcApprovalRelationship" );
    
    public static final OntClass IFC_ARBITRARY_CLOSED_PROFILE_DEF = m_model.createClass( NS + "IfcArbitraryClosedProfileDef" );
    
    public static final OntClass IFC_ARBITRARY_OPEN_PROFILE_DEF = m_model.createClass( NS + "IfcArbitraryOpenProfileDef" );
    
    public static final OntClass IFC_ARBITRARY_PROFILE_DEF_WITH_VOIDS = m_model.createClass( NS + "IfcArbitraryProfileDefWithVoids" );
    
    public static final OntClass IFC_AREA_MEASURE = m_model.createClass( NS + "IfcAreaMeasure" );
    
    public static final OntClass IFC_AREA_MEASURE_LIST = m_model.createClass( NS + "IfcAreaMeasureList" );
    
    public static final OntClass IFC_ASSET = m_model.createClass( NS + "IfcAsset" );
    
    public static final OntClass IFC_ASYMMETRIC_ISHAPE_PROFILE_DEF = m_model.createClass( NS + "IfcAsymmetricIShapeProfileDef" );
    
    public static final OntClass IFC_AXIS1PLACEMENT = m_model.createClass( NS + "IfcAxis1Placement" );
    
    public static final OntClass IFC_AXIS2PLACEMENT2D = m_model.createClass( NS + "IfcAxis2Placement2D" );
    
    public static final OntClass IFC_AXIS2PLACEMENT3D = m_model.createClass( NS + "IfcAxis2Placement3D" );
    
    public static final OntClass IFC_BSPLINE_CURVE = m_model.createClass( NS + "IfcBSplineCurve" );
    
    public static final OntClass IFC_BEAM = m_model.createClass( NS + "IfcBeam" );
    
    public static final OntClass IFC_BEAM_TYPE = m_model.createClass( NS + "IfcBeamType" );
    
    public static final OntClass IFC_BEZIER_CURVE = m_model.createClass( NS + "IfcBezierCurve" );
    
    public static final OntClass IFC_BLOB_TEXTURE = m_model.createClass( NS + "IfcBlobTexture" );
    
    public static final OntClass IFC_BLOCK = m_model.createClass( NS + "IfcBlock" );
    
    public static final OntClass IFC_BOILER_TYPE = m_model.createClass( NS + "IfcBoilerType" );
    
    public static final OntClass IFC_BOOLEAN = m_model.createClass( NS + "IfcBoolean" );
    
    public static final OntClass IFC_BOOLEAN_CLIPPING_RESULT = m_model.createClass( NS + "IfcBooleanClippingResult" );
    
    public static final OntClass IFC_BOOLEAN_LIST = m_model.createClass( NS + "IfcBooleanList" );
    
    public static final OntClass IFC_BOOLEAN_RESULT = m_model.createClass( NS + "IfcBooleanResult" );
    
    public static final OntClass IFC_BOUNDARY_CONDITION = m_model.createClass( NS + "IfcBoundaryCondition" );
    
    public static final OntClass IFC_BOUNDARY_EDGE_CONDITION = m_model.createClass( NS + "IfcBoundaryEdgeCondition" );
    
    public static final OntClass IFC_BOUNDARY_FACE_CONDITION = m_model.createClass( NS + "IfcBoundaryFaceCondition" );
    
    public static final OntClass IFC_BOUNDARY_NODE_CONDITION = m_model.createClass( NS + "IfcBoundaryNodeCondition" );
    
    public static final OntClass IFC_BOUNDARY_NODE_CONDITION_WARPING = m_model.createClass( NS + "IfcBoundaryNodeConditionWarping" );
    
    public static final OntClass IFC_BOUNDED_CURVE = m_model.createClass( NS + "IfcBoundedCurve" );
    
    public static final OntClass IFC_BOUNDED_SURFACE = m_model.createClass( NS + "IfcBoundedSurface" );
    
    public static final OntClass IFC_BOUNDING_BOX = m_model.createClass( NS + "IfcBoundingBox" );
    
    public static final OntClass IFC_BOX_ALIGNMENT = m_model.createClass( NS + "IfcBoxAlignment" );
    
    public static final OntClass IFC_BOXED_HALF_SPACE = m_model.createClass( NS + "IfcBoxedHalfSpace" );
    
    public static final OntClass IFC_BUILDING = m_model.createClass( NS + "IfcBuilding" );
    
    public static final OntClass IFC_BUILDING_ELEMENT = m_model.createClass( NS + "IfcBuildingElement" );
    
    public static final OntClass IFC_BUILDING_ELEMENT_COMPONENT = m_model.createClass( NS + "IfcBuildingElementComponent" );
    
    public static final OntClass IFC_BUILDING_ELEMENT_PART = m_model.createClass( NS + "IfcBuildingElementPart" );
    
    public static final OntClass IFC_BUILDING_ELEMENT_PROXY = m_model.createClass( NS + "IfcBuildingElementProxy" );
    
    public static final OntClass IFC_BUILDING_ELEMENT_PROXY_TYPE = m_model.createClass( NS + "IfcBuildingElementProxyType" );
    
    public static final OntClass IFC_BUILDING_ELEMENT_TYPE = m_model.createClass( NS + "IfcBuildingElementType" );
    
    public static final OntClass IFC_BUILDING_STOREY = m_model.createClass( NS + "IfcBuildingStorey" );
    
    public static final OntClass IFC_CSHAPE_PROFILE_DEF = m_model.createClass( NS + "IfcCShapeProfileDef" );
    
    public static final OntClass IFC_CABLE_CARRIER_FITTING_TYPE = m_model.createClass( NS + "IfcCableCarrierFittingType" );
    
    public static final OntClass IFC_CABLE_CARRIER_SEGMENT_TYPE = m_model.createClass( NS + "IfcCableCarrierSegmentType" );
    
    public static final OntClass IFC_CABLE_SEGMENT_TYPE = m_model.createClass( NS + "IfcCableSegmentType" );
    
    public static final OntClass IFC_CALENDAR_DATE = m_model.createClass( NS + "IfcCalendarDate" );
    
    public static final OntClass IFC_CARTESIAN_POINT = m_model.createClass( NS + "IfcCartesianPoint" );
    
    public static final OntClass IFC_CARTESIAN_TRANSFORMATION_OPERATOR = m_model.createClass( NS + "IfcCartesianTransformationOperator" );
    
    public static final OntClass IFC_CARTESIAN_TRANSFORMATION_OPERATOR2D = m_model.createClass( NS + "IfcCartesianTransformationOperator2D" );
    
    public static final OntClass IFC_CARTESIAN_TRANSFORMATION_OPERATOR2DNON_UNIFORM = m_model.createClass( NS + "IfcCartesianTransformationOperator2DnonUniform" );
    
    public static final OntClass IFC_CARTESIAN_TRANSFORMATION_OPERATOR3D = m_model.createClass( NS + "IfcCartesianTransformationOperator3D" );
    
    public static final OntClass IFC_CARTESIAN_TRANSFORMATION_OPERATOR3DNON_UNIFORM = m_model.createClass( NS + "IfcCartesianTransformationOperator3DnonUniform" );
    
    public static final OntClass IFC_CENTER_LINE_PROFILE_DEF = m_model.createClass( NS + "IfcCenterLineProfileDef" );
    
    public static final OntClass IFC_CHAMFER_EDGE_FEATURE = m_model.createClass( NS + "IfcChamferEdgeFeature" );
    
    public static final OntClass IFC_CHILLER_TYPE = m_model.createClass( NS + "IfcChillerType" );
    
    public static final OntClass IFC_CIRCLE = m_model.createClass( NS + "IfcCircle" );
    
    public static final OntClass IFC_CIRCLE_HOLLOW_PROFILE_DEF = m_model.createClass( NS + "IfcCircleHollowProfileDef" );
    
    public static final OntClass IFC_CIRCLE_PROFILE_DEF = m_model.createClass( NS + "IfcCircleProfileDef" );
    
    public static final OntClass IFC_CLASSIFICATION = m_model.createClass( NS + "IfcClassification" );
    
    public static final OntClass IFC_CLASSIFICATION_ITEM = m_model.createClass( NS + "IfcClassificationItem" );
    
    public static final OntClass IFC_CLASSIFICATION_ITEM_RELATIONSHIP = m_model.createClass( NS + "IfcClassificationItemRelationship" );
    
    public static final OntClass IFC_CLASSIFICATION_NOTATION = m_model.createClass( NS + "IfcClassificationNotation" );
    
    public static final OntClass IFC_CLASSIFICATION_NOTATION_FACET = m_model.createClass( NS + "IfcClassificationNotationFacet" );
    
    public static final OntClass IFC_CLASSIFICATION_REFERENCE = m_model.createClass( NS + "IfcClassificationReference" );
    
    public static final OntClass IFC_CLOSED_SHELL = m_model.createClass( NS + "IfcClosedShell" );
    
    public static final OntClass IFC_COIL_TYPE = m_model.createClass( NS + "IfcCoilType" );
    
    public static final OntClass IFC_COLOUR_RGB = m_model.createClass( NS + "IfcColourRgb" );
    
    public static final OntClass IFC_COLOUR_SPECIFICATION = m_model.createClass( NS + "IfcColourSpecification" );
    
    public static final OntClass IFC_COLUMN = m_model.createClass( NS + "IfcColumn" );
    
    public static final OntClass IFC_COLUMN_TYPE = m_model.createClass( NS + "IfcColumnType" );
    
    public static final OntClass IFC_COMPLEX_NUMBER = m_model.createClass( NS + "IfcComplexNumber" );
    
    public static final OntClass IFC_COMPLEX_PROPERTY = m_model.createClass( NS + "IfcComplexProperty" );
    
    public static final OntClass IFC_COMPOSITE_CURVE = m_model.createClass( NS + "IfcCompositeCurve" );
    
    public static final OntClass IFC_COMPOSITE_CURVE_SEGMENT = m_model.createClass( NS + "IfcCompositeCurveSegment" );
    
    public static final OntClass IFC_COMPOSITE_PROFILE_DEF = m_model.createClass( NS + "IfcCompositeProfileDef" );
    
    public static final OntClass IFC_COMPOUND_PLANE_ANGLE_MEASURE = m_model.createClass( NS + "IfcCompoundPlaneAngleMeasure" );
    
    public static final OntClass IFC_COMPRESSOR_TYPE = m_model.createClass( NS + "IfcCompressorType" );
    
    public static final OntClass IFC_CONDENSER_TYPE = m_model.createClass( NS + "IfcCondenserType" );
    
    public static final OntClass IFC_CONDITION = m_model.createClass( NS + "IfcCondition" );
    
    public static final OntClass IFC_CONDITION_CRITERION = m_model.createClass( NS + "IfcConditionCriterion" );
    
    public static final OntClass IFC_CONIC = m_model.createClass( NS + "IfcConic" );
    
    public static final OntClass IFC_CONNECTED_FACE_SET = m_model.createClass( NS + "IfcConnectedFaceSet" );
    
    public static final OntClass IFC_CONNECTION_CURVE_GEOMETRY = m_model.createClass( NS + "IfcConnectionCurveGeometry" );
    
    public static final OntClass IFC_CONNECTION_GEOMETRY = m_model.createClass( NS + "IfcConnectionGeometry" );
    
    public static final OntClass IFC_CONNECTION_POINT_ECCENTRICITY = m_model.createClass( NS + "IfcConnectionPointEccentricity" );
    
    public static final OntClass IFC_CONNECTION_POINT_GEOMETRY = m_model.createClass( NS + "IfcConnectionPointGeometry" );
    
    public static final OntClass IFC_CONNECTION_PORT_GEOMETRY = m_model.createClass( NS + "IfcConnectionPortGeometry" );
    
    public static final OntClass IFC_CONNECTION_SURFACE_GEOMETRY = m_model.createClass( NS + "IfcConnectionSurfaceGeometry" );
    
    public static final OntClass IFC_CONSTRAINT = m_model.createClass( NS + "IfcConstraint" );
    
    public static final OntClass IFC_CONSTRAINT_AGGREGATION_RELATIONSHIP = m_model.createClass( NS + "IfcConstraintAggregationRelationship" );
    
    public static final OntClass IFC_CONSTRAINT_CLASSIFICATION_RELATIONSHIP = m_model.createClass( NS + "IfcConstraintClassificationRelationship" );
    
    public static final OntClass IFC_CONSTRAINT_RELATIONSHIP = m_model.createClass( NS + "IfcConstraintRelationship" );
    
    public static final OntClass IFC_CONSTRUCTION_EQUIPMENT_RESOURCE = m_model.createClass( NS + "IfcConstructionEquipmentResource" );
    
    public static final OntClass IFC_CONSTRUCTION_MATERIAL_RESOURCE = m_model.createClass( NS + "IfcConstructionMaterialResource" );
    
    public static final OntClass IFC_CONSTRUCTION_PRODUCT_RESOURCE = m_model.createClass( NS + "IfcConstructionProductResource" );
    
    public static final OntClass IFC_CONSTRUCTION_RESOURCE = m_model.createClass( NS + "IfcConstructionResource" );
    
    public static final OntClass IFC_CONTEXT_DEPENDENT_MEASURE = m_model.createClass( NS + "IfcContextDependentMeasure" );
    
    public static final OntClass IFC_CONTEXT_DEPENDENT_MEASURE_LIST = m_model.createClass( NS + "IfcContextDependentMeasureList" );
    
    public static final OntClass IFC_CONTEXT_DEPENDENT_UNIT = m_model.createClass( NS + "IfcContextDependentUnit" );
    
    public static final OntClass IFC_CONTROL = m_model.createClass( NS + "IfcControl" );
    
    public static final OntClass IFC_CONTROLLER_TYPE = m_model.createClass( NS + "IfcControllerType" );
    
    public static final OntClass IFC_CONVERSION_BASED_UNIT = m_model.createClass( NS + "IfcConversionBasedUnit" );
    
    public static final OntClass IFC_COOLED_BEAM_TYPE = m_model.createClass( NS + "IfcCooledBeamType" );
    
    public static final OntClass IFC_COOLING_TOWER_TYPE = m_model.createClass( NS + "IfcCoolingTowerType" );
    
    public static final OntClass IFC_COORDINATED_UNIVERSAL_TIME_OFFSET = m_model.createClass( NS + "IfcCoordinatedUniversalTimeOffset" );
    
    public static final OntClass IFC_COST_ITEM = m_model.createClass( NS + "IfcCostItem" );
    
    public static final OntClass IFC_COST_SCHEDULE = m_model.createClass( NS + "IfcCostSchedule" );
    
    public static final OntClass IFC_COST_VALUE = m_model.createClass( NS + "IfcCostValue" );
    
    public static final OntClass IFC_COUNT_MEASURE = m_model.createClass( NS + "IfcCountMeasure" );
    
    public static final OntClass IFC_COUNT_MEASURE_LIST = m_model.createClass( NS + "IfcCountMeasureList" );
    
    public static final OntClass IFC_COVERING = m_model.createClass( NS + "IfcCovering" );
    
    public static final OntClass IFC_COVERING_TYPE = m_model.createClass( NS + "IfcCoveringType" );
    
    public static final OntClass IFC_CRANE_RAIL_ASHAPE_PROFILE_DEF = m_model.createClass( NS + "IfcCraneRailAShapeProfileDef" );
    
    public static final OntClass IFC_CRANE_RAIL_FSHAPE_PROFILE_DEF = m_model.createClass( NS + "IfcCraneRailFShapeProfileDef" );
    
    public static final OntClass IFC_CREW_RESOURCE = m_model.createClass( NS + "IfcCrewResource" );
    
    public static final OntClass IFC_CSG_PRIMITIVE3D = m_model.createClass( NS + "IfcCsgPrimitive3D" );
    
    public static final OntClass IFC_CSG_SOLID = m_model.createClass( NS + "IfcCsgSolid" );
    
    public static final OntClass IFC_CURRENCY_RELATIONSHIP = m_model.createClass( NS + "IfcCurrencyRelationship" );
    
    public static final OntClass IFC_CURTAIN_WALL = m_model.createClass( NS + "IfcCurtainWall" );
    
    public static final OntClass IFC_CURTAIN_WALL_TYPE = m_model.createClass( NS + "IfcCurtainWallType" );
    
    public static final OntClass IFC_CURVATURE_MEASURE = m_model.createClass( NS + "IfcCurvatureMeasure" );
    
    public static final OntClass IFC_CURVATURE_MEASURE_LIST = m_model.createClass( NS + "IfcCurvatureMeasureList" );
    
    public static final OntClass IFC_CURVE = m_model.createClass( NS + "IfcCurve" );
    
    public static final OntClass IFC_CURVE_BOUNDED_PLANE = m_model.createClass( NS + "IfcCurveBoundedPlane" );
    
    public static final OntClass IFC_CURVE_STYLE = m_model.createClass( NS + "IfcCurveStyle" );
    
    public static final OntClass IFC_CURVE_STYLE_FONT = m_model.createClass( NS + "IfcCurveStyleFont" );
    
    public static final OntClass IFC_CURVE_STYLE_FONT_AND_SCALING = m_model.createClass( NS + "IfcCurveStyleFontAndScaling" );
    
    public static final OntClass IFC_CURVE_STYLE_FONT_PATTERN = m_model.createClass( NS + "IfcCurveStyleFontPattern" );
    
    public static final OntClass IFC_DAMPER_TYPE = m_model.createClass( NS + "IfcDamperType" );
    
    public static final OntClass IFC_DATE_AND_TIME = m_model.createClass( NS + "IfcDateAndTime" );
    
    public static final OntClass IFC_DAY_IN_MONTH_NUMBER = m_model.createClass( NS + "IfcDayInMonthNumber" );
    
    public static final OntClass IFC_DAY_IN_MONTH_NUMBER_LIST = m_model.createClass( NS + "IfcDayInMonthNumberList" );
    
    public static final OntClass IFC_DAYLIGHT_SAVING_HOUR = m_model.createClass( NS + "IfcDaylightSavingHour" );
    
    public static final OntClass IFC_DAYLIGHT_SAVING_HOUR_LIST = m_model.createClass( NS + "IfcDaylightSavingHourList" );
    
    public static final OntClass IFC_DEFINED_SYMBOL = m_model.createClass( NS + "IfcDefinedSymbol" );
    
    public static final OntClass IFC_DERIVED_PROFILE_DEF = m_model.createClass( NS + "IfcDerivedProfileDef" );
    
    public static final OntClass IFC_DERIVED_UNIT = m_model.createClass( NS + "IfcDerivedUnit" );
    
    public static final OntClass IFC_DERIVED_UNIT_ELEMENT = m_model.createClass( NS + "IfcDerivedUnitElement" );
    
    public static final OntClass IFC_DESCRIPTIVE_MEASURE = m_model.createClass( NS + "IfcDescriptiveMeasure" );
    
    public static final OntClass IFC_DESCRIPTIVE_MEASURE_LIST = m_model.createClass( NS + "IfcDescriptiveMeasureList" );
    
    public static final OntClass IFC_DIAMETER_DIMENSION = m_model.createClass( NS + "IfcDiameterDimension" );
    
    public static final OntClass IFC_DIMENSION_CALLOUT_RELATIONSHIP = m_model.createClass( NS + "IfcDimensionCalloutRelationship" );
    
    public static final OntClass IFC_DIMENSION_COUNT = m_model.createClass( NS + "IfcDimensionCount" );
    
    public static final OntClass IFC_DIMENSION_COUNT_LIST = m_model.createClass( NS + "IfcDimensionCountList" );
    
    public static final OntClass IFC_DIMENSION_CURVE = m_model.createClass( NS + "IfcDimensionCurve" );
    
    public static final OntClass IFC_DIMENSION_CURVE_DIRECTED_CALLOUT = m_model.createClass( NS + "IfcDimensionCurveDirectedCallout" );
    
    public static final OntClass IFC_DIMENSION_CURVE_TERMINATOR = m_model.createClass( NS + "IfcDimensionCurveTerminator" );
    
    public static final OntClass IFC_DIMENSION_PAIR = m_model.createClass( NS + "IfcDimensionPair" );
    
    public static final OntClass IFC_DIMENSIONAL_EXPONENTS = m_model.createClass( NS + "IfcDimensionalExponents" );
    
    public static final OntClass IFC_DIRECTION = m_model.createClass( NS + "IfcDirection" );
    
    public static final OntClass IFC_DISCRETE_ACCESSORY = m_model.createClass( NS + "IfcDiscreteAccessory" );
    
    public static final OntClass IFC_DISCRETE_ACCESSORY_TYPE = m_model.createClass( NS + "IfcDiscreteAccessoryType" );
    
    public static final OntClass IFC_DISTRIBUTION_CHAMBER_ELEMENT = m_model.createClass( NS + "IfcDistributionChamberElement" );
    
    public static final OntClass IFC_DISTRIBUTION_CHAMBER_ELEMENT_TYPE = m_model.createClass( NS + "IfcDistributionChamberElementType" );
    
    public static final OntClass IFC_DISTRIBUTION_CONTROL_ELEMENT = m_model.createClass( NS + "IfcDistributionControlElement" );
    
    public static final OntClass IFC_DISTRIBUTION_CONTROL_ELEMENT_TYPE = m_model.createClass( NS + "IfcDistributionControlElementType" );
    
    public static final OntClass IFC_DISTRIBUTION_ELEMENT = m_model.createClass( NS + "IfcDistributionElement" );
    
    public static final OntClass IFC_DISTRIBUTION_ELEMENT_TYPE = m_model.createClass( NS + "IfcDistributionElementType" );
    
    public static final OntClass IFC_DISTRIBUTION_FLOW_ELEMENT = m_model.createClass( NS + "IfcDistributionFlowElement" );
    
    public static final OntClass IFC_DISTRIBUTION_FLOW_ELEMENT_TYPE = m_model.createClass( NS + "IfcDistributionFlowElementType" );
    
    public static final OntClass IFC_DISTRIBUTION_PORT = m_model.createClass( NS + "IfcDistributionPort" );
    
    public static final OntClass IFC_DOCUMENT_ELECTRONIC_FORMAT = m_model.createClass( NS + "IfcDocumentElectronicFormat" );
    
    public static final OntClass IFC_DOCUMENT_INFORMATION = m_model.createClass( NS + "IfcDocumentInformation" );
    
    public static final OntClass IFC_DOCUMENT_INFORMATION_RELATIONSHIP = m_model.createClass( NS + "IfcDocumentInformationRelationship" );
    
    public static final OntClass IFC_DOCUMENT_REFERENCE = m_model.createClass( NS + "IfcDocumentReference" );
    
    public static final OntClass IFC_DOOR = m_model.createClass( NS + "IfcDoor" );
    
    public static final OntClass IFC_DOOR_LINING_PROPERTIES = m_model.createClass( NS + "IfcDoorLiningProperties" );
    
    public static final OntClass IFC_DOOR_PANEL_PROPERTIES = m_model.createClass( NS + "IfcDoorPanelProperties" );
    
    public static final OntClass IFC_DOOR_STYLE = m_model.createClass( NS + "IfcDoorStyle" );
    
    public static final OntClass IFC_DOSE_EQUIVALENT_MEASURE = m_model.createClass( NS + "IfcDoseEquivalentMeasure" );
    
    public static final OntClass IFC_DOSE_EQUIVALENT_MEASURE_LIST = m_model.createClass( NS + "IfcDoseEquivalentMeasureList" );
    
    public static final OntClass IFC_DOUBLE = m_model.createClass( NS + "IfcDouble" );
    
    public static final OntClass IFC_DOUBLE_LIST = m_model.createClass( NS + "IfcDoubleList" );
    
    public static final OntClass IFC_DRAUGHTING_CALLOUT = m_model.createClass( NS + "IfcDraughtingCallout" );
    
    public static final OntClass IFC_DRAUGHTING_CALLOUT_RELATIONSHIP = m_model.createClass( NS + "IfcDraughtingCalloutRelationship" );
    
    public static final OntClass IFC_DRAUGHTING_PRE_DEFINED_COLOUR = m_model.createClass( NS + "IfcDraughtingPreDefinedColour" );
    
    public static final OntClass IFC_DRAUGHTING_PRE_DEFINED_CURVE_FONT = m_model.createClass( NS + "IfcDraughtingPreDefinedCurveFont" );
    
    public static final OntClass IFC_DRAUGHTING_PRE_DEFINED_TEXT_FONT = m_model.createClass( NS + "IfcDraughtingPreDefinedTextFont" );
    
    public static final OntClass IFC_DUCT_FITTING_TYPE = m_model.createClass( NS + "IfcDuctFittingType" );
    
    public static final OntClass IFC_DUCT_SEGMENT_TYPE = m_model.createClass( NS + "IfcDuctSegmentType" );
    
    public static final OntClass IFC_DUCT_SILENCER_TYPE = m_model.createClass( NS + "IfcDuctSilencerType" );
    
    public static final OntClass IFC_DYNAMIC_VISCOSITY_MEASURE = m_model.createClass( NS + "IfcDynamicViscosityMeasure" );
    
    public static final OntClass IFC_DYNAMIC_VISCOSITY_MEASURE_LIST = m_model.createClass( NS + "IfcDynamicViscosityMeasureList" );
    
    public static final OntClass IFC_EDGE = m_model.createClass( NS + "IfcEdge" );
    
    public static final OntClass IFC_EDGE_CURVE = m_model.createClass( NS + "IfcEdgeCurve" );
    
    public static final OntClass IFC_EDGE_FEATURE = m_model.createClass( NS + "IfcEdgeFeature" );
    
    public static final OntClass IFC_EDGE_LOOP = m_model.createClass( NS + "IfcEdgeLoop" );
    
    public static final OntClass IFC_ELECTRIC_APPLIANCE_TYPE = m_model.createClass( NS + "IfcElectricApplianceType" );
    
    public static final OntClass IFC_ELECTRIC_CAPACITANCE_MEASURE = m_model.createClass( NS + "IfcElectricCapacitanceMeasure" );
    
    public static final OntClass IFC_ELECTRIC_CAPACITANCE_MEASURE_LIST = m_model.createClass( NS + "IfcElectricCapacitanceMeasureList" );
    
    public static final OntClass IFC_ELECTRIC_CHARGE_MEASURE = m_model.createClass( NS + "IfcElectricChargeMeasure" );
    
    public static final OntClass IFC_ELECTRIC_CHARGE_MEASURE_LIST = m_model.createClass( NS + "IfcElectricChargeMeasureList" );
    
    public static final OntClass IFC_ELECTRIC_CONDUCTANCE_MEASURE = m_model.createClass( NS + "IfcElectricConductanceMeasure" );
    
    public static final OntClass IFC_ELECTRIC_CONDUCTANCE_MEASURE_LIST = m_model.createClass( NS + "IfcElectricConductanceMeasureList" );
    
    public static final OntClass IFC_ELECTRIC_CURRENT_MEASURE = m_model.createClass( NS + "IfcElectricCurrentMeasure" );
    
    public static final OntClass IFC_ELECTRIC_CURRENT_MEASURE_LIST = m_model.createClass( NS + "IfcElectricCurrentMeasureList" );
    
    public static final OntClass IFC_ELECTRIC_DISTRIBUTION_POINT = m_model.createClass( NS + "IfcElectricDistributionPoint" );
    
    public static final OntClass IFC_ELECTRIC_FLOW_STORAGE_DEVICE_TYPE = m_model.createClass( NS + "IfcElectricFlowStorageDeviceType" );
    
    public static final OntClass IFC_ELECTRIC_GENERATOR_TYPE = m_model.createClass( NS + "IfcElectricGeneratorType" );
    
    public static final OntClass IFC_ELECTRIC_HEATER_TYPE = m_model.createClass( NS + "IfcElectricHeaterType" );
    
    public static final OntClass IFC_ELECTRIC_MOTOR_TYPE = m_model.createClass( NS + "IfcElectricMotorType" );
    
    public static final OntClass IFC_ELECTRIC_RESISTANCE_MEASURE = m_model.createClass( NS + "IfcElectricResistanceMeasure" );
    
    public static final OntClass IFC_ELECTRIC_RESISTANCE_MEASURE_LIST = m_model.createClass( NS + "IfcElectricResistanceMeasureList" );
    
    public static final OntClass IFC_ELECTRIC_TIME_CONTROL_TYPE = m_model.createClass( NS + "IfcElectricTimeControlType" );
    
    public static final OntClass IFC_ELECTRIC_VOLTAGE_MEASURE = m_model.createClass( NS + "IfcElectricVoltageMeasure" );
    
    public static final OntClass IFC_ELECTRIC_VOLTAGE_MEASURE_LIST = m_model.createClass( NS + "IfcElectricVoltageMeasureList" );
    
    public static final OntClass IFC_ELECTRICAL_BASE_PROPERTIES = m_model.createClass( NS + "IfcElectricalBaseProperties" );
    
    public static final OntClass IFC_ELECTRICAL_CIRCUIT = m_model.createClass( NS + "IfcElectricalCircuit" );
    
    public static final OntClass IFC_ELECTRICAL_ELEMENT = m_model.createClass( NS + "IfcElectricalElement" );
    
    public static final OntClass IFC_ELEMENT = m_model.createClass( NS + "IfcElement" );
    
    public static final OntClass IFC_ELEMENT_ASSEMBLY = m_model.createClass( NS + "IfcElementAssembly" );
    
    public static final OntClass IFC_ELEMENT_COMPONENT = m_model.createClass( NS + "IfcElementComponent" );
    
    public static final OntClass IFC_ELEMENT_COMPONENT_TYPE = m_model.createClass( NS + "IfcElementComponentType" );
    
    public static final OntClass IFC_ELEMENT_QUANTITY = m_model.createClass( NS + "IfcElementQuantity" );
    
    public static final OntClass IFC_ELEMENT_TYPE = m_model.createClass( NS + "IfcElementType" );
    
    public static final OntClass IFC_ELEMENTARY_SURFACE = m_model.createClass( NS + "IfcElementarySurface" );
    
    public static final OntClass IFC_ELLIPSE = m_model.createClass( NS + "IfcEllipse" );
    
    public static final OntClass IFC_ELLIPSE_PROFILE_DEF = m_model.createClass( NS + "IfcEllipseProfileDef" );
    
    public static final OntClass IFC_ENERGY_CONVERSION_DEVICE = m_model.createClass( NS + "IfcEnergyConversionDevice" );
    
    public static final OntClass IFC_ENERGY_CONVERSION_DEVICE_TYPE = m_model.createClass( NS + "IfcEnergyConversionDeviceType" );
    
    public static final OntClass IFC_ENERGY_MEASURE = m_model.createClass( NS + "IfcEnergyMeasure" );
    
    public static final OntClass IFC_ENERGY_MEASURE_LIST = m_model.createClass( NS + "IfcEnergyMeasureList" );
    
    public static final OntClass IFC_ENERGY_PROPERTIES = m_model.createClass( NS + "IfcEnergyProperties" );
    
    public static final OntClass IFC_ENVIRONMENTAL_IMPACT_VALUE = m_model.createClass( NS + "IfcEnvironmentalImpactValue" );
    
    public static final OntClass IFC_EQUIPMENT_ELEMENT = m_model.createClass( NS + "IfcEquipmentElement" );
    
    public static final OntClass IFC_EQUIPMENT_STANDARD = m_model.createClass( NS + "IfcEquipmentStandard" );
    
    public static final OntClass IFC_EVAPORATIVE_COOLER_TYPE = m_model.createClass( NS + "IfcEvaporativeCoolerType" );
    
    public static final OntClass IFC_EVAPORATOR_TYPE = m_model.createClass( NS + "IfcEvaporatorType" );
    
    public static final OntClass IFC_EXTENDED_MATERIAL_PROPERTIES = m_model.createClass( NS + "IfcExtendedMaterialProperties" );
    
    public static final OntClass IFC_EXTERNAL_REFERENCE = m_model.createClass( NS + "IfcExternalReference" );
    
    public static final OntClass IFC_EXTERNALLY_DEFINED_HATCH_STYLE = m_model.createClass( NS + "IfcExternallyDefinedHatchStyle" );
    
    public static final OntClass IFC_EXTERNALLY_DEFINED_SURFACE_STYLE = m_model.createClass( NS + "IfcExternallyDefinedSurfaceStyle" );
    
    public static final OntClass IFC_EXTERNALLY_DEFINED_SYMBOL = m_model.createClass( NS + "IfcExternallyDefinedSymbol" );
    
    public static final OntClass IFC_EXTERNALLY_DEFINED_TEXT_FONT = m_model.createClass( NS + "IfcExternallyDefinedTextFont" );
    
    public static final OntClass IFC_EXTRUDED_AREA_SOLID = m_model.createClass( NS + "IfcExtrudedAreaSolid" );
    
    public static final OntClass IFC_FACE = m_model.createClass( NS + "IfcFace" );
    
    public static final OntClass IFC_FACE_BASED_SURFACE_MODEL = m_model.createClass( NS + "IfcFaceBasedSurfaceModel" );
    
    public static final OntClass IFC_FACE_BOUND = m_model.createClass( NS + "IfcFaceBound" );
    
    public static final OntClass IFC_FACE_OUTER_BOUND = m_model.createClass( NS + "IfcFaceOuterBound" );
    
    public static final OntClass IFC_FACE_SURFACE = m_model.createClass( NS + "IfcFaceSurface" );
    
    public static final OntClass IFC_FACETED_BREP = m_model.createClass( NS + "IfcFacetedBrep" );
    
    public static final OntClass IFC_FACETED_BREP_WITH_VOIDS = m_model.createClass( NS + "IfcFacetedBrepWithVoids" );
    
    public static final OntClass IFC_FAILURE_CONNECTION_CONDITION = m_model.createClass( NS + "IfcFailureConnectionCondition" );
    
    public static final OntClass IFC_FAN_TYPE = m_model.createClass( NS + "IfcFanType" );
    
    public static final OntClass IFC_FASTENER = m_model.createClass( NS + "IfcFastener" );
    
    public static final OntClass IFC_FASTENER_TYPE = m_model.createClass( NS + "IfcFastenerType" );
    
    public static final OntClass IFC_FEATURE_ELEMENT = m_model.createClass( NS + "IfcFeatureElement" );
    
    public static final OntClass IFC_FEATURE_ELEMENT_ADDITION = m_model.createClass( NS + "IfcFeatureElementAddition" );
    
    public static final OntClass IFC_FEATURE_ELEMENT_SUBTRACTION = m_model.createClass( NS + "IfcFeatureElementSubtraction" );
    
    public static final OntClass IFC_FILL_AREA_STYLE = m_model.createClass( NS + "IfcFillAreaStyle" );
    
    public static final OntClass IFC_FILL_AREA_STYLE_HATCHING = m_model.createClass( NS + "IfcFillAreaStyleHatching" );
    
    public static final OntClass IFC_FILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE = m_model.createClass( NS + "IfcFillAreaStyleTileSymbolWithStyle" );
    
    public static final OntClass IFC_FILL_AREA_STYLE_TILES = m_model.createClass( NS + "IfcFillAreaStyleTiles" );
    
    public static final OntClass IFC_FILTER_TYPE = m_model.createClass( NS + "IfcFilterType" );
    
    public static final OntClass IFC_FIRE_SUPPRESSION_TERMINAL_TYPE = m_model.createClass( NS + "IfcFireSuppressionTerminalType" );
    
    public static final OntClass IFC_FLOAT = m_model.createClass( NS + "IfcFloat" );
    
    public static final OntClass IFC_FLOAT_LIST = m_model.createClass( NS + "IfcFloatList" );
    
    public static final OntClass IFC_FLOW_CONTROLLER = m_model.createClass( NS + "IfcFlowController" );
    
    public static final OntClass IFC_FLOW_CONTROLLER_TYPE = m_model.createClass( NS + "IfcFlowControllerType" );
    
    public static final OntClass IFC_FLOW_FITTING = m_model.createClass( NS + "IfcFlowFitting" );
    
    public static final OntClass IFC_FLOW_FITTING_TYPE = m_model.createClass( NS + "IfcFlowFittingType" );
    
    public static final OntClass IFC_FLOW_INSTRUMENT_TYPE = m_model.createClass( NS + "IfcFlowInstrumentType" );
    
    public static final OntClass IFC_FLOW_METER_TYPE = m_model.createClass( NS + "IfcFlowMeterType" );
    
    public static final OntClass IFC_FLOW_MOVING_DEVICE = m_model.createClass( NS + "IfcFlowMovingDevice" );
    
    public static final OntClass IFC_FLOW_MOVING_DEVICE_TYPE = m_model.createClass( NS + "IfcFlowMovingDeviceType" );
    
    public static final OntClass IFC_FLOW_SEGMENT = m_model.createClass( NS + "IfcFlowSegment" );
    
    public static final OntClass IFC_FLOW_SEGMENT_TYPE = m_model.createClass( NS + "IfcFlowSegmentType" );
    
    public static final OntClass IFC_FLOW_STORAGE_DEVICE = m_model.createClass( NS + "IfcFlowStorageDevice" );
    
    public static final OntClass IFC_FLOW_STORAGE_DEVICE_TYPE = m_model.createClass( NS + "IfcFlowStorageDeviceType" );
    
    public static final OntClass IFC_FLOW_TERMINAL = m_model.createClass( NS + "IfcFlowTerminal" );
    
    public static final OntClass IFC_FLOW_TERMINAL_TYPE = m_model.createClass( NS + "IfcFlowTerminalType" );
    
    public static final OntClass IFC_FLOW_TREATMENT_DEVICE = m_model.createClass( NS + "IfcFlowTreatmentDevice" );
    
    public static final OntClass IFC_FLOW_TREATMENT_DEVICE_TYPE = m_model.createClass( NS + "IfcFlowTreatmentDeviceType" );
    
    public static final OntClass IFC_FLUID_FLOW_PROPERTIES = m_model.createClass( NS + "IfcFluidFlowProperties" );
    
    public static final OntClass IFC_FONT_STYLE = m_model.createClass( NS + "IfcFontStyle" );
    
    public static final OntClass IFC_FONT_STYLE_LIST = m_model.createClass( NS + "IfcFontStyleList" );
    
    public static final OntClass IFC_FONT_VARIANT = m_model.createClass( NS + "IfcFontVariant" );
    
    public static final OntClass IFC_FONT_VARIANT_LIST = m_model.createClass( NS + "IfcFontVariantList" );
    
    public static final OntClass IFC_FONT_WEIGHT = m_model.createClass( NS + "IfcFontWeight" );
    
    public static final OntClass IFC_FONT_WEIGHT_LIST = m_model.createClass( NS + "IfcFontWeightList" );
    
    public static final OntClass IFC_FOOTING = m_model.createClass( NS + "IfcFooting" );
    
    public static final OntClass IFC_FORCE_MEASURE = m_model.createClass( NS + "IfcForceMeasure" );
    
    public static final OntClass IFC_FORCE_MEASURE_LIST = m_model.createClass( NS + "IfcForceMeasureList" );
    
    public static final OntClass IFC_FREQUENCY_MEASURE = m_model.createClass( NS + "IfcFrequencyMeasure" );
    
    public static final OntClass IFC_FREQUENCY_MEASURE_LIST = m_model.createClass( NS + "IfcFrequencyMeasureList" );
    
    public static final OntClass IFC_FUEL_PROPERTIES = m_model.createClass( NS + "IfcFuelProperties" );
    
    public static final OntClass IFC_FURNISHING_ELEMENT = m_model.createClass( NS + "IfcFurnishingElement" );
    
    public static final OntClass IFC_FURNISHING_ELEMENT_TYPE = m_model.createClass( NS + "IfcFurnishingElementType" );
    
    public static final OntClass IFC_FURNITURE_STANDARD = m_model.createClass( NS + "IfcFurnitureStandard" );
    
    public static final OntClass IFC_FURNITURE_TYPE = m_model.createClass( NS + "IfcFurnitureType" );
    
    public static final OntClass IFC_GAS_TERMINAL_TYPE = m_model.createClass( NS + "IfcGasTerminalType" );
    
    public static final OntClass IFC_GENERAL_MATERIAL_PROPERTIES = m_model.createClass( NS + "IfcGeneralMaterialProperties" );
    
    public static final OntClass IFC_GENERAL_PROFILE_PROPERTIES = m_model.createClass( NS + "IfcGeneralProfileProperties" );
    
    public static final OntClass IFC_GEOMETRIC_CURVE_SET = m_model.createClass( NS + "IfcGeometricCurveSet" );
    
    public static final OntClass IFC_GEOMETRIC_REPRESENTATION_CONTEXT = m_model.createClass( NS + "IfcGeometricRepresentationContext" );
    
    public static final OntClass IFC_GEOMETRIC_REPRESENTATION_ITEM = m_model.createClass( NS + "IfcGeometricRepresentationItem" );
    
    public static final OntClass IFC_GEOMETRIC_REPRESENTATION_SUB_CONTEXT = m_model.createClass( NS + "IfcGeometricRepresentationSubContext" );
    
    public static final OntClass IFC_GEOMETRIC_SET = m_model.createClass( NS + "IfcGeometricSet" );
    
    public static final OntClass IFC_GLOBALLY_UNIQUE_ID = m_model.createClass( NS + "IfcGloballyUniqueId" );
    
    public static final OntClass IFC_GLOBALLY_UNIQUE_ID_LIST = m_model.createClass( NS + "IfcGloballyUniqueIdList" );
    
    public static final OntClass IFC_GRID = m_model.createClass( NS + "IfcGrid" );
    
    public static final OntClass IFC_GRID_AXIS = m_model.createClass( NS + "IfcGridAxis" );
    
    public static final OntClass IFC_GRID_PLACEMENT = m_model.createClass( NS + "IfcGridPlacement" );
    
    public static final OntClass IFC_GROUP = m_model.createClass( NS + "IfcGroup" );
    
    public static final OntClass IFC_HALF_SPACE_SOLID = m_model.createClass( NS + "IfcHalfSpaceSolid" );
    
    public static final OntClass IFC_HEAT_EXCHANGER_TYPE = m_model.createClass( NS + "IfcHeatExchangerType" );
    
    public static final OntClass IFC_HEAT_FLUX_DENSITY_MEASURE = m_model.createClass( NS + "IfcHeatFluxDensityMeasure" );
    
    public static final OntClass IFC_HEAT_FLUX_DENSITY_MEASURE_LIST = m_model.createClass( NS + "IfcHeatFluxDensityMeasureList" );
    
    public static final OntClass IFC_HEATING_VALUE_MEASURE = m_model.createClass( NS + "IfcHeatingValueMeasure" );
    
    public static final OntClass IFC_HEATING_VALUE_MEASURE_LIST = m_model.createClass( NS + "IfcHeatingValueMeasureList" );
    
    public static final OntClass IFC_HOUR_IN_DAY = m_model.createClass( NS + "IfcHourInDay" );
    
    public static final OntClass IFC_HOUR_IN_DAY_LIST = m_model.createClass( NS + "IfcHourInDayList" );
    
    public static final OntClass IFC_HUMIDIFIER_TYPE = m_model.createClass( NS + "IfcHumidifierType" );
    
    public static final OntClass IFC_HYGROSCOPIC_MATERIAL_PROPERTIES = m_model.createClass( NS + "IfcHygroscopicMaterialProperties" );
    
    public static final OntClass IFC_ISHAPE_PROFILE_DEF = m_model.createClass( NS + "IfcIShapeProfileDef" );
    
    public static final OntClass IFC_IDENTIFIER = m_model.createClass( NS + "IfcIdentifier" );
    
    public static final OntClass IFC_IDENTIFIER_LIST = m_model.createClass( NS + "IfcIdentifierList" );
    
    public static final OntClass IFC_ILLUMINANCE_MEASURE = m_model.createClass( NS + "IfcIlluminanceMeasure" );
    
    public static final OntClass IFC_ILLUMINANCE_MEASURE_LIST = m_model.createClass( NS + "IfcIlluminanceMeasureList" );
    
    public static final OntClass IFC_IMAGE_TEXTURE = m_model.createClass( NS + "IfcImageTexture" );
    
    public static final OntClass IFC_INDUCTANCE_MEASURE = m_model.createClass( NS + "IfcInductanceMeasure" );
    
    public static final OntClass IFC_INDUCTANCE_MEASURE_LIST = m_model.createClass( NS + "IfcInductanceMeasureList" );
    
    public static final OntClass IFC_INTEGER = m_model.createClass( NS + "IfcInteger" );
    
    public static final OntClass IFC_INTEGER_COUNT_RATE_MEASURE = m_model.createClass( NS + "IfcIntegerCountRateMeasure" );
    
    public static final OntClass IFC_INTEGER_COUNT_RATE_MEASURE_LIST = m_model.createClass( NS + "IfcIntegerCountRateMeasureList" );
    
    public static final OntClass IFC_INTEGER_LIST = m_model.createClass( NS + "IfcIntegerList" );
    
    public static final OntClass IFC_INVENTORY = m_model.createClass( NS + "IfcInventory" );
    
    public static final OntClass IFC_ION_CONCENTRATION_MEASURE = m_model.createClass( NS + "IfcIonConcentrationMeasure" );
    
    public static final OntClass IFC_ION_CONCENTRATION_MEASURE_LIST = m_model.createClass( NS + "IfcIonConcentrationMeasureList" );
    
    public static final OntClass IFC_IRREGULAR_TIME_SERIES = m_model.createClass( NS + "IfcIrregularTimeSeries" );
    
    public static final OntClass IFC_IRREGULAR_TIME_SERIES_VALUE = m_model.createClass( NS + "IfcIrregularTimeSeriesValue" );
    
    public static final OntClass IFC_ISOTHERMAL_MOISTURE_CAPACITY_MEASURE = m_model.createClass( NS + "IfcIsothermalMoistureCapacityMeasure" );
    
    public static final OntClass IFC_ISOTHERMAL_MOISTURE_CAPACITY_MEASURE_LIST = m_model.createClass( NS + "IfcIsothermalMoistureCapacityMeasureList" );
    
    public static final OntClass IFC_JUNCTION_BOX_TYPE = m_model.createClass( NS + "IfcJunctionBoxType" );
    
    public static final OntClass IFC_KINEMATIC_VISCOSITY_MEASURE = m_model.createClass( NS + "IfcKinematicViscosityMeasure" );
    
    public static final OntClass IFC_KINEMATIC_VISCOSITY_MEASURE_LIST = m_model.createClass( NS + "IfcKinematicViscosityMeasureList" );
    
    public static final OntClass IFC_LSHAPE_PROFILE_DEF = m_model.createClass( NS + "IfcLShapeProfileDef" );
    
    public static final OntClass IFC_LABEL = m_model.createClass( NS + "IfcLabel" );
    
    public static final OntClass IFC_LABOR_RESOURCE = m_model.createClass( NS + "IfcLaborResource" );
    
    public static final OntClass IFC_LAMP_TYPE = m_model.createClass( NS + "IfcLampType" );
    
    public static final OntClass IFC_LENGTH_MEASURE = m_model.createClass( NS + "IfcLengthMeasure" );
    
    public static final OntClass IFC_LENGTH_MEASURE_LIST = m_model.createClass( NS + "IfcLengthMeasureList" );
    
    public static final OntClass IFC_LIBRARY_INFORMATION = m_model.createClass( NS + "IfcLibraryInformation" );
    
    public static final OntClass IFC_LIBRARY_REFERENCE = m_model.createClass( NS + "IfcLibraryReference" );
    
    public static final OntClass IFC_LIGHT_DISTRIBUTION_DATA = m_model.createClass( NS + "IfcLightDistributionData" );
    
    public static final OntClass IFC_LIGHT_FIXTURE_TYPE = m_model.createClass( NS + "IfcLightFixtureType" );
    
    public static final OntClass IFC_LIGHT_INTENSITY_DISTRIBUTION = m_model.createClass( NS + "IfcLightIntensityDistribution" );
    
    public static final OntClass IFC_LIGHT_SOURCE = m_model.createClass( NS + "IfcLightSource" );
    
    public static final OntClass IFC_LIGHT_SOURCE_AMBIENT = m_model.createClass( NS + "IfcLightSourceAmbient" );
    
    public static final OntClass IFC_LIGHT_SOURCE_DIRECTIONAL = m_model.createClass( NS + "IfcLightSourceDirectional" );
    
    public static final OntClass IFC_LIGHT_SOURCE_GONIOMETRIC = m_model.createClass( NS + "IfcLightSourceGoniometric" );
    
    public static final OntClass IFC_LIGHT_SOURCE_POSITIONAL = m_model.createClass( NS + "IfcLightSourcePositional" );
    
    public static final OntClass IFC_LIGHT_SOURCE_SPOT = m_model.createClass( NS + "IfcLightSourceSpot" );
    
    public static final OntClass IFC_LINE = m_model.createClass( NS + "IfcLine" );
    
    public static final OntClass IFC_LINEAR_DIMENSION = m_model.createClass( NS + "IfcLinearDimension" );
    
    public static final OntClass IFC_LINEAR_FORCE_MEASURE = m_model.createClass( NS + "IfcLinearForceMeasure" );
    
    public static final OntClass IFC_LINEAR_FORCE_MEASURE_LIST = m_model.createClass( NS + "IfcLinearForceMeasureList" );
    
    public static final OntClass IFC_LINEAR_MOMENT_MEASURE = m_model.createClass( NS + "IfcLinearMomentMeasure" );
    
    public static final OntClass IFC_LINEAR_MOMENT_MEASURE_LIST = m_model.createClass( NS + "IfcLinearMomentMeasureList" );
    
    public static final OntClass IFC_LINEAR_STIFFNESS_MEASURE = m_model.createClass( NS + "IfcLinearStiffnessMeasure" );
    
    public static final OntClass IFC_LINEAR_STIFFNESS_MEASURE_LIST = m_model.createClass( NS + "IfcLinearStiffnessMeasureList" );
    
    public static final OntClass IFC_LINEAR_VELOCITY_MEASURE = m_model.createClass( NS + "IfcLinearVelocityMeasure" );
    
    public static final OntClass IFC_LINEAR_VELOCITY_MEASURE_LIST = m_model.createClass( NS + "IfcLinearVelocityMeasureList" );
    
    public static final OntClass IFC_LOCAL_PLACEMENT = m_model.createClass( NS + "IfcLocalPlacement" );
    
    public static final OntClass IFC_LOCAL_TIME = m_model.createClass( NS + "IfcLocalTime" );
    
    public static final OntClass IFC_LOGICAL = m_model.createClass( NS + "IfcLogical" );
    
    public static final OntClass IFC_LOGICAL_LIST = m_model.createClass( NS + "IfcLogicalList" );
    
    public static final OntClass IFC_LOOP = m_model.createClass( NS + "IfcLoop" );
    
    public static final OntClass IFC_LUMINOUS_FLUX_MEASURE = m_model.createClass( NS + "IfcLuminousFluxMeasure" );
    
    public static final OntClass IFC_LUMINOUS_FLUX_MEASURE_LIST = m_model.createClass( NS + "IfcLuminousFluxMeasureList" );
    
    public static final OntClass IFC_LUMINOUS_INTENSITY_DISTRIBUTION_MEASURE = m_model.createClass( NS + "IfcLuminousIntensityDistributionMeasure" );
    
    public static final OntClass IFC_LUMINOUS_INTENSITY_DISTRIBUTION_MEASURE_LIST = m_model.createClass( NS + "IfcLuminousIntensityDistributionMeasureList" );
    
    public static final OntClass IFC_LUMINOUS_INTENSITY_MEASURE = m_model.createClass( NS + "IfcLuminousIntensityMeasure" );
    
    public static final OntClass IFC_LUMINOUS_INTENSITY_MEASURE_LIST = m_model.createClass( NS + "IfcLuminousIntensityMeasureList" );
    
    public static final OntClass IFC_MAGNETIC_FLUX_DENSITY_MEASURE = m_model.createClass( NS + "IfcMagneticFluxDensityMeasure" );
    
    public static final OntClass IFC_MAGNETIC_FLUX_DENSITY_MEASURE_LIST = m_model.createClass( NS + "IfcMagneticFluxDensityMeasureList" );
    
    public static final OntClass IFC_MAGNETIC_FLUX_MEASURE = m_model.createClass( NS + "IfcMagneticFluxMeasure" );
    
    public static final OntClass IFC_MAGNETIC_FLUX_MEASURE_LIST = m_model.createClass( NS + "IfcMagneticFluxMeasureList" );
    
    public static final OntClass IFC_MANIFOLD_SOLID_BREP = m_model.createClass( NS + "IfcManifoldSolidBrep" );
    
    public static final OntClass IFC_MAPPED_ITEM = m_model.createClass( NS + "IfcMappedItem" );
    
    public static final OntClass IFC_MASS_DENSITY_MEASURE = m_model.createClass( NS + "IfcMassDensityMeasure" );
    
    public static final OntClass IFC_MASS_DENSITY_MEASURE_LIST = m_model.createClass( NS + "IfcMassDensityMeasureList" );
    
    public static final OntClass IFC_MASS_FLOW_RATE_MEASURE = m_model.createClass( NS + "IfcMassFlowRateMeasure" );
    
    public static final OntClass IFC_MASS_FLOW_RATE_MEASURE_LIST = m_model.createClass( NS + "IfcMassFlowRateMeasureList" );
    
    public static final OntClass IFC_MASS_MEASURE = m_model.createClass( NS + "IfcMassMeasure" );
    
    public static final OntClass IFC_MASS_MEASURE_LIST = m_model.createClass( NS + "IfcMassMeasureList" );
    
    public static final OntClass IFC_MASS_PER_LENGTH_MEASURE = m_model.createClass( NS + "IfcMassPerLengthMeasure" );
    
    public static final OntClass IFC_MASS_PER_LENGTH_MEASURE_LIST = m_model.createClass( NS + "IfcMassPerLengthMeasureList" );
    
    public static final OntClass IFC_MATERIAL = m_model.createClass( NS + "IfcMaterial" );
    
    public static final OntClass IFC_MATERIAL_CLASSIFICATION_RELATIONSHIP = m_model.createClass( NS + "IfcMaterialClassificationRelationship" );
    
    public static final OntClass IFC_MATERIAL_DEFINITION_REPRESENTATION = m_model.createClass( NS + "IfcMaterialDefinitionRepresentation" );
    
    public static final OntClass IFC_MATERIAL_LAYER = m_model.createClass( NS + "IfcMaterialLayer" );
    
    public static final OntClass IFC_MATERIAL_LAYER_SET = m_model.createClass( NS + "IfcMaterialLayerSet" );
    
    public static final OntClass IFC_MATERIAL_LAYER_SET_USAGE = m_model.createClass( NS + "IfcMaterialLayerSetUsage" );
    
    public static final OntClass IFC_MATERIAL_LIST = m_model.createClass( NS + "IfcMaterialList" );
    
    public static final OntClass IFC_MATERIAL_PROPERTIES = m_model.createClass( NS + "IfcMaterialProperties" );
    
    public static final OntClass IFC_MEASURE_WITH_UNIT = m_model.createClass( NS + "IfcMeasureWithUnit" );
    
    public static final OntClass IFC_MECHANICAL_CONCRETE_MATERIAL_PROPERTIES = m_model.createClass( NS + "IfcMechanicalConcreteMaterialProperties" );
    
    public static final OntClass IFC_MECHANICAL_FASTENER = m_model.createClass( NS + "IfcMechanicalFastener" );
    
    public static final OntClass IFC_MECHANICAL_FASTENER_TYPE = m_model.createClass( NS + "IfcMechanicalFastenerType" );
    
    public static final OntClass IFC_MECHANICAL_MATERIAL_PROPERTIES = m_model.createClass( NS + "IfcMechanicalMaterialProperties" );
    
    public static final OntClass IFC_MECHANICAL_STEEL_MATERIAL_PROPERTIES = m_model.createClass( NS + "IfcMechanicalSteelMaterialProperties" );
    
    public static final OntClass IFC_MEMBER = m_model.createClass( NS + "IfcMember" );
    
    public static final OntClass IFC_MEMBER_TYPE = m_model.createClass( NS + "IfcMemberType" );
    
    public static final OntClass IFC_METRIC = m_model.createClass( NS + "IfcMetric" );
    
    public static final OntClass IFC_MINUTE_IN_HOUR = m_model.createClass( NS + "IfcMinuteInHour" );
    
    public static final OntClass IFC_MINUTE_IN_HOUR_LIST = m_model.createClass( NS + "IfcMinuteInHourList" );
    
    public static final OntClass IFC_MODULUS_OF_ELASTICITY_MEASURE = m_model.createClass( NS + "IfcModulusOfElasticityMeasure" );
    
    public static final OntClass IFC_MODULUS_OF_ELASTICITY_MEASURE_LIST = m_model.createClass( NS + "IfcModulusOfElasticityMeasureList" );
    
    public static final OntClass IFC_MODULUS_OF_LINEAR_SUBGRADE_REACTION_MEASURE = m_model.createClass( NS + "IfcModulusOfLinearSubgradeReactionMeasure" );
    
    public static final OntClass IFC_MODULUS_OF_LINEAR_SUBGRADE_REACTION_MEASURE_LIST = m_model.createClass( NS + "IfcModulusOfLinearSubgradeReactionMeasureList" );
    
    public static final OntClass IFC_MODULUS_OF_ROTATIONAL_SUBGRADE_REACTION_MEASURE = m_model.createClass( NS + "IfcModulusOfRotationalSubgradeReactionMeasure" );
    
    public static final OntClass IFC_MODULUS_OF_ROTATIONAL_SUBGRADE_REACTION_MEASURE_LIST = m_model.createClass( NS + "IfcModulusOfRotationalSubgradeReactionMeasureList" );
    
    public static final OntClass IFC_MODULUS_OF_SUBGRADE_REACTION_MEASURE = m_model.createClass( NS + "IfcModulusOfSubgradeReactionMeasure" );
    
    public static final OntClass IFC_MODULUS_OF_SUBGRADE_REACTION_MEASURE_LIST = m_model.createClass( NS + "IfcModulusOfSubgradeReactionMeasureList" );
    
    public static final OntClass IFC_MOISTURE_DIFFUSIVITY_MEASURE = m_model.createClass( NS + "IfcMoistureDiffusivityMeasure" );
    
    public static final OntClass IFC_MOISTURE_DIFFUSIVITY_MEASURE_LIST = m_model.createClass( NS + "IfcMoistureDiffusivityMeasureList" );
    
    public static final OntClass IFC_MOLECULAR_WEIGHT_MEASURE = m_model.createClass( NS + "IfcMolecularWeightMeasure" );
    
    public static final OntClass IFC_MOLECULAR_WEIGHT_MEASURE_LIST = m_model.createClass( NS + "IfcMolecularWeightMeasureList" );
    
    public static final OntClass IFC_MOMENT_OF_INERTIA_MEASURE = m_model.createClass( NS + "IfcMomentOfInertiaMeasure" );
    
    public static final OntClass IFC_MOMENT_OF_INERTIA_MEASURE_LIST = m_model.createClass( NS + "IfcMomentOfInertiaMeasureList" );
    
    public static final OntClass IFC_MONETARY_MEASURE = m_model.createClass( NS + "IfcMonetaryMeasure" );
    
    public static final OntClass IFC_MONETARY_MEASURE_LIST = m_model.createClass( NS + "IfcMonetaryMeasureList" );
    
    public static final OntClass IFC_MONETARY_UNIT = m_model.createClass( NS + "IfcMonetaryUnit" );
    
    public static final OntClass IFC_MONTH_IN_YEAR_NUMBER = m_model.createClass( NS + "IfcMonthInYearNumber" );
    
    public static final OntClass IFC_MONTH_IN_YEAR_NUMBER_LIST = m_model.createClass( NS + "IfcMonthInYearNumberList" );
    
    public static final OntClass IFC_MOTOR_CONNECTION_TYPE = m_model.createClass( NS + "IfcMotorConnectionType" );
    
    public static final OntClass IFC_MOVE = m_model.createClass( NS + "IfcMove" );
    
    public static final OntClass IFC_NAMED_UNIT = m_model.createClass( NS + "IfcNamedUnit" );
    
    public static final OntClass IFC_NORMALISED_RATIO_MEASURE = m_model.createClass( NS + "IfcNormalisedRatioMeasure" );
    
    public static final OntClass IFC_NUMERIC_MEASURE = m_model.createClass( NS + "IfcNumericMeasure" );
    
    public static final OntClass IFC_NUMERIC_MEASURE_LIST = m_model.createClass( NS + "IfcNumericMeasureList" );
    
    public static final OntClass IFC_OBJECT = m_model.createClass( NS + "IfcObject" );
    
    public static final OntClass IFC_OBJECT_DEFINITION = m_model.createClass( NS + "IfcObjectDefinition" );
    
    public static final OntClass IFC_OBJECT_PLACEMENT = m_model.createClass( NS + "IfcObjectPlacement" );
    
    public static final OntClass IFC_OBJECTIVE = m_model.createClass( NS + "IfcObjective" );
    
    public static final OntClass IFC_OCCUPANT = m_model.createClass( NS + "IfcOccupant" );
    
    public static final OntClass IFC_OFFSET_CURVE2D = m_model.createClass( NS + "IfcOffsetCurve2D" );
    
    public static final OntClass IFC_OFFSET_CURVE3D = m_model.createClass( NS + "IfcOffsetCurve3D" );
    
    public static final OntClass IFC_ONE_DIRECTION_REPEAT_FACTOR = m_model.createClass( NS + "IfcOneDirectionRepeatFactor" );
    
    public static final OntClass IFC_OPEN_SHELL = m_model.createClass( NS + "IfcOpenShell" );
    
    public static final OntClass IFC_OPENING_ELEMENT = m_model.createClass( NS + "IfcOpeningElement" );
    
    public static final OntClass IFC_OPTICAL_MATERIAL_PROPERTIES = m_model.createClass( NS + "IfcOpticalMaterialProperties" );
    
    public static final OntClass IFC_ORDER_ACTION = m_model.createClass( NS + "IfcOrderAction" );
    
    public static final OntClass IFC_ORGANIZATION = m_model.createClass( NS + "IfcOrganization" );
    
    public static final OntClass IFC_ORGANIZATION_RELATIONSHIP = m_model.createClass( NS + "IfcOrganizationRelationship" );
    
    public static final OntClass IFC_ORIENTED_EDGE = m_model.createClass( NS + "IfcOrientedEdge" );
    
    public static final OntClass IFC_OUTLET_TYPE = m_model.createClass( NS + "IfcOutletType" );
    
    public static final OntClass IFC_OWNER_HISTORY = m_model.createClass( NS + "IfcOwnerHistory" );
    
    public static final OntClass IFC_PHMEASURE = m_model.createClass( NS + "IfcPHMeasure" );
    
    public static final OntClass IFC_PHMEASURE_LIST = m_model.createClass( NS + "IfcPHMeasureList" );
    
    public static final OntClass IFC_PARAMETER_VALUE = m_model.createClass( NS + "IfcParameterValue" );
    
    public static final OntClass IFC_PARAMETER_VALUE_LIST = m_model.createClass( NS + "IfcParameterValueList" );
    
    public static final OntClass IFC_PARAMETERIZED_PROFILE_DEF = m_model.createClass( NS + "IfcParameterizedProfileDef" );
    
    public static final OntClass IFC_PATH = m_model.createClass( NS + "IfcPath" );
    
    public static final OntClass IFC_PERFORMANCE_HISTORY = m_model.createClass( NS + "IfcPerformanceHistory" );
    
    public static final OntClass IFC_PERMEABLE_COVERING_PROPERTIES = m_model.createClass( NS + "IfcPermeableCoveringProperties" );
    
    public static final OntClass IFC_PERMIT = m_model.createClass( NS + "IfcPermit" );
    
    public static final OntClass IFC_PERSON = m_model.createClass( NS + "IfcPerson" );
    
    public static final OntClass IFC_PERSON_AND_ORGANIZATION = m_model.createClass( NS + "IfcPersonAndOrganization" );
    
    public static final OntClass IFC_PHYSICAL_COMPLEX_QUANTITY = m_model.createClass( NS + "IfcPhysicalComplexQuantity" );
    
    public static final OntClass IFC_PHYSICAL_QUANTITY = m_model.createClass( NS + "IfcPhysicalQuantity" );
    
    public static final OntClass IFC_PHYSICAL_SIMPLE_QUANTITY = m_model.createClass( NS + "IfcPhysicalSimpleQuantity" );
    
    public static final OntClass IFC_PILE = m_model.createClass( NS + "IfcPile" );
    
    public static final OntClass IFC_PIPE_FITTING_TYPE = m_model.createClass( NS + "IfcPipeFittingType" );
    
    public static final OntClass IFC_PIPE_SEGMENT_TYPE = m_model.createClass( NS + "IfcPipeSegmentType" );
    
    public static final OntClass IFC_PIXEL_TEXTURE = m_model.createClass( NS + "IfcPixelTexture" );
    
    public static final OntClass IFC_PLACEMENT = m_model.createClass( NS + "IfcPlacement" );
    
    public static final OntClass IFC_PLANAR_BOX = m_model.createClass( NS + "IfcPlanarBox" );
    
    public static final OntClass IFC_PLANAR_EXTENT = m_model.createClass( NS + "IfcPlanarExtent" );
    
    public static final OntClass IFC_PLANAR_FORCE_MEASURE = m_model.createClass( NS + "IfcPlanarForceMeasure" );
    
    public static final OntClass IFC_PLANAR_FORCE_MEASURE_LIST = m_model.createClass( NS + "IfcPlanarForceMeasureList" );
    
    public static final OntClass IFC_PLANE = m_model.createClass( NS + "IfcPlane" );
    
    public static final OntClass IFC_PLANE_ANGLE_MEASURE = m_model.createClass( NS + "IfcPlaneAngleMeasure" );
    
    public static final OntClass IFC_PLANE_ANGLE_MEASURE_LIST = m_model.createClass( NS + "IfcPlaneAngleMeasureList" );
    
    public static final OntClass IFC_PLATE = m_model.createClass( NS + "IfcPlate" );
    
    public static final OntClass IFC_PLATE_TYPE = m_model.createClass( NS + "IfcPlateType" );
    
    public static final OntClass IFC_POINT = m_model.createClass( NS + "IfcPoint" );
    
    public static final OntClass IFC_POINT_ON_CURVE = m_model.createClass( NS + "IfcPointOnCurve" );
    
    public static final OntClass IFC_POINT_ON_SURFACE = m_model.createClass( NS + "IfcPointOnSurface" );
    
    public static final OntClass IFC_POLY_LOOP = m_model.createClass( NS + "IfcPolyLoop" );
    
    public static final OntClass IFC_POLYGONAL_BOUNDED_HALF_SPACE = m_model.createClass( NS + "IfcPolygonalBoundedHalfSpace" );
    
    public static final OntClass IFC_POLYLINE = m_model.createClass( NS + "IfcPolyline" );
    
    public static final OntClass IFC_PORT = m_model.createClass( NS + "IfcPort" );
    
    public static final OntClass IFC_POSITIVE_LENGTH_MEASURE = m_model.createClass( NS + "IfcPositiveLengthMeasure" );
    
    public static final OntClass IFC_POSITIVE_PLANE_ANGLE_MEASURE = m_model.createClass( NS + "IfcPositivePlaneAngleMeasure" );
    
    public static final OntClass IFC_POSITIVE_RATIO_MEASURE = m_model.createClass( NS + "IfcPositiveRatioMeasure" );
    
    public static final OntClass IFC_POSTAL_ADDRESS = m_model.createClass( NS + "IfcPostalAddress" );
    
    public static final OntClass IFC_POWER_MEASURE = m_model.createClass( NS + "IfcPowerMeasure" );
    
    public static final OntClass IFC_POWER_MEASURE_LIST = m_model.createClass( NS + "IfcPowerMeasureList" );
    
    public static final OntClass IFC_PRE_DEFINED_COLOUR = m_model.createClass( NS + "IfcPreDefinedColour" );
    
    public static final OntClass IFC_PRE_DEFINED_CURVE_FONT = m_model.createClass( NS + "IfcPreDefinedCurveFont" );
    
    public static final OntClass IFC_PRE_DEFINED_DIMENSION_SYMBOL = m_model.createClass( NS + "IfcPreDefinedDimensionSymbol" );
    
    public static final OntClass IFC_PRE_DEFINED_ITEM = m_model.createClass( NS + "IfcPreDefinedItem" );
    
    public static final OntClass IFC_PRE_DEFINED_POINT_MARKER_SYMBOL = m_model.createClass( NS + "IfcPreDefinedPointMarkerSymbol" );
    
    public static final OntClass IFC_PRE_DEFINED_SYMBOL = m_model.createClass( NS + "IfcPreDefinedSymbol" );
    
    public static final OntClass IFC_PRE_DEFINED_TERMINATOR_SYMBOL = m_model.createClass( NS + "IfcPreDefinedTerminatorSymbol" );
    
    public static final OntClass IFC_PRE_DEFINED_TEXT_FONT = m_model.createClass( NS + "IfcPreDefinedTextFont" );
    
    public static final OntClass IFC_PRESENTABLE_TEXT = m_model.createClass( NS + "IfcPresentableText" );
    
    public static final OntClass IFC_PRESENTABLE_TEXT_LIST = m_model.createClass( NS + "IfcPresentableTextList" );
    
    public static final OntClass IFC_PRESENTATION_LAYER_ASSIGNMENT = m_model.createClass( NS + "IfcPresentationLayerAssignment" );
    
    public static final OntClass IFC_PRESENTATION_LAYER_WITH_STYLE = m_model.createClass( NS + "IfcPresentationLayerWithStyle" );
    
    public static final OntClass IFC_PRESENTATION_STYLE = m_model.createClass( NS + "IfcPresentationStyle" );
    
    public static final OntClass IFC_PRESENTATION_STYLE_ASSIGNMENT = m_model.createClass( NS + "IfcPresentationStyleAssignment" );
    
    public static final OntClass IFC_PRESSURE_MEASURE = m_model.createClass( NS + "IfcPressureMeasure" );
    
    public static final OntClass IFC_PRESSURE_MEASURE_LIST = m_model.createClass( NS + "IfcPressureMeasureList" );
    
    public static final OntClass IFC_PROCEDURE = m_model.createClass( NS + "IfcProcedure" );
    
    public static final OntClass IFC_PROCESS = m_model.createClass( NS + "IfcProcess" );
    
    public static final OntClass IFC_PRODUCT = m_model.createClass( NS + "IfcProduct" );
    
    public static final OntClass IFC_PRODUCT_DEFINITION_SHAPE = m_model.createClass( NS + "IfcProductDefinitionShape" );
    
    public static final OntClass IFC_PRODUCT_REPRESENTATION = m_model.createClass( NS + "IfcProductRepresentation" );
    
    public static final OntClass IFC_PRODUCTS_OF_COMBUSTION_PROPERTIES = m_model.createClass( NS + "IfcProductsOfCombustionProperties" );
    
    public static final OntClass IFC_PROFILE_DEF = m_model.createClass( NS + "IfcProfileDef" );
    
    public static final OntClass IFC_PROFILE_PROPERTIES = m_model.createClass( NS + "IfcProfileProperties" );
    
    public static final OntClass IFC_PROJECT = m_model.createClass( NS + "IfcProject" );
    
    public static final OntClass IFC_PROJECT_ORDER = m_model.createClass( NS + "IfcProjectOrder" );
    
    public static final OntClass IFC_PROJECT_ORDER_RECORD = m_model.createClass( NS + "IfcProjectOrderRecord" );
    
    public static final OntClass IFC_PROJECTION_CURVE = m_model.createClass( NS + "IfcProjectionCurve" );
    
    public static final OntClass IFC_PROJECTION_ELEMENT = m_model.createClass( NS + "IfcProjectionElement" );
    
    public static final OntClass IFC_PROPERTY = m_model.createClass( NS + "IfcProperty" );
    
    public static final OntClass IFC_PROPERTY_BOUNDED_VALUE = m_model.createClass( NS + "IfcPropertyBoundedValue" );
    
    public static final OntClass IFC_PROPERTY_CONSTRAINT_RELATIONSHIP = m_model.createClass( NS + "IfcPropertyConstraintRelationship" );
    
    public static final OntClass IFC_PROPERTY_DEFINITION = m_model.createClass( NS + "IfcPropertyDefinition" );
    
    public static final OntClass IFC_PROPERTY_DEPENDENCY_RELATIONSHIP = m_model.createClass( NS + "IfcPropertyDependencyRelationship" );
    
    public static final OntClass IFC_PROPERTY_ENUMERATED_VALUE = m_model.createClass( NS + "IfcPropertyEnumeratedValue" );
    
    public static final OntClass IFC_PROPERTY_ENUMERATION = m_model.createClass( NS + "IfcPropertyEnumeration" );
    
    public static final OntClass IFC_PROPERTY_LIST_VALUE = m_model.createClass( NS + "IfcPropertyListValue" );
    
    public static final OntClass IFC_PROPERTY_REFERENCE_VALUE = m_model.createClass( NS + "IfcPropertyReferenceValue" );
    
    public static final OntClass IFC_PROPERTY_SET = m_model.createClass( NS + "IfcPropertySet" );
    
    public static final OntClass IFC_PROPERTY_SET_DEFINITION = m_model.createClass( NS + "IfcPropertySetDefinition" );
    
    public static final OntClass IFC_PROPERTY_SINGLE_VALUE = m_model.createClass( NS + "IfcPropertySingleValue" );
    
    public static final OntClass IFC_PROPERTY_TABLE_VALUE = m_model.createClass( NS + "IfcPropertyTableValue" );
    
    public static final OntClass IFC_PROTECTIVE_DEVICE_TYPE = m_model.createClass( NS + "IfcProtectiveDeviceType" );
    
    public static final OntClass IFC_PROXY = m_model.createClass( NS + "IfcProxy" );
    
    public static final OntClass IFC_PUMP_TYPE = m_model.createClass( NS + "IfcPumpType" );
    
    public static final OntClass IFC_QUANTITY_AREA = m_model.createClass( NS + "IfcQuantityArea" );
    
    public static final OntClass IFC_QUANTITY_COUNT = m_model.createClass( NS + "IfcQuantityCount" );
    
    public static final OntClass IFC_QUANTITY_LENGTH = m_model.createClass( NS + "IfcQuantityLength" );
    
    public static final OntClass IFC_QUANTITY_TIME = m_model.createClass( NS + "IfcQuantityTime" );
    
    public static final OntClass IFC_QUANTITY_VOLUME = m_model.createClass( NS + "IfcQuantityVolume" );
    
    public static final OntClass IFC_QUANTITY_WEIGHT = m_model.createClass( NS + "IfcQuantityWeight" );
    
    public static final OntClass IFC_RADIO_ACTIVITY_MEASURE = m_model.createClass( NS + "IfcRadioActivityMeasure" );
    
    public static final OntClass IFC_RADIO_ACTIVITY_MEASURE_LIST = m_model.createClass( NS + "IfcRadioActivityMeasureList" );
    
    public static final OntClass IFC_RADIUS_DIMENSION = m_model.createClass( NS + "IfcRadiusDimension" );
    
    public static final OntClass IFC_RAILING = m_model.createClass( NS + "IfcRailing" );
    
    public static final OntClass IFC_RAILING_TYPE = m_model.createClass( NS + "IfcRailingType" );
    
    public static final OntClass IFC_RAMP = m_model.createClass( NS + "IfcRamp" );
    
    public static final OntClass IFC_RAMP_FLIGHT = m_model.createClass( NS + "IfcRampFlight" );
    
    public static final OntClass IFC_RAMP_FLIGHT_TYPE = m_model.createClass( NS + "IfcRampFlightType" );
    
    public static final OntClass IFC_RATIO_MEASURE = m_model.createClass( NS + "IfcRatioMeasure" );
    
    public static final OntClass IFC_RATIONAL_BEZIER_CURVE = m_model.createClass( NS + "IfcRationalBezierCurve" );
    
    public static final OntClass IFC_REAL = m_model.createClass( NS + "IfcReal" );
    
    public static final OntClass IFC_REAL_LIST = m_model.createClass( NS + "IfcRealList" );
    
    public static final OntClass IFC_RECTANGLE_HOLLOW_PROFILE_DEF = m_model.createClass( NS + "IfcRectangleHollowProfileDef" );
    
    public static final OntClass IFC_RECTANGLE_PROFILE_DEF = m_model.createClass( NS + "IfcRectangleProfileDef" );
    
    public static final OntClass IFC_RECTANGULAR_PYRAMID = m_model.createClass( NS + "IfcRectangularPyramid" );
    
    public static final OntClass IFC_RECTANGULAR_TRIMMED_SURFACE = m_model.createClass( NS + "IfcRectangularTrimmedSurface" );
    
    public static final OntClass IFC_REFERENCES_VALUE_DOCUMENT = m_model.createClass( NS + "IfcReferencesValueDocument" );
    
    public static final OntClass IFC_REGULAR_TIME_SERIES = m_model.createClass( NS + "IfcRegularTimeSeries" );
    
    public static final OntClass IFC_REINFORCEMENT_BAR_PROPERTIES = m_model.createClass( NS + "IfcReinforcementBarProperties" );
    
    public static final OntClass IFC_REINFORCEMENT_DEFINITION_PROPERTIES = m_model.createClass( NS + "IfcReinforcementDefinitionProperties" );
    
    public static final OntClass IFC_REINFORCING_BAR = m_model.createClass( NS + "IfcReinforcingBar" );
    
    public static final OntClass IFC_REINFORCING_ELEMENT = m_model.createClass( NS + "IfcReinforcingElement" );
    
    public static final OntClass IFC_REINFORCING_MESH = m_model.createClass( NS + "IfcReinforcingMesh" );
    
    public static final OntClass IFC_REL_AGGREGATES = m_model.createClass( NS + "IfcRelAggregates" );
    
    public static final OntClass IFC_REL_ASSIGNS = m_model.createClass( NS + "IfcRelAssigns" );
    
    public static final OntClass IFC_REL_ASSIGNS_TASKS = m_model.createClass( NS + "IfcRelAssignsTasks" );
    
    public static final OntClass IFC_REL_ASSIGNS_TO_ACTOR = m_model.createClass( NS + "IfcRelAssignsToActor" );
    
    public static final OntClass IFC_REL_ASSIGNS_TO_CONTROL = m_model.createClass( NS + "IfcRelAssignsToControl" );
    
    public static final OntClass IFC_REL_ASSIGNS_TO_GROUP = m_model.createClass( NS + "IfcRelAssignsToGroup" );
    
    public static final OntClass IFC_REL_ASSIGNS_TO_PROCESS = m_model.createClass( NS + "IfcRelAssignsToProcess" );
    
    public static final OntClass IFC_REL_ASSIGNS_TO_PRODUCT = m_model.createClass( NS + "IfcRelAssignsToProduct" );
    
    public static final OntClass IFC_REL_ASSIGNS_TO_PROJECT_ORDER = m_model.createClass( NS + "IfcRelAssignsToProjectOrder" );
    
    public static final OntClass IFC_REL_ASSIGNS_TO_RESOURCE = m_model.createClass( NS + "IfcRelAssignsToResource" );
    
    public static final OntClass IFC_REL_ASSOCIATES = m_model.createClass( NS + "IfcRelAssociates" );
    
    public static final OntClass IFC_REL_ASSOCIATES_APPLIED_VALUE = m_model.createClass( NS + "IfcRelAssociatesAppliedValue" );
    
    public static final OntClass IFC_REL_ASSOCIATES_APPROVAL = m_model.createClass( NS + "IfcRelAssociatesApproval" );
    
    public static final OntClass IFC_REL_ASSOCIATES_CLASSIFICATION = m_model.createClass( NS + "IfcRelAssociatesClassification" );
    
    public static final OntClass IFC_REL_ASSOCIATES_CONSTRAINT = m_model.createClass( NS + "IfcRelAssociatesConstraint" );
    
    public static final OntClass IFC_REL_ASSOCIATES_DOCUMENT = m_model.createClass( NS + "IfcRelAssociatesDocument" );
    
    public static final OntClass IFC_REL_ASSOCIATES_LIBRARY = m_model.createClass( NS + "IfcRelAssociatesLibrary" );
    
    public static final OntClass IFC_REL_ASSOCIATES_MATERIAL = m_model.createClass( NS + "IfcRelAssociatesMaterial" );
    
    public static final OntClass IFC_REL_ASSOCIATES_PROFILE_PROPERTIES = m_model.createClass( NS + "IfcRelAssociatesProfileProperties" );
    
    public static final OntClass IFC_REL_CONNECTS = m_model.createClass( NS + "IfcRelConnects" );
    
    public static final OntClass IFC_REL_CONNECTS_ELEMENTS = m_model.createClass( NS + "IfcRelConnectsElements" );
    
    public static final OntClass IFC_REL_CONNECTS_PATH_ELEMENTS = m_model.createClass( NS + "IfcRelConnectsPathElements" );
    
    public static final OntClass IFC_REL_CONNECTS_PORT_TO_ELEMENT = m_model.createClass( NS + "IfcRelConnectsPortToElement" );
    
    public static final OntClass IFC_REL_CONNECTS_PORTS = m_model.createClass( NS + "IfcRelConnectsPorts" );
    
    public static final OntClass IFC_REL_CONNECTS_STRUCTURAL_ACTIVITY = m_model.createClass( NS + "IfcRelConnectsStructuralActivity" );
    
    public static final OntClass IFC_REL_CONNECTS_STRUCTURAL_ELEMENT = m_model.createClass( NS + "IfcRelConnectsStructuralElement" );
    
    public static final OntClass IFC_REL_CONNECTS_STRUCTURAL_MEMBER = m_model.createClass( NS + "IfcRelConnectsStructuralMember" );
    
    public static final OntClass IFC_REL_CONNECTS_WITH_ECCENTRICITY = m_model.createClass( NS + "IfcRelConnectsWithEccentricity" );
    
    public static final OntClass IFC_REL_CONNECTS_WITH_REALIZING_ELEMENTS = m_model.createClass( NS + "IfcRelConnectsWithRealizingElements" );
    
    public static final OntClass IFC_REL_CONTAINED_IN_SPATIAL_STRUCTURE = m_model.createClass( NS + "IfcRelContainedInSpatialStructure" );
    
    public static final OntClass IFC_REL_COVERS_BLDG_ELEMENTS = m_model.createClass( NS + "IfcRelCoversBldgElements" );
    
    public static final OntClass IFC_REL_COVERS_SPACES = m_model.createClass( NS + "IfcRelCoversSpaces" );
    
    public static final OntClass IFC_REL_DECOMPOSES = m_model.createClass( NS + "IfcRelDecomposes" );
    
    public static final OntClass IFC_REL_DEFINES = m_model.createClass( NS + "IfcRelDefines" );
    
    public static final OntClass IFC_REL_DEFINES_BY_PROPERTIES = m_model.createClass( NS + "IfcRelDefinesByProperties" );
    
    public static final OntClass IFC_REL_DEFINES_BY_TYPE = m_model.createClass( NS + "IfcRelDefinesByType" );
    
    public static final OntClass IFC_REL_FILLS_ELEMENT = m_model.createClass( NS + "IfcRelFillsElement" );
    
    public static final OntClass IFC_REL_FLOW_CONTROL_ELEMENTS = m_model.createClass( NS + "IfcRelFlowControlElements" );
    
    public static final OntClass IFC_REL_INTERACTION_REQUIREMENTS = m_model.createClass( NS + "IfcRelInteractionRequirements" );
    
    public static final OntClass IFC_REL_NESTS = m_model.createClass( NS + "IfcRelNests" );
    
    public static final OntClass IFC_REL_OCCUPIES_SPACES = m_model.createClass( NS + "IfcRelOccupiesSpaces" );
    
    public static final OntClass IFC_REL_OVERRIDES_PROPERTIES = m_model.createClass( NS + "IfcRelOverridesProperties" );
    
    public static final OntClass IFC_REL_PROJECTS_ELEMENT = m_model.createClass( NS + "IfcRelProjectsElement" );
    
    public static final OntClass IFC_REL_REFERENCED_IN_SPATIAL_STRUCTURE = m_model.createClass( NS + "IfcRelReferencedInSpatialStructure" );
    
    public static final OntClass IFC_REL_SCHEDULES_COST_ITEMS = m_model.createClass( NS + "IfcRelSchedulesCostItems" );
    
    public static final OntClass IFC_REL_SEQUENCE = m_model.createClass( NS + "IfcRelSequence" );
    
    public static final OntClass IFC_REL_SERVICES_BUILDINGS = m_model.createClass( NS + "IfcRelServicesBuildings" );
    
    public static final OntClass IFC_REL_SPACE_BOUNDARY = m_model.createClass( NS + "IfcRelSpaceBoundary" );
    
    public static final OntClass IFC_REL_VOIDS_ELEMENT = m_model.createClass( NS + "IfcRelVoidsElement" );
    
    public static final OntClass IFC_RELATIONSHIP = m_model.createClass( NS + "IfcRelationship" );
    
    public static final OntClass IFC_RELAXATION = m_model.createClass( NS + "IfcRelaxation" );
    
    public static final OntClass IFC_REPRESENTATION = m_model.createClass( NS + "IfcRepresentation" );
    
    public static final OntClass IFC_REPRESENTATION_CONTEXT = m_model.createClass( NS + "IfcRepresentationContext" );
    
    public static final OntClass IFC_REPRESENTATION_ITEM = m_model.createClass( NS + "IfcRepresentationItem" );
    
    public static final OntClass IFC_REPRESENTATION_MAP = m_model.createClass( NS + "IfcRepresentationMap" );
    
    public static final OntClass IFC_RESOURCE = m_model.createClass( NS + "IfcResource" );
    
    public static final OntClass IFC_REVOLVED_AREA_SOLID = m_model.createClass( NS + "IfcRevolvedAreaSolid" );
    
    public static final OntClass IFC_RIB_PLATE_PROFILE_PROPERTIES = m_model.createClass( NS + "IfcRibPlateProfileProperties" );
    
    public static final OntClass IFC_RIGHT_CIRCULAR_CONE = m_model.createClass( NS + "IfcRightCircularCone" );
    
    public static final OntClass IFC_RIGHT_CIRCULAR_CYLINDER = m_model.createClass( NS + "IfcRightCircularCylinder" );
    
    public static final OntClass IFC_ROOF = m_model.createClass( NS + "IfcRoof" );
    
    public static final OntClass IFC_ROOT = m_model.createClass( NS + "IfcRoot" );
    
    public static final OntClass IFC_ROTATIONAL_FREQUENCY_MEASURE = m_model.createClass( NS + "IfcRotationalFrequencyMeasure" );
    
    public static final OntClass IFC_ROTATIONAL_FREQUENCY_MEASURE_LIST = m_model.createClass( NS + "IfcRotationalFrequencyMeasureList" );
    
    public static final OntClass IFC_ROTATIONAL_MASS_MEASURE = m_model.createClass( NS + "IfcRotationalMassMeasure" );
    
    public static final OntClass IFC_ROTATIONAL_MASS_MEASURE_LIST = m_model.createClass( NS + "IfcRotationalMassMeasureList" );
    
    public static final OntClass IFC_ROTATIONAL_STIFFNESS_MEASURE = m_model.createClass( NS + "IfcRotationalStiffnessMeasure" );
    
    public static final OntClass IFC_ROTATIONAL_STIFFNESS_MEASURE_LIST = m_model.createClass( NS + "IfcRotationalStiffnessMeasureList" );
    
    public static final OntClass IFC_ROUNDED_EDGE_FEATURE = m_model.createClass( NS + "IfcRoundedEdgeFeature" );
    
    public static final OntClass IFC_ROUNDED_RECTANGLE_PROFILE_DEF = m_model.createClass( NS + "IfcRoundedRectangleProfileDef" );
    
    public static final OntClass IFC_SIUNIT = m_model.createClass( NS + "IfcSIUnit" );
    
    public static final OntClass IFC_SANITARY_TERMINAL_TYPE = m_model.createClass( NS + "IfcSanitaryTerminalType" );
    
    public static final OntClass IFC_SCHEDULE_TIME_CONTROL = m_model.createClass( NS + "IfcScheduleTimeControl" );
    
    public static final OntClass IFC_SECOND_IN_MINUTE = m_model.createClass( NS + "IfcSecondInMinute" );
    
    public static final OntClass IFC_SECOND_IN_MINUTE_LIST = m_model.createClass( NS + "IfcSecondInMinuteList" );
    
    public static final OntClass IFC_SECTION_MODULUS_MEASURE = m_model.createClass( NS + "IfcSectionModulusMeasure" );
    
    public static final OntClass IFC_SECTION_MODULUS_MEASURE_LIST = m_model.createClass( NS + "IfcSectionModulusMeasureList" );
    
    public static final OntClass IFC_SECTION_PROPERTIES = m_model.createClass( NS + "IfcSectionProperties" );
    
    public static final OntClass IFC_SECTION_REINFORCEMENT_PROPERTIES = m_model.createClass( NS + "IfcSectionReinforcementProperties" );
    
    public static final OntClass IFC_SECTIONAL_AREA_INTEGRAL_MEASURE = m_model.createClass( NS + "IfcSectionalAreaIntegralMeasure" );
    
    public static final OntClass IFC_SECTIONAL_AREA_INTEGRAL_MEASURE_LIST = m_model.createClass( NS + "IfcSectionalAreaIntegralMeasureList" );
    
    public static final OntClass IFC_SECTIONED_SPINE = m_model.createClass( NS + "IfcSectionedSpine" );
    
    public static final OntClass IFC_SENSOR_TYPE = m_model.createClass( NS + "IfcSensorType" );
    
    public static final OntClass IFC_SERVICE_LIFE = m_model.createClass( NS + "IfcServiceLife" );
    
    public static final OntClass IFC_SERVICE_LIFE_FACTOR = m_model.createClass( NS + "IfcServiceLifeFactor" );
    
    public static final OntClass IFC_SHAPE_ASPECT = m_model.createClass( NS + "IfcShapeAspect" );
    
    public static final OntClass IFC_SHAPE_MODEL = m_model.createClass( NS + "IfcShapeModel" );
    
    public static final OntClass IFC_SHAPE_REPRESENTATION = m_model.createClass( NS + "IfcShapeRepresentation" );
    
    public static final OntClass IFC_SHEAR_MODULUS_MEASURE = m_model.createClass( NS + "IfcShearModulusMeasure" );
    
    public static final OntClass IFC_SHEAR_MODULUS_MEASURE_LIST = m_model.createClass( NS + "IfcShearModulusMeasureList" );
    
    public static final OntClass IFC_SHELL_BASED_SURFACE_MODEL = m_model.createClass( NS + "IfcShellBasedSurfaceModel" );
    
    public static final OntClass IFC_SIMPLE_PROPERTY = m_model.createClass( NS + "IfcSimpleProperty" );
    
    public static final OntClass IFC_SITE = m_model.createClass( NS + "IfcSite" );
    
    public static final OntClass IFC_SLAB = m_model.createClass( NS + "IfcSlab" );
    
    public static final OntClass IFC_SLAB_TYPE = m_model.createClass( NS + "IfcSlabType" );
    
    public static final OntClass IFC_SLIPPAGE_CONNECTION_CONDITION = m_model.createClass( NS + "IfcSlippageConnectionCondition" );
    
    public static final OntClass IFC_SOLID_ANGLE_MEASURE = m_model.createClass( NS + "IfcSolidAngleMeasure" );
    
    public static final OntClass IFC_SOLID_ANGLE_MEASURE_LIST = m_model.createClass( NS + "IfcSolidAngleMeasureList" );
    
    public static final OntClass IFC_SOLID_MODEL = m_model.createClass( NS + "IfcSolidModel" );
    
    public static final OntClass IFC_SOUND_POWER_MEASURE = m_model.createClass( NS + "IfcSoundPowerMeasure" );
    
    public static final OntClass IFC_SOUND_POWER_MEASURE_LIST = m_model.createClass( NS + "IfcSoundPowerMeasureList" );
    
    public static final OntClass IFC_SOUND_PRESSURE_MEASURE = m_model.createClass( NS + "IfcSoundPressureMeasure" );
    
    public static final OntClass IFC_SOUND_PRESSURE_MEASURE_LIST = m_model.createClass( NS + "IfcSoundPressureMeasureList" );
    
    public static final OntClass IFC_SOUND_PROPERTIES = m_model.createClass( NS + "IfcSoundProperties" );
    
    public static final OntClass IFC_SOUND_VALUE = m_model.createClass( NS + "IfcSoundValue" );
    
    public static final OntClass IFC_SPACE = m_model.createClass( NS + "IfcSpace" );
    
    public static final OntClass IFC_SPACE_HEATER_TYPE = m_model.createClass( NS + "IfcSpaceHeaterType" );
    
    public static final OntClass IFC_SPACE_PROGRAM = m_model.createClass( NS + "IfcSpaceProgram" );
    
    public static final OntClass IFC_SPACE_THERMAL_LOAD_PROPERTIES = m_model.createClass( NS + "IfcSpaceThermalLoadProperties" );
    
    public static final OntClass IFC_SPACE_TYPE = m_model.createClass( NS + "IfcSpaceType" );
    
    public static final OntClass IFC_SPATIAL_STRUCTURE_ELEMENT = m_model.createClass( NS + "IfcSpatialStructureElement" );
    
    public static final OntClass IFC_SPATIAL_STRUCTURE_ELEMENT_TYPE = m_model.createClass( NS + "IfcSpatialStructureElementType" );
    
    public static final OntClass IFC_SPECIFIC_HEAT_CAPACITY_MEASURE = m_model.createClass( NS + "IfcSpecificHeatCapacityMeasure" );
    
    public static final OntClass IFC_SPECIFIC_HEAT_CAPACITY_MEASURE_LIST = m_model.createClass( NS + "IfcSpecificHeatCapacityMeasureList" );
    
    public static final OntClass IFC_SPECULAR_EXPONENT = m_model.createClass( NS + "IfcSpecularExponent" );
    
    public static final OntClass IFC_SPECULAR_EXPONENT_LIST = m_model.createClass( NS + "IfcSpecularExponentList" );
    
    public static final OntClass IFC_SPECULAR_ROUGHNESS = m_model.createClass( NS + "IfcSpecularRoughness" );
    
    public static final OntClass IFC_SPECULAR_ROUGHNESS_LIST = m_model.createClass( NS + "IfcSpecularRoughnessList" );
    
    public static final OntClass IFC_SPHERE = m_model.createClass( NS + "IfcSphere" );
    
    public static final OntClass IFC_STACK_TERMINAL_TYPE = m_model.createClass( NS + "IfcStackTerminalType" );
    
    public static final OntClass IFC_STAIR = m_model.createClass( NS + "IfcStair" );
    
    public static final OntClass IFC_STAIR_FLIGHT = m_model.createClass( NS + "IfcStairFlight" );
    
    public static final OntClass IFC_STAIR_FLIGHT_TYPE = m_model.createClass( NS + "IfcStairFlightType" );
    
    public static final OntClass IFC_STRING = m_model.createClass( NS + "IfcString" );
    
    public static final OntClass IFC_STRING_LIST = m_model.createClass( NS + "IfcStringList" );
    
    public static final OntClass IFC_STRUCTURAL_ACTION = m_model.createClass( NS + "IfcStructuralAction" );
    
    public static final OntClass IFC_STRUCTURAL_ACTIVITY = m_model.createClass( NS + "IfcStructuralActivity" );
    
    public static final OntClass IFC_STRUCTURAL_ANALYSIS_MODEL = m_model.createClass( NS + "IfcStructuralAnalysisModel" );
    
    public static final OntClass IFC_STRUCTURAL_CONNECTION = m_model.createClass( NS + "IfcStructuralConnection" );
    
    public static final OntClass IFC_STRUCTURAL_CONNECTION_CONDITION = m_model.createClass( NS + "IfcStructuralConnectionCondition" );
    
    public static final OntClass IFC_STRUCTURAL_CURVE_CONNECTION = m_model.createClass( NS + "IfcStructuralCurveConnection" );
    
    public static final OntClass IFC_STRUCTURAL_CURVE_MEMBER = m_model.createClass( NS + "IfcStructuralCurveMember" );
    
    public static final OntClass IFC_STRUCTURAL_CURVE_MEMBER_VARYING = m_model.createClass( NS + "IfcStructuralCurveMemberVarying" );
    
    public static final OntClass IFC_STRUCTURAL_ITEM = m_model.createClass( NS + "IfcStructuralItem" );
    
    public static final OntClass IFC_STRUCTURAL_LINEAR_ACTION = m_model.createClass( NS + "IfcStructuralLinearAction" );
    
    public static final OntClass IFC_STRUCTURAL_LINEAR_ACTION_VARYING = m_model.createClass( NS + "IfcStructuralLinearActionVarying" );
    
    public static final OntClass IFC_STRUCTURAL_LOAD = m_model.createClass( NS + "IfcStructuralLoad" );
    
    public static final OntClass IFC_STRUCTURAL_LOAD_GROUP = m_model.createClass( NS + "IfcStructuralLoadGroup" );
    
    public static final OntClass IFC_STRUCTURAL_LOAD_LINEAR_FORCE = m_model.createClass( NS + "IfcStructuralLoadLinearForce" );
    
    public static final OntClass IFC_STRUCTURAL_LOAD_PLANAR_FORCE = m_model.createClass( NS + "IfcStructuralLoadPlanarForce" );
    
    public static final OntClass IFC_STRUCTURAL_LOAD_SINGLE_DISPLACEMENT = m_model.createClass( NS + "IfcStructuralLoadSingleDisplacement" );
    
    public static final OntClass IFC_STRUCTURAL_LOAD_SINGLE_DISPLACEMENT_DISTORTION = m_model.createClass( NS + "IfcStructuralLoadSingleDisplacementDistortion" );
    
    public static final OntClass IFC_STRUCTURAL_LOAD_SINGLE_FORCE = m_model.createClass( NS + "IfcStructuralLoadSingleForce" );
    
    public static final OntClass IFC_STRUCTURAL_LOAD_SINGLE_FORCE_WARPING = m_model.createClass( NS + "IfcStructuralLoadSingleForceWarping" );
    
    public static final OntClass IFC_STRUCTURAL_LOAD_STATIC = m_model.createClass( NS + "IfcStructuralLoadStatic" );
    
    public static final OntClass IFC_STRUCTURAL_LOAD_TEMPERATURE = m_model.createClass( NS + "IfcStructuralLoadTemperature" );
    
    public static final OntClass IFC_STRUCTURAL_MEMBER = m_model.createClass( NS + "IfcStructuralMember" );
    
    public static final OntClass IFC_STRUCTURAL_PLANAR_ACTION = m_model.createClass( NS + "IfcStructuralPlanarAction" );
    
    public static final OntClass IFC_STRUCTURAL_PLANAR_ACTION_VARYING = m_model.createClass( NS + "IfcStructuralPlanarActionVarying" );
    
    public static final OntClass IFC_STRUCTURAL_POINT_ACTION = m_model.createClass( NS + "IfcStructuralPointAction" );
    
    public static final OntClass IFC_STRUCTURAL_POINT_CONNECTION = m_model.createClass( NS + "IfcStructuralPointConnection" );
    
    public static final OntClass IFC_STRUCTURAL_POINT_REACTION = m_model.createClass( NS + "IfcStructuralPointReaction" );
    
    public static final OntClass IFC_STRUCTURAL_PROFILE_PROPERTIES = m_model.createClass( NS + "IfcStructuralProfileProperties" );
    
    public static final OntClass IFC_STRUCTURAL_REACTION = m_model.createClass( NS + "IfcStructuralReaction" );
    
    public static final OntClass IFC_STRUCTURAL_RESULT_GROUP = m_model.createClass( NS + "IfcStructuralResultGroup" );
    
    public static final OntClass IFC_STRUCTURAL_STEEL_PROFILE_PROPERTIES = m_model.createClass( NS + "IfcStructuralSteelProfileProperties" );
    
    public static final OntClass IFC_STRUCTURAL_SURFACE_CONNECTION = m_model.createClass( NS + "IfcStructuralSurfaceConnection" );
    
    public static final OntClass IFC_STRUCTURAL_SURFACE_MEMBER = m_model.createClass( NS + "IfcStructuralSurfaceMember" );
    
    public static final OntClass IFC_STRUCTURAL_SURFACE_MEMBER_VARYING = m_model.createClass( NS + "IfcStructuralSurfaceMemberVarying" );
    
    public static final OntClass IFC_STRUCTURED_DIMENSION_CALLOUT = m_model.createClass( NS + "IfcStructuredDimensionCallout" );
    
    public static final OntClass IFC_STYLE_MODEL = m_model.createClass( NS + "IfcStyleModel" );
    
    public static final OntClass IFC_STYLED_ITEM = m_model.createClass( NS + "IfcStyledItem" );
    
    public static final OntClass IFC_STYLED_REPRESENTATION = m_model.createClass( NS + "IfcStyledRepresentation" );
    
    public static final OntClass IFC_SUB_CONTRACT_RESOURCE = m_model.createClass( NS + "IfcSubContractResource" );
    
    public static final OntClass IFC_SUBEDGE = m_model.createClass( NS + "IfcSubedge" );
    
    public static final OntClass IFC_SURFACE = m_model.createClass( NS + "IfcSurface" );
    
    public static final OntClass IFC_SURFACE_CURVE_SWEPT_AREA_SOLID = m_model.createClass( NS + "IfcSurfaceCurveSweptAreaSolid" );
    
    public static final OntClass IFC_SURFACE_OF_LINEAR_EXTRUSION = m_model.createClass( NS + "IfcSurfaceOfLinearExtrusion" );
    
    public static final OntClass IFC_SURFACE_OF_REVOLUTION = m_model.createClass( NS + "IfcSurfaceOfRevolution" );
    
    public static final OntClass IFC_SURFACE_STYLE = m_model.createClass( NS + "IfcSurfaceStyle" );
    
    public static final OntClass IFC_SURFACE_STYLE_LIGHTING = m_model.createClass( NS + "IfcSurfaceStyleLighting" );
    
    public static final OntClass IFC_SURFACE_STYLE_REFRACTION = m_model.createClass( NS + "IfcSurfaceStyleRefraction" );
    
    public static final OntClass IFC_SURFACE_STYLE_RENDERING = m_model.createClass( NS + "IfcSurfaceStyleRendering" );
    
    public static final OntClass IFC_SURFACE_STYLE_SHADING = m_model.createClass( NS + "IfcSurfaceStyleShading" );
    
    public static final OntClass IFC_SURFACE_STYLE_WITH_TEXTURES = m_model.createClass( NS + "IfcSurfaceStyleWithTextures" );
    
    public static final OntClass IFC_SURFACE_TEXTURE = m_model.createClass( NS + "IfcSurfaceTexture" );
    
    public static final OntClass IFC_SWEPT_AREA_SOLID = m_model.createClass( NS + "IfcSweptAreaSolid" );
    
    public static final OntClass IFC_SWEPT_DISK_SOLID = m_model.createClass( NS + "IfcSweptDiskSolid" );
    
    public static final OntClass IFC_SWEPT_SURFACE = m_model.createClass( NS + "IfcSweptSurface" );
    
    public static final OntClass IFC_SWITCHING_DEVICE_TYPE = m_model.createClass( NS + "IfcSwitchingDeviceType" );
    
    public static final OntClass IFC_SYMBOL_STYLE = m_model.createClass( NS + "IfcSymbolStyle" );
    
    public static final OntClass IFC_SYSTEM = m_model.createClass( NS + "IfcSystem" );
    
    public static final OntClass IFC_SYSTEM_FURNITURE_ELEMENT_TYPE = m_model.createClass( NS + "IfcSystemFurnitureElementType" );
    
    public static final OntClass IFC_TSHAPE_PROFILE_DEF = m_model.createClass( NS + "IfcTShapeProfileDef" );
    
    public static final OntClass IFC_TABLE = m_model.createClass( NS + "IfcTable" );
    
    public static final OntClass IFC_TABLE_ROW = m_model.createClass( NS + "IfcTableRow" );
    
    public static final OntClass IFC_TANK_TYPE = m_model.createClass( NS + "IfcTankType" );
    
    public static final OntClass IFC_TASK = m_model.createClass( NS + "IfcTask" );
    
    public static final OntClass IFC_TELECOM_ADDRESS = m_model.createClass( NS + "IfcTelecomAddress" );
    
    public static final OntClass IFC_TEMPERATURE_GRADIENT_MEASURE = m_model.createClass( NS + "IfcTemperatureGradientMeasure" );
    
    public static final OntClass IFC_TEMPERATURE_GRADIENT_MEASURE_LIST = m_model.createClass( NS + "IfcTemperatureGradientMeasureList" );
    
    public static final OntClass IFC_TENDON = m_model.createClass( NS + "IfcTendon" );
    
    public static final OntClass IFC_TENDON_ANCHOR = m_model.createClass( NS + "IfcTendonAnchor" );
    
    public static final OntClass IFC_TERMINATOR_SYMBOL = m_model.createClass( NS + "IfcTerminatorSymbol" );
    
    public static final OntClass IFC_TEXT = m_model.createClass( NS + "IfcText" );
    
    public static final OntClass IFC_TEXT_ALIGNMENT = m_model.createClass( NS + "IfcTextAlignment" );
    
    public static final OntClass IFC_TEXT_ALIGNMENT_LIST = m_model.createClass( NS + "IfcTextAlignmentList" );
    
    public static final OntClass IFC_TEXT_DECORATION = m_model.createClass( NS + "IfcTextDecoration" );
    
    public static final OntClass IFC_TEXT_DECORATION_LIST = m_model.createClass( NS + "IfcTextDecorationList" );
    
    public static final OntClass IFC_TEXT_FONT_NAME = m_model.createClass( NS + "IfcTextFontName" );
    
    public static final OntClass IFC_TEXT_FONT_NAME_LIST = m_model.createClass( NS + "IfcTextFontNameList" );
    
    public static final OntClass IFC_TEXT_LIST = m_model.createClass( NS + "IfcTextList" );
    
    public static final OntClass IFC_TEXT_LITERAL = m_model.createClass( NS + "IfcTextLiteral" );
    
    public static final OntClass IFC_TEXT_LITERAL_WITH_EXTENT = m_model.createClass( NS + "IfcTextLiteralWithExtent" );
    
    public static final OntClass IFC_TEXT_STYLE = m_model.createClass( NS + "IfcTextStyle" );
    
    public static final OntClass IFC_TEXT_STYLE_FONT_MODEL = m_model.createClass( NS + "IfcTextStyleFontModel" );
    
    public static final OntClass IFC_TEXT_STYLE_FOR_DEFINED_FONT = m_model.createClass( NS + "IfcTextStyleForDefinedFont" );
    
    public static final OntClass IFC_TEXT_STYLE_TEXT_MODEL = m_model.createClass( NS + "IfcTextStyleTextModel" );
    
    public static final OntClass IFC_TEXT_STYLE_WITH_BOX_CHARACTERISTICS = m_model.createClass( NS + "IfcTextStyleWithBoxCharacteristics" );
    
    public static final OntClass IFC_TEXT_TRANSFORMATION = m_model.createClass( NS + "IfcTextTransformation" );
    
    public static final OntClass IFC_TEXT_TRANSFORMATION_LIST = m_model.createClass( NS + "IfcTextTransformationList" );
    
    public static final OntClass IFC_TEXTURE_COORDINATE = m_model.createClass( NS + "IfcTextureCoordinate" );
    
    public static final OntClass IFC_TEXTURE_COORDINATE_GENERATOR = m_model.createClass( NS + "IfcTextureCoordinateGenerator" );
    
    public static final OntClass IFC_TEXTURE_MAP = m_model.createClass( NS + "IfcTextureMap" );
    
    public static final OntClass IFC_TEXTURE_VERTEX = m_model.createClass( NS + "IfcTextureVertex" );
    
    public static final OntClass IFC_THERMAL_ADMITTANCE_MEASURE = m_model.createClass( NS + "IfcThermalAdmittanceMeasure" );
    
    public static final OntClass IFC_THERMAL_ADMITTANCE_MEASURE_LIST = m_model.createClass( NS + "IfcThermalAdmittanceMeasureList" );
    
    public static final OntClass IFC_THERMAL_CONDUCTIVITY_MEASURE = m_model.createClass( NS + "IfcThermalConductivityMeasure" );
    
    public static final OntClass IFC_THERMAL_CONDUCTIVITY_MEASURE_LIST = m_model.createClass( NS + "IfcThermalConductivityMeasureList" );
    
    public static final OntClass IFC_THERMAL_EXPANSION_COEFFICIENT_MEASURE = m_model.createClass( NS + "IfcThermalExpansionCoefficientMeasure" );
    
    public static final OntClass IFC_THERMAL_EXPANSION_COEFFICIENT_MEASURE_LIST = m_model.createClass( NS + "IfcThermalExpansionCoefficientMeasureList" );
    
    public static final OntClass IFC_THERMAL_MATERIAL_PROPERTIES = m_model.createClass( NS + "IfcThermalMaterialProperties" );
    
    public static final OntClass IFC_THERMAL_RESISTANCE_MEASURE = m_model.createClass( NS + "IfcThermalResistanceMeasure" );
    
    public static final OntClass IFC_THERMAL_RESISTANCE_MEASURE_LIST = m_model.createClass( NS + "IfcThermalResistanceMeasureList" );
    
    public static final OntClass IFC_THERMAL_TRANSMITTANCE_MEASURE = m_model.createClass( NS + "IfcThermalTransmittanceMeasure" );
    
    public static final OntClass IFC_THERMAL_TRANSMITTANCE_MEASURE_LIST = m_model.createClass( NS + "IfcThermalTransmittanceMeasureList" );
    
    public static final OntClass IFC_THERMODYNAMIC_TEMPERATURE_MEASURE = m_model.createClass( NS + "IfcThermodynamicTemperatureMeasure" );
    
    public static final OntClass IFC_THERMODYNAMIC_TEMPERATURE_MEASURE_LIST = m_model.createClass( NS + "IfcThermodynamicTemperatureMeasureList" );
    
    public static final OntClass IFC_TIME_MEASURE = m_model.createClass( NS + "IfcTimeMeasure" );
    
    public static final OntClass IFC_TIME_MEASURE_LIST = m_model.createClass( NS + "IfcTimeMeasureList" );
    
    public static final OntClass IFC_TIME_SERIES = m_model.createClass( NS + "IfcTimeSeries" );
    
    public static final OntClass IFC_TIME_SERIES_REFERENCE_RELATIONSHIP = m_model.createClass( NS + "IfcTimeSeriesReferenceRelationship" );
    
    public static final OntClass IFC_TIME_SERIES_SCHEDULE = m_model.createClass( NS + "IfcTimeSeriesSchedule" );
    
    public static final OntClass IFC_TIME_SERIES_VALUE = m_model.createClass( NS + "IfcTimeSeriesValue" );
    
    public static final OntClass IFC_TIME_STAMP = m_model.createClass( NS + "IfcTimeStamp" );
    
    public static final OntClass IFC_TIME_STAMP_LIST = m_model.createClass( NS + "IfcTimeStampList" );
    
    public static final OntClass IFC_TOPOLOGICAL_REPRESENTATION_ITEM = m_model.createClass( NS + "IfcTopologicalRepresentationItem" );
    
    public static final OntClass IFC_TOPOLOGY_REPRESENTATION = m_model.createClass( NS + "IfcTopologyRepresentation" );
    
    public static final OntClass IFC_TORQUE_MEASURE = m_model.createClass( NS + "IfcTorqueMeasure" );
    
    public static final OntClass IFC_TORQUE_MEASURE_LIST = m_model.createClass( NS + "IfcTorqueMeasureList" );
    
    public static final OntClass IFC_TRANSFORMER_TYPE = m_model.createClass( NS + "IfcTransformerType" );
    
    public static final OntClass IFC_TRANSPORT_ELEMENT = m_model.createClass( NS + "IfcTransportElement" );
    
    public static final OntClass IFC_TRANSPORT_ELEMENT_TYPE = m_model.createClass( NS + "IfcTransportElementType" );
    
    public static final OntClass IFC_TRAPEZIUM_PROFILE_DEF = m_model.createClass( NS + "IfcTrapeziumProfileDef" );
    
    public static final OntClass IFC_TRIMMED_CURVE = m_model.createClass( NS + "IfcTrimmedCurve" );
    
    public static final OntClass IFC_TUBE_BUNDLE_TYPE = m_model.createClass( NS + "IfcTubeBundleType" );
    
    public static final OntClass IFC_TWO_DIRECTION_REPEAT_FACTOR = m_model.createClass( NS + "IfcTwoDirectionRepeatFactor" );
    
    public static final OntClass IFC_TYPE_OBJECT = m_model.createClass( NS + "IfcTypeObject" );
    
    public static final OntClass IFC_TYPE_PRODUCT = m_model.createClass( NS + "IfcTypeProduct" );
    
    public static final OntClass IFC_USHAPE_PROFILE_DEF = m_model.createClass( NS + "IfcUShapeProfileDef" );
    
    public static final OntClass IFC_UNIT_ASSIGNMENT = m_model.createClass( NS + "IfcUnitAssignment" );
    
    public static final OntClass IFC_UNITARY_EQUIPMENT_TYPE = m_model.createClass( NS + "IfcUnitaryEquipmentType" );
    
    public static final OntClass IFC_VALVE_TYPE = m_model.createClass( NS + "IfcValveType" );
    
    public static final OntClass IFC_VAPOR_PERMEABILITY_MEASURE = m_model.createClass( NS + "IfcVaporPermeabilityMeasure" );
    
    public static final OntClass IFC_VAPOR_PERMEABILITY_MEASURE_LIST = m_model.createClass( NS + "IfcVaporPermeabilityMeasureList" );
    
    public static final OntClass IFC_VECTOR = m_model.createClass( NS + "IfcVector" );
    
    public static final OntClass IFC_VERTEX = m_model.createClass( NS + "IfcVertex" );
    
    public static final OntClass IFC_VERTEX_BASED_TEXTURE_MAP = m_model.createClass( NS + "IfcVertexBasedTextureMap" );
    
    public static final OntClass IFC_VERTEX_LOOP = m_model.createClass( NS + "IfcVertexLoop" );
    
    public static final OntClass IFC_VERTEX_POINT = m_model.createClass( NS + "IfcVertexPoint" );
    
    public static final OntClass IFC_VIBRATION_ISOLATOR_TYPE = m_model.createClass( NS + "IfcVibrationIsolatorType" );
    
    public static final OntClass IFC_VIRTUAL_ELEMENT = m_model.createClass( NS + "IfcVirtualElement" );
    
    public static final OntClass IFC_VIRTUAL_GRID_INTERSECTION = m_model.createClass( NS + "IfcVirtualGridIntersection" );
    
    public static final OntClass IFC_VOLUME_MEASURE = m_model.createClass( NS + "IfcVolumeMeasure" );
    
    public static final OntClass IFC_VOLUME_MEASURE_LIST = m_model.createClass( NS + "IfcVolumeMeasureList" );
    
    public static final OntClass IFC_VOLUMETRIC_FLOW_RATE_MEASURE = m_model.createClass( NS + "IfcVolumetricFlowRateMeasure" );
    
    public static final OntClass IFC_VOLUMETRIC_FLOW_RATE_MEASURE_LIST = m_model.createClass( NS + "IfcVolumetricFlowRateMeasureList" );
    
    public static final OntClass IFC_WALL = m_model.createClass( NS + "IfcWall" );
    
    public static final OntClass IFC_WALL_STANDARD_CASE = m_model.createClass( NS + "IfcWallStandardCase" );
    
    public static final OntClass IFC_WALL_TYPE = m_model.createClass( NS + "IfcWallType" );
    
    public static final OntClass IFC_WARPING_CONSTANT_MEASURE = m_model.createClass( NS + "IfcWarpingConstantMeasure" );
    
    public static final OntClass IFC_WARPING_CONSTANT_MEASURE_LIST = m_model.createClass( NS + "IfcWarpingConstantMeasureList" );
    
    public static final OntClass IFC_WARPING_MOMENT_MEASURE = m_model.createClass( NS + "IfcWarpingMomentMeasure" );
    
    public static final OntClass IFC_WARPING_MOMENT_MEASURE_LIST = m_model.createClass( NS + "IfcWarpingMomentMeasureList" );
    
    public static final OntClass IFC_WASTE_TERMINAL_TYPE = m_model.createClass( NS + "IfcWasteTerminalType" );
    
    public static final OntClass IFC_WATER_PROPERTIES = m_model.createClass( NS + "IfcWaterProperties" );
    
    public static final OntClass IFC_WINDOW = m_model.createClass( NS + "IfcWindow" );
    
    public static final OntClass IFC_WINDOW_LINING_PROPERTIES = m_model.createClass( NS + "IfcWindowLiningProperties" );
    
    public static final OntClass IFC_WINDOW_PANEL_PROPERTIES = m_model.createClass( NS + "IfcWindowPanelProperties" );
    
    public static final OntClass IFC_WINDOW_STYLE = m_model.createClass( NS + "IfcWindowStyle" );
    
    public static final OntClass IFC_WORK_CONTROL = m_model.createClass( NS + "IfcWorkControl" );
    
    public static final OntClass IFC_WORK_PLAN = m_model.createClass( NS + "IfcWorkPlan" );
    
    public static final OntClass IFC_WORK_SCHEDULE = m_model.createClass( NS + "IfcWorkSchedule" );
    
    public static final OntClass IFC_YEAR_NUMBER = m_model.createClass( NS + "IfcYearNumber" );
    
    public static final OntClass IFC_YEAR_NUMBER_LIST = m_model.createClass( NS + "IfcYearNumberList" );
    
    public static final OntClass IFC_ZSHAPE_PROFILE_DEF = m_model.createClass( NS + "IfcZShapeProfileDef" );
    
    public static final OntClass IFC_ZONE = m_model.createClass( NS + "IfcZone" );
    
    public static final OntClass WORLD = m_model.createClass( NS + "World" );
    

    // Vocabulary individuals
    ///////////////////////////

}

/*
@footer@
*/

