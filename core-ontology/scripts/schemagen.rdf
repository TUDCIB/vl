<?xml version='1.0'?>

<!DOCTYPE rdf:RDF [
    <!ENTITY jena    'http://jena.hpl.hp.com/'>

    <!ENTITY rdf     'http://www.w3.org/1999/02/22-rdf-syntax-ns#'>
    <!ENTITY rdfs    'http://www.w3.org/2000/01/rdf-schema#'>
    <!ENTITY owl     'http://www.w3.org/2002/07/owl#'>
    <!ENTITY xsd     'http://www.w3.org/2001/XMLSchema#'>
    <!ENTITY base    '&jena;2003/04/schemagen'>
    <!ENTITY sgen    '&base;#'>
]>

<rdf:RDF
  xmlns:rdf   ="&rdf;"
  xmlns:rdfs  ="&rdfs;"
  xmlns:owl   ="&owl;"
  xmlns:sgen  ="&sgen;"
  xmlns       ="&sgen;"
  xml:base    ="&base;"
>

<!--
  Example schemagen configuration for use with jena.schemagen
    Not all possible options are used in this example, see Javadoc and Howto for full details.
    Need to be named 'schemagen.rdf' in practice.

  Author: Ian Dickinson, mailto:ian_dickinson@users.sourceforge.net
  CVS:    $Id: schemagen.rdf,v 1.3 2009-10-06 13:04:42 ian_dickinson Exp $
  
  Modified by Ken Baumgaertel
-->

<sgen:Config>
    <!-- specifies that the  source document uses OWL -->
    <sgen:owl rdf:datatype="&xsd;boolean">true</sgen:owl>

    <!-- specifies that we want the generated vocab to use OntClass, OntProperty, etc, not Resource and Property -->
    <sgen:ontology rdf:datatype="&xsd;boolean">true</sgen:ontology>

    <!-- specifies that we want names mapped to uppercase (as standard Java constants) -->
    <sgen:uppercase rdf:datatype="&xsd;boolean">true</sgen:uppercase>

    <!-- append Vocabulary to class name, so input beer.owl becomes BeerVocabulary.java -->
    <sgen:classnamesuffix rdf:datatype="&xsd;string">Vocabulary</sgen:classnamesuffix>

    <!-- the java package that the vocabulary is in -->
    <sgen:package rdf:datatype="&xsd;string">de.tudresden.bau.cib.vl.core.model.ontology.vocabulary</sgen:package>

    <!-- the directory or file to write the results out to -->
    <sgen:output rdf:datatype="&xsd;string">vocabulary</sgen:output>


<!-- the template for the file footer (note @footer@ is an ant-ism, will not be processed by VocabGen) -->
<sgen:footer rdf:datatype="&xsd;string">
/*
@footer@
*/
</sgen:footer>


<!-- template for introducing the properties in the vocabulary -->
<sgen:propSection rdf:datatype="&xsd;string">
    // Vocabulary properties
    ///////////////////////////
</sgen:propSection>

<!-- template for introducing the classes in the vocabulary -->
<sgen:classSection rdf:datatype="&xsd;string">
    // Vocabulary classes
    ///////////////////////////
    
    /** Find the OntClass by the URI 
     * @param uri can be in lower cases
     * @return
     */
    public static final OntClass findOntClass(String uri) {
    	ExtendedIterator ontClassIterator = m_model.listClasses();
    	while(ontClassIterator.hasNext()) {
    		OntClass ontClass = (OntClass) ontClassIterator.next();
    		if(ontClass.getURI().equalsIgnoreCase(uri)) {
    			return ontClass;
    		}
    	}
    	return null; 	
    }
</sgen:classSection>

<!-- template for introducing the individuals in the vocabulary -->
<sgen:individualsSection rdf:datatype="&xsd;string">
    // Vocabulary individuals
    ///////////////////////////
</sgen:individualsSection>

<!-- template for doing fancy declarations of individuals -->
<sgen:individualTemplate rdf:datatype="&xsd;string">
    /** Ontology individual corresponding to {@link #%valname%} */
    public static final %valclass% _%valname% = m_model.%valcreator%( "%valuri%", %valtype% );
</sgen:individualTemplate>

</sgen:Config>

</rdf:RDF>
